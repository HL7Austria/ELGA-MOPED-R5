{
	"info": {
		"_postman_id": "2623e5f6-8f83-42b0-a5a2-dc82481fdd4a",
		"name": "Patient Journey Blank Collection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "21943930"
	},
	"item": [
		{
			"name": "KH",
			"item": [
				{
					"name": "0 GET Requests",
					"item": [
						{
							"name": "GET Organization KH Stammdaten",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();",
											"const org = response.entry?.[0]?.resource || {}; // Extract the first organization",
											"",
											"let htmlContent = `",
											"    <style>",
											"        table { width: 100%; border-collapse: collapse; }",
											"        th, td { border: 1px solid #ddd; padding: 10px; text-align: left; }",
											"        th { background-color: #f4f4f4; }",
											"    </style>",
											"    <h2>Organization Details</h2>",
											"    <table>",
											"        <thead>",
											"            <tr>",
											"                <th>ID</th>",
											"                <th>Name</th>",
											"                <th>Identifier System</th>",
											"                <th>Identifier Value</th>",
											"                <th>Additional Identifiers</th>",
											"                <th>Last Updated</th>",
											"                <th>Address</th>",
											"                <th>City</th>",
											"                <th>State</th>",
											"                <th>Postal Code</th>",
											"                <th>Country</th>",
											"            </tr>",
											"        </thead>",
											"        <tbody>",
											"            <tr>",
											"                <td>${org.id || \"N/A\"}</td>",
											"                <td>${org.name || \"N/A\"}</td>",
											"                <td>${org.identifier?.[0]?.system || \"N/A\"}</td>",
											"                <td>${org.identifier?.[0]?.value || \"N/A\"}</td>",
											"                <td>${org.identifier?.slice(1).map(id => `${id.system}: ${id.value}`).join(\"<br>\") || \"N/A\"}</td>",
											"            ",
											"                <td>${org.meta?.lastUpdated || \"N/A\"}</td>",
											"                <td>${org.contact?.[0]?.address?.line?.join(\", \") || \"N/A\"}</td>",
											"                <td>${org.contact?.[0]?.address?.city || \"N/A\"}</td>",
											"                <td>${org.contact?.[0]?.address?.state || \"N/A\"}</td>",
											"                <td>${org.contact?.[0]?.address?.postalCode || \"N/A\"}</td>",
											"                <td>${org.contact?.[0]?.address?.country || \"N/A\"}</td>",
											"            </tr>",
											"        </tbody>",
											"    </table>`;",
											"",
											"pm.visualizer.set(htmlContent);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{server-base}}/Organization?identifier=urn:ietf:rfc:3986|{{gda-oid-value}}",
									"host": [
										"{{server-base}}"
									],
									"path": [
										"Organization"
									],
									"query": [
										{
											"key": "identifier",
											"value": "urn:ietf:rfc:3986|{{gda-oid-value}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET Account (nur dieser Fall)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();",
											"const accounts = response.entry",
											"    ?.map(entry => entry.resource)",
											"    ?.filter(resource => resource.resourceType === \"Account\") || []; // Ensures only Account resources are displayed",
											"",
											"// Helper function to extract extension values",
											"const getExtensionValue = (resource, url) => {",
											"    const ext = resource.extension?.find(ext => ext.url === url);",
											"    return ext ? (ext.valueUnsignedInt ?? ext.valueCoding?.code ?? \"N/A\") : \"N/A\";",
											"};",
											"",
											"// Extract patient reference correctly (handling array case)",
											"const getPatientReference = (resource) => {",
											"    if (Array.isArray(resource.subject)) {",
											"        return resource.subject[0]?.reference || \"N/A\";",
											"    }",
											"    return resource.subject?.reference || \"N/A\";",
											"};",
											"",
											"let htmlContent = `",
											"    <style>",
											"        table { width: 100%; border-collapse: collapse; }",
											"        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }",
											"        th { background-color: #f4f4f4; }",
											"    </style>",
											"    <h2>Account-Details</h2>",
											"    <table>",
											"        <thead>",
											"            <tr>",
											"                <th>ID</th>",
											"                <th>Status</th>",
											"                <th>Patient</th>",
											"                <th>Eigent√ºmer</th>",
											"                <th>Versicherung</th>",
											"                <th>Anzahl Verlegungen</th>",
											"                <th>Anzahl Beurlaubungen</th>",
											"                <th>Workflow-Status</th>",
											"            </tr>",
											"        </thead>",
											"        <tbody>`;",
											"",
											"accounts.forEach(account => {",
											"    htmlContent += `",
											"        <tr>",
											"            <td>${account.id || \"N/A\"}</td>",
											"            <td>${account.status || \"N/A\"}</td>",
											"            <td>${getPatientReference(account)}</td>",
											"            <td>${account.owner?.reference || \"N/A\"}</td>",
											"            <td>${account.coverage?.[0]?.coverage?.reference || \"N/A\"}</td>",
											"            <td>${getExtensionValue(account, \"https://elga.moped.at/StructureDefinition/moped-ext-AnzahlVerlegungen\")}</td>",
											"            <td>${getExtensionValue(account, \"https://elga.moped.at/StructureDefinition/moped-ext-AnzahlBeurlaubungen\")}</td>",
											"            <td>${getExtensionValue(account, \"https://elga.moped.at/StructureDefinition/moped-ext-workflow-status\")}</td>",
											"        </tr>`;",
											"});",
											"",
											"htmlContent += `</tbody></table>`;",
											"pm.visualizer.set(htmlContent);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{server-base}}/Encounter?identifier={{gda-oid-value}}|{{aufnahmezahl}}&_include=Encounter:account",
									"host": [
										"{{server-base}}"
									],
									"path": [
										"Encounter"
									],
									"query": [
										{
											"key": "identifier",
											"value": "{{gda-oid-value}}|{{aufnahmezahl}}"
										},
										{
											"key": "_include",
											"value": "Encounter:account"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET Patient",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();",
											"const patients = response.entry",
											"    ?.map(entry => entry.resource)",
											"    ?.filter(resource => resource.resourceType === \"Patient\") || []; // Ensures only Patient resources are displayed",
											"",
											"// Helper function to extract identifier values",
											"const getIdentifierValue = (resource, system) => {",
											"    return resource.identifier?.find(id => id.system === system)?.value || \"N/A\";",
											"};",
											"",
											"// Helper function to extract extension values",
											"const getExtensionValue = (resource, url) => {",
											"    const ext = resource.extension?.find(ext => ext.url === url);",
											"    return ext ? (ext.valueCodeableConcept?.coding?.[0]?.display || ext.valueString || \"N/A\") : \"N/A\";",
											"};",
											"",
											"// Helper function to get the address",
											"const getAddress = (resource) => {",
											"    const address = resource.address?.[0]; // Assuming primary address",
											"    if (!address) return \"N/A\";",
											"",
											"    const street = address.line?.[0] || \"N/A\";",
											"    const postalCode = address.postalCode || \"N/A\";",
											"    const city = address.city || \"N/A\";",
											"    const state = address.state || \"N/A\";",
											"    const country = address.country || \"N/A\";",
											"    const municipalityCode = getExtensionValue(address, \"http://hl7.at/fhir/HL7ATCoreProfiles/5.0.0/StructureDefinition/at-core-ext-address-municipalityCode\");",
											"",
											"    return `${street}, ${postalCode} ${city}, ${state}, ${country} (Gemeindecode: ${municipalityCode})`;",
											"};",
											"",
											"let htmlContent = `",
											"    <style>",
											"        table { width: 100%; border-collapse: collapse; }",
											"        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }",
											"        th { background-color: #f4f4f4; }",
											"    </style>",
											"    <h2>Patientendetails</h2>",
											"    <table>",
											"        <thead>",
											"            <tr>",
											"                <th>ID</th>",
											"                <th>Sozialversicherungsnummer</th>",
											"                <th>Name</th>",
											"                <th>Geschlecht</th>",
											"                <th>Geburtsdatum</th>",
											"                ",
											"                <th>Adresse</th>",
											"            </tr>",
											"        </thead>",
											"        <tbody>`;",
											"",
											"patients.forEach(patient => {",
											"    const name = patient.name?.[0];",
											"    const fullName = name ? `${name.given?.join(\" \")} ${name.family}` : \"N/A\";",
											"",
											"    htmlContent += `",
											"        <tr>",
											"            <td>${patient.id || \"N/A\"}</td>",
											"            <td>${getIdentifierValue(patient, \"urn:oid:1.2.40.0.10.1.4.3.1\")}</td>",
											"            <td>${fullName}</td>",
											"            <td>${patient.gender || \"N/A\"}</td>",
											"            <td>${patient.birthDate || \"N/A\"}</td>",
											"            ",
											"            <td>${getAddress(patient)}</td>",
											"        </tr>`;",
											"});",
											"",
											"htmlContent += `</tbody></table>`;",
											"pm.visualizer.set(htmlContent);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{server-base}}/Patient?identifier=urn:oid:1.2.40.0.10.1.4.3.1|{{svnr}}",
									"host": [
										"{{server-base}}"
									],
									"path": [
										"Patient"
									],
									"query": [
										{
											"key": "identifier",
											"value": "urn:oid:1.2.40.0.10.1.4.3.1|{{svnr}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET VAERequest offen (alle F√§lle des KH)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();",
											"const vaeRequests = response.entry",
											"    ?.map(entry => entry.resource)",
											"    ?.filter(resource => resource.resourceType === \"Claim\") || []; // Nur Claim (VAERequest) Ressourcen anzeigen",
											"",
											"// Helper-Funktion zur Extraktion von Erweiterungswerten",
											"const getExtensionValue = (resource, url) => {",
											"    const ext = resource.extension?.find(ext => ext.url.toLowerCase() === url.toLowerCase());",
											"    return ext ? (ext.valueUnsignedInt ?? ext.valueCoding?.code ?? \"N/A\") : \"N/A\";",
											"};",
											"",
											"// Helper-Funktion zur Extraktion von SupportingInfo-Boolean-Werten",
											"const getSupportingInfo = (resource, code) => {",
											"    const info = resource.supportingInfo?.find(info => ",
											"        info.code?.coding?.some(coding => coding.code === code)",
											"    );",
											"    return info ? (info.valueBoolean !== undefined ? (info.valueBoolean ? \"Ja\" : \"Nein\") : \"N/A\") : \"N/A\";",
											"};",
											"",
											"// Helper-Funktion zur Extraktion von Encounter-Referenzen",
											"const getEncounterReference = (resource, index) => {",
											"    return resource.encounter?.[index]?.reference || \"N/A\";",
											"};",
											"",
											"// Helper-Funktion zur Extraktion von Unfalltyp",
											"const getAccidentType = (resource) => {",
											"    return resource.accident?.type?.coding?.[0]?.code || \"N/A\";",
											"};",
											"",
											"// Unfalldatum soll nur angezeigt werden, wenn VerdachtArbeitsSch√ºlerunfall nicht \"0\" ist",
											"const getAccidentDate = (resource) => {",
											"    const accidentType = getAccidentType(resource);",
											"    return accidentType !== \"0\" ? (resource.accident?.date || \"N/A\") : \"N/A\";",
											"};",
											"",
											"let htmlContent = `",
											"    <style>",
											"        table { width: 100%; border-collapse: collapse; }",
											"        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }",
											"        th { background-color: #f4f4f4; }",
											"    </style>",
											"    <h2>VAERequest-Details</h2>",
											"    <table>",
											"        <thead>",
											"            <tr>",
											"                <th>ID</th>",
											"                <th>Erstellt am</th>",
											"                <th>Status</th>",
											"                <th>Nutzungsart</th>",
											"                <th>Patient</th>",
											"                <th>Sonderklasse</th>",
											"                <th>Verl√§ngerungstage</th>",
											"                <th>Versicherer</th>",
											"                <th>Leistungserbringer</th>",
											"                <th>Coverage</th>",
											"                <th>Verdacht Arbeits/Sch√ºlerunfall</th>",
											"                <th>Unfalldatum</th>",
											"                <th>Encounter</th>",
											"                <th>Transfer Encounter</th>",
											"                <th>Verdacht auf Fremdverschulden</th>",
											"            </tr>",
											"        </thead>",
											"        <tbody>`;",
											"",
											"vaeRequests.forEach(vae => {",
											"    htmlContent += `",
											"        <tr>",
											"            <td>${vae.id || \"N/A\"}</td>",
											"            <td>${vae.created || \"N/A\"}</td>",
											"            <td>${vae.status || \"N/A\"}</td>",
											"            <td>${vae.use || \"N/A\"}</td>",
											"            <td>${vae.patient?.reference || \"N/A\"}</td>",
											"            <td>${getExtensionValue(vae, \"https://elga.moped.at/StructureDefinition/moped-ext-sonderklasse\")}</td>",
											"            <td>${getExtensionValue(vae, \"https://elga.moped.at/StructureDefinition/moped-ext-verlaengerungstage\")}</td>",
											"            <td>${vae.insurer?.reference || \"N/A\"}</td>",
											"            <td>${vae.provider?.reference || \"N/A\"}</td>",
											"            <td>${vae.insurance?.[0]?.coverage?.reference || \"N/A\"}</td>",
											"            <td>${getAccidentType(vae)}</td>",
											"            <td>${getAccidentDate(vae)}</td>",
											"            <td>${getEncounterReference(vae, 0)}</td>",
											"            <td>${getEncounterReference(vae, 1)}</td>",
											"            <td>${getSupportingInfo(vae, \"FREVER\")}</td>",
											"        </tr>`;",
											"});",
											"",
											"htmlContent += `</tbody></table>`;",
											"pm.visualizer.set(htmlContent);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{server-base}}/Claim?status=active&use=preauthorization&provider.identifier=urn:ietf:rfc:3986|{{gda-oid-value}}&insurer.identifier=http://svc.co.at/CodeSystem/ecard-svt-cs|{{sv-identifier-value}}&_has:ClaimResponse:request:status:not=active",
									"host": [
										"{{server-base}}"
									],
									"path": [
										"Claim"
									],
									"query": [
										{
											"key": "status",
											"value": "active"
										},
										{
											"key": "use",
											"value": "preauthorization"
										},
										{
											"key": "provider.identifier",
											"value": "urn:ietf:rfc:3986|{{gda-oid-value}}"
										},
										{
											"key": "insurer.identifier",
											"value": "http://svc.co.at/CodeSystem/ecard-svt-cs|{{sv-identifier-value}}"
										},
										{
											"key": "_has:ClaimResponse:request:status:not",
											"value": "active",
											"description": "nur unbeantwortete Requests"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET VAERequest offen (nur dieser Fall)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();",
											"const vaeRequests = response.entry",
											"    ?.map(entry => entry.resource)",
											"    ?.filter(resource => resource.resourceType === \"Claim\") || []; // Nur Claim (VAERequest) Ressourcen anzeigen",
											"",
											"// Helper-Funktion zur Extraktion von Erweiterungswerten",
											"const getExtensionValue = (resource, url) => {",
											"    const ext = resource.extension?.find(ext => ext.url.toLowerCase() === url.toLowerCase());",
											"    return ext ? (ext.valueUnsignedInt ?? ext.valueCoding?.code ?? \"N/A\") : \"N/A\";",
											"};",
											"",
											"// Helper-Funktion zur Extraktion von SupportingInfo-Boolean-Werten",
											"const getSupportingInfo = (resource, code) => {",
											"    const info = resource.supportingInfo?.find(info => ",
											"        info.code?.coding?.some(coding => coding.code === code)",
											"    );",
											"    return info ? (info.valueBoolean !== undefined ? (info.valueBoolean ? \"Ja\" : \"Nein\") : \"N/A\") : \"N/A\";",
											"};",
											"",
											"// Helper-Funktion zur Extraktion von Encounter-Referenzen",
											"const getEncounterReference = (resource, index) => {",
											"    return resource.encounter?.[index]?.reference || \"N/A\";",
											"};",
											"",
											"// Helper-Funktion zur Extraktion von Unfalltyp",
											"const getAccidentType = (resource) => {",
											"    return resource.accident?.type?.coding?.[0]?.code || \"N/A\";",
											"};",
											"",
											"// Unfalldatum soll nur angezeigt werden, wenn VerdachtArbeitsSch√ºlerunfall nicht \"0\" ist",
											"const getAccidentDate = (resource) => {",
											"    const accidentType = getAccidentType(resource);",
											"    return accidentType !== \"0\" ? (resource.accident?.date || \"N/A\") : \"N/A\";",
											"};",
											"",
											"let htmlContent = `",
											"    <style>",
											"        table { width: 100%; border-collapse: collapse; }",
											"        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }",
											"        th { background-color: #f4f4f4; }",
											"    </style>",
											"    <h2>VAERequest-Details</h2>",
											"    <table>",
											"        <thead>",
											"            <tr>",
											"                <th>ID</th>",
											"                <th>Erstellt am</th>",
											"                <th>Status</th>",
											"                <th>Nutzungsart</th>",
											"                <th>Patient</th>",
											"                <th>Sonderklasse</th>",
											"                <th>Verl√§ngerungstage</th>",
											"                <th>Versicherer</th>",
											"                <th>Leistungserbringer</th>",
											"                <th>Coverage</th>",
											"                <th>Verdacht Arbeits/Sch√ºlerunfall</th>",
											"                <th>Unfalldatum</th>",
											"                <th>Encounter</th>",
											"                <th>Transfer Encounter</th>",
											"                <th>Verdacht auf Fremdverschulden</th>",
											"            </tr>",
											"        </thead>",
											"        <tbody>`;",
											"",
											"vaeRequests.forEach(vae => {",
											"    htmlContent += `",
											"        <tr>",
											"            <td>${vae.id || \"N/A\"}</td>",
											"            <td>${vae.created || \"N/A\"}</td>",
											"            <td>${vae.status || \"N/A\"}</td>",
											"            <td>${vae.use || \"N/A\"}</td>",
											"            <td>${vae.patient?.reference || \"N/A\"}</td>",
											"            <td>${getExtensionValue(vae, \"https://elga.moped.at/StructureDefinition/moped-ext-sonderklasse\")}</td>",
											"            <td>${getExtensionValue(vae, \"https://elga.moped.at/StructureDefinition/moped-ext-verlaengerungstage\")}</td>",
											"            <td>${vae.insurer?.reference || \"N/A\"}</td>",
											"            <td>${vae.provider?.reference || \"N/A\"}</td>",
											"            <td>${vae.insurance?.[0]?.coverage?.reference || \"N/A\"}</td>",
											"            <td>${getAccidentType(vae)}</td>",
											"            <td>${getAccidentDate(vae)}</td>",
											"            <td>${getEncounterReference(vae, 0)}</td>",
											"            <td>${getEncounterReference(vae, 1)}</td>",
											"            <td>${getSupportingInfo(vae, \"FREVER\")}</td>",
											"        </tr>`;",
											"});",
											"",
											"htmlContent += `</tbody></table>`;",
											"pm.visualizer.set(htmlContent);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{server-base}}/Claim?status=active&use=preauthorization&provider.identifier=urn:ietf:rfc:3986|{{gda-oid-value}}&insurer.identifier=http://svc.co.at/CodeSystem/ecard-svt-cs|{{sv-identifier-value}}&_has:ClaimResponse:request:status:not=active&claim-encounter.identifier={{gda-oid-value}}|{{aufnahmezahl}}",
									"host": [
										"{{server-base}}"
									],
									"path": [
										"Claim"
									],
									"query": [
										{
											"key": "status",
											"value": "active"
										},
										{
											"key": "use",
											"value": "preauthorization"
										},
										{
											"key": "provider.identifier",
											"value": "urn:ietf:rfc:3986|{{gda-oid-value}}"
										},
										{
											"key": "insurer.identifier",
											"value": "http://svc.co.at/CodeSystem/ecard-svt-cs|{{sv-identifier-value}}"
										},
										{
											"key": "_has:ClaimResponse:request:status:not",
											"value": "active",
											"description": "nur unbeantwortete Requests"
										},
										{
											"key": "claim-encounter.identifier",
											"value": "{{gda-oid-value}}|{{aufnahmezahl}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET VAEResponse (alle F√§lle des KH)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();",
											"const vaeResponses = response.entry",
											"    ?.map(entry => entry.resource)",
											"    ?.filter(resource => resource.resourceType === \"ClaimResponse\") || []; // Nur ClaimResponse (VAEResponse) Ressourcen anzeigen",
											"",
											"// Helper-Funktion zur Extraktion von Erweiterungswerten",
											"const getExtensionValue = (resource, url) => {",
											"    const ext = resource.extension?.find(ext => ext.url.toLowerCase() === url.toLowerCase());",
											"    return ext ? (ext.valueUnsignedInt ?? ext.valueCoding?.code ?? \"N/A\") : \"N/A\";",
											"};",
											"",
											"let htmlContent = `",
											"    <style>",
											"        table { width: 100%; border-collapse: collapse; }",
											"        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }",
											"        th { background-color: #f4f4f4; }",
											"    </style>",
											"    <h2>VAEResponse-Details</h2>",
											"    <table>",
											"        <thead>",
											"            <tr>",
											"                <th>ID</th>",
											"                <th>Erstellt am</th>",
											"                <th>Status</th>",
											"                <th>Nutzungsart</th>",
											"                <th>Patient</th>",
											"                <th>Versicherer</th>",
											"                <th>Angefragte VAERequest</th>",
											"                <th>Anfragender Leistungserbringer</th>",
											"                <th>Versicherung</th>",
											"               ",
											"                <th>VAEStatus</th>",
											"                <th>G√ºltigkeitszeitraum Start</th>",
											"                <th>G√ºltigkeitszeitraum Ende</th>",
											"                <th>Verpflegskosten-Beitragsbefreiung</th>",
											"                <th>Vortageanzahl auf Kostenbeitrag</th>",
											"            </tr>",
											"        </thead>",
											"        <tbody>`;",
											"",
											"vaeResponses.forEach(vae => {",
											"    htmlContent += `",
											"        <tr>",
											"            <td>${vae.id || \"N/A\"}</td>",
											"            <td>${vae.created || \"N/A\"}</td>",
											"            <td>${vae.status || \"N/A\"}</td>",
											"            <td>${vae.use || \"N/A\"}</td>",
											"            <td>${vae.patient?.reference || \"N/A\"}</td>",
											"            <td>${vae.insurer?.reference || \"N/A\"}</td>",
											"            <td>${vae.request?.reference || \"N/A\"}</td>",
											"            <td>${vae.requestor?.reference || \"N/A\"}</td>",
											"            <td>${vae.insurance?.[0]?.coverage?.reference || \"N/A\"}</td>",
											"            ",
											"            <td>${vae.decision?.coding?.[0]?.code || \"N/A\"}</td>",
											"            <td>${vae.preAuthPeriod?.start || \"N/A\"}</td>",
											"            <td>${vae.preAuthPeriod?.end || \"N/A\"}</td>",
											"            <td>${getExtensionValue(vae, \"https://elga.moped.at/StructureDefinition/moped-ext-VerpflegskostenBeitragsbefreiung\")}</td>",
											"            <td>${getExtensionValue(vae, \"https://elga.moped.at/StructureDefinition/moped-ext-VortageanzahlAufKostenbeitrag\")}</td>",
											"        </tr>`;",
											"});",
											"",
											"htmlContent += `</tbody></table>`;",
											"pm.visualizer.set(htmlContent);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server-base}}/ClaimResponse?status=active&use=preauthorization&requestor.identifier=urn:ietf:rfc:3986|{{gda-oid-value}}&insurer.identifier=http://svc.co.at/CodeSystem/ecard-svt-cs|{{sv-identifier-value}}",
									"host": [
										"{{server-base}}"
									],
									"path": [
										"ClaimResponse"
									],
									"query": [
										{
											"key": "status",
											"value": "active"
										},
										{
											"key": "use",
											"value": "preauthorization"
										},
										{
											"key": "requestor.identifier",
											"value": "urn:ietf:rfc:3986|{{gda-oid-value}}"
										},
										{
											"key": "insurer.identifier",
											"value": "http://svc.co.at/CodeSystem/ecard-svt-cs|{{sv-identifier-value}}"
										},
										{
											"key": "_include",
											"value": "*",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET VAEResponse (nur dieser Fall)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();",
											"const vaeResponses = response.entry",
											"    ?.map(entry => entry.resource)",
											"    ?.filter(resource => resource.resourceType === \"ClaimResponse\") || []; // Nur ClaimResponse (VAEResponse) Ressourcen anzeigen",
											"",
											"// Helper-Funktion zur Extraktion von Erweiterungswerten",
											"const getExtensionValue = (resource, url) => {",
											"    const ext = resource.extension?.find(ext => ext.url.toLowerCase() === url.toLowerCase());",
											"    return ext ? (ext.valueUnsignedInt ?? ext.valueCoding?.code ?? \"N/A\") : \"N/A\";",
											"};",
											"",
											"let htmlContent = `",
											"    <style>",
											"        table { width: 100%; border-collapse: collapse; }",
											"        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }",
											"        th { background-color: #f4f4f4; }",
											"    </style>",
											"    <h2>VAEResponse-Details</h2>",
											"    <table>",
											"        <thead>",
											"            <tr>",
											"                <th>ID</th>",
											"                <th>Erstellt am</th>",
											"                <th>Status</th>",
											"                <th>Nutzungsart</th>",
											"                <th>Patient</th>",
											"                <th>Versicherer</th>",
											"                <th>Angefragte VAERequest</th>",
											"                <th>Anfragender Leistungserbringer</th>",
											"                <th>Versicherung</th>",
											"               ",
											"                <th>VAEStatus</th>",
											"                <th>G√ºltigkeitszeitraum Start</th>",
											"                <th>G√ºltigkeitszeitraum Ende</th>",
											"                <th>Verpflegskosten-Beitragsbefreiung</th>",
											"                <th>Vortageanzahl auf Kostenbeitrag</th>",
											"            </tr>",
											"        </thead>",
											"        <tbody>`;",
											"",
											"vaeResponses.forEach(vae => {",
											"    htmlContent += `",
											"        <tr>",
											"            <td>${vae.id || \"N/A\"}</td>",
											"            <td>${vae.created || \"N/A\"}</td>",
											"            <td>${vae.status || \"N/A\"}</td>",
											"            <td>${vae.use || \"N/A\"}</td>",
											"            <td>${vae.patient?.reference || \"N/A\"}</td>",
											"            <td>${vae.insurer?.reference || \"N/A\"}</td>",
											"            <td>${vae.request?.reference || \"N/A\"}</td>",
											"            <td>${vae.requestor?.reference || \"N/A\"}</td>",
											"            <td>${vae.insurance?.[0]?.coverage?.reference || \"N/A\"}</td>",
											"            ",
											"            <td>${vae.decision?.coding?.[0]?.code || \"N/A\"}</td>",
											"            <td>${vae.preAuthPeriod?.start || \"N/A\"}</td>",
											"            <td>${vae.preAuthPeriod?.end || \"N/A\"}</td>",
											"            <td>${getExtensionValue(vae, \"https://elga.moped.at/StructureDefinition/moped-ext-VerpflegskostenBeitragsbefreiung\")}</td>",
											"            <td>${getExtensionValue(vae, \"https://elga.moped.at/StructureDefinition/moped-ext-VortageanzahlAufKostenbeitrag\")}</td>",
											"        </tr>`;",
											"});",
											"",
											"htmlContent += `</tbody></table>`;",
											"pm.visualizer.set(htmlContent);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server-base}}/ClaimResponse?status=active&use=preauthorization&requestor.identifier=urn:ietf:rfc:3986|{{gda-oid-value}}&insurer.identifier=http://svc.co.at/CodeSystem/ecard-svt-cs|{{sv-identifier-value}}&request.claim-encounter.identifier={{gda-oid-value}}|{{aufnahmezahl}}",
									"host": [
										"{{server-base}}"
									],
									"path": [
										"ClaimResponse"
									],
									"query": [
										{
											"key": "status",
											"value": "active"
										},
										{
											"key": "use",
											"value": "preauthorization"
										},
										{
											"key": "requestor.identifier",
											"value": "urn:ietf:rfc:3986|{{gda-oid-value}}"
										},
										{
											"key": "insurer.identifier",
											"value": "http://svc.co.at/CodeSystem/ecard-svt-cs|{{sv-identifier-value}}"
										},
										{
											"key": "request.claim-encounter.identifier",
											"value": "{{gda-oid-value}}|{{aufnahmezahl}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET Encounter (nur dieser Fall)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();",
											"",
											"// **Filterung der Encounters (nur MopedEncounter)**",
											"const encounters = response.entry",
											"    ?.map(entry => entry.resource)",
											"    ?.filter(resource => ",
											"        resource.resourceType === \"Encounter\" &&",
											"        resource.meta?.profile?.includes(\"https://elga.moped.at/StructureDefinition/MopedEncounter\")",
											"    ) || []; ",
											"",
											"// Helper-Funktion zur Extraktion von Identifier-Werten",
											"const getIdentifierValue = (resource, code) => {",
											"    return resource.identifier?.find(id => ",
											"        id.type?.coding?.some(coding => coding.code === code)",
											"    )?.value || \"N/A\";",
											"};",
											"",
											"// Helper-Funktion zur Extraktion von Coding-Werten",
											"const getCodingValue = (resource, path) => {",
											"    const field = path.reduce((obj, key) => obj?.[key], resource);",
											"    return field?.coding?.[0]?.code || \"N/A\";",
											"};",
											"",
											"// Helper-Funktion zur Extraktion von Reason-Werten",
											"const getReason = (resource) => {",
											"    return resource.reason?.[0]?.value?.[0]?.concept?.coding?.[0]?.code || \"N/A\";",
											"};",
											"",
											"// Helper-Funktion zur Extraktion von Diagnose-Werten",
											"const getDiagnosis = (resource) => {",
											"    return resource.diagnosis?.[0]?.condition?.[0]?.concept?.coding?.[0]?.display || \"N/A\";",
											"};",
											"",
											"// Helper-Funktion zur Extraktion von Extensions-Werten",
											"const getExtensionValue = (resource, url) => {",
											"    const ext = resource.admission?.extension?.find(ext => ext.url === url) ||",
											"                resource.extension?.find(ext => ext.url === url);",
											"    return ext ? (ext.valueCoding?.code || ext.valueDate || ext.valueCode || \"N/A\") : \"N/A\";",
											"};",
											"",
											"let htmlContent = `",
											"    <style>",
											"        table { width: 100%; border-collapse: collapse; }",
											"        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }",
											"        th { background-color: #f4f4f4; }",
											"    </style>",
											"    <h2>Encounter-Details</h2>",
											"    <table>",
											"        <thead>",
											"            <tr>",
											"                <th>ID</th>",
											"                <th>Aufnahmezahl</th>",
											"                <th>Datensatz-ID</th>",
											"                <th>Status</th>",
											"                <th>Behandlungsart</th>",
											"                <th>Aufnahmeart</th>",
											"                <th>Patient</th>",
											"                <th>Leistungserbringer</th>",
											"                <th>Aufnahmezeitpunkt</th>",
											"                <th>Entlassungszeitpunkt</th>",
											"                ",
											"                <th>Ursache</th>",
											"                <th>Diagnose</th>",
											"                <th>Aufnahmeart2</th>",
											"                <th>Entlassungsart</th>",
											"                <th>Account</th>",
											"                <th>Transportart</th>",
											"                <th>Unfalldatum</th>",
											"            </tr>",
											"        </thead>",
											"        <tbody>`;",
											"",
											"// **Encounter Tabelle**",
											"encounters.forEach(encounter => {",
											"    htmlContent += `",
											"        <tr>",
											"            <td>${encounter.id || \"N/A\"}</td>",
											"            <td>${getIdentifierValue(encounter, \"VN\")}</td>",
											"            <td>${getIdentifierValue(encounter, \"ANON\")}</td>",
											"            <td>${encounter.status || \"N/A\"}</td>",
											"            <td>${getCodingValue(encounter, [\"class\", 0])}</td>",
											"            <td>${getCodingValue(encounter, [\"class\", 1])}</td>",
											"            <td>${encounter.subject?.reference || \"N/A\"}</td>",
											"            <td>${encounter.serviceProvider?.reference || \"N/A\"}</td>",
											"            <td>${encounter.actualPeriod?.start || \"N/A\"}</td>",
											"            <td>${encounter.actualPeriod?.end || \"N/A\"}</td>",
											"           ",
											"            <td>${getReason(encounter)}</td>",
											"            <td>${getDiagnosis(encounter)}</td>",
											"            <td>${getExtensionValue(encounter, \"https://elga.moped.at/StructureDefinition/moped-ext-aufnahmeart\")}</td>",
											"<td>${encounter.admission?.dischargeDisposition?.coding?.[0]?.code || \"N/A\"}</td>",
											"            <td>${encounter.account?.[0]?.reference || \"N/A\"}</td>",
											"            <td>${getExtensionValue(encounter, \"https://elga.moped.at/StructureDefinition/moped-ext-transportart\")}</td>",
											"            <td>${getExtensionValue(encounter, \"https://elga.moped.at/StructureDefinition/moped-ext-unfalldatum\")}</td>",
											"        </tr>`;",
											"});",
											"",
											"htmlContent += `</tbody></table>`;",
											"pm.visualizer.set(htmlContent);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{server-base}}/Encounter?identifier={{gda-oid-value}}|{{aufnahmezahl}}",
									"host": [
										"{{server-base}}"
									],
									"path": [
										"Encounter"
									],
									"query": [
										{
											"key": "identifier",
											"value": "{{gda-oid-value}}|{{aufnahmezahl}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET Encounter (alle F√§lle des KH)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();",
											"",
											"// **Filterung der Encounters (nur MopedEncounter)**",
											"const encounters = response.entry",
											"    ?.map(entry => entry.resource)",
											"    ?.filter(resource => ",
											"        resource.resourceType === \"Encounter\" &&",
											"        resource.meta?.profile?.includes(\"https://elga.moped.at/StructureDefinition/MopedEncounter\")",
											"    ) || []; ",
											"",
											"// Helper-Funktion zur Extraktion von Identifier-Werten",
											"const getIdentifierValue = (resource, code) => {",
											"    return resource.identifier?.find(id => ",
											"        id.type?.coding?.some(coding => coding.code === code)",
											"    )?.value || \"N/A\";",
											"};",
											"",
											"// Helper-Funktion zur Extraktion von Coding-Werten",
											"const getCodingValue = (resource, path) => {",
											"    const field = path.reduce((obj, key) => obj?.[key], resource);",
											"    return field?.coding?.[0]?.code || \"N/A\";",
											"};",
											"",
											"// Helper-Funktion zur Extraktion von Reason-Werten",
											"const getReason = (resource) => {",
											"    return resource.reason?.[0]?.value?.[0]?.concept?.coding?.[0]?.code || \"N/A\";",
											"};",
											"",
											"// Helper-Funktion zur Extraktion von Diagnose-Werten",
											"const getDiagnosis = (resource) => {",
											"    return resource.diagnosis?.[0]?.condition?.[0]?.concept?.coding?.[0]?.display || \"N/A\";",
											"};",
											"",
											"// Helper-Funktion zur Extraktion von Extensions-Werten",
											"const getExtensionValue = (resource, url) => {",
											"    const ext = resource.admission?.extension?.find(ext => ext.url === url) ||",
											"                resource.extension?.find(ext => ext.url === url);",
											"    return ext ? (ext.valueCoding?.code || ext.valueDate || ext.valueCode || \"N/A\") : \"N/A\";",
											"};",
											"",
											"let htmlContent = `",
											"    <style>",
											"        table { width: 100%; border-collapse: collapse; }",
											"        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }",
											"        th { background-color: #f4f4f4; }",
											"    </style>",
											"    <h2>Encounter-Details</h2>",
											"    <table>",
											"        <thead>",
											"            <tr>",
											"                <th>ID</th>",
											"                <th>Aufnahmezahl</th>",
											"                <th>Datensatz-ID</th>",
											"                <th>Status</th>",
											"                <th>Behandlungsart</th>",
											"                <th>Aufnahmeart</th>",
											"                <th>Patient</th>",
											"                <th>Leistungserbringer</th>",
											"                <th>Aufnahmezeitpunkt</th>",
											"                <th>Entlassungszeitpunkt</th>",
											"                ",
											"                <th>Ursache</th>",
											"                <th>Diagnose</th>",
											"                <th>Aufnahmeart2</th>",
											"                <th>Entlassungsart</th>",
											"                <th>Account</th>",
											"                <th>Transportart</th>",
											"                <th>Unfalldatum</th>",
											"            </tr>",
											"        </thead>",
											"        <tbody>`;",
											"",
											"// **Encounter Tabelle**",
											"encounters.forEach(encounter => {",
											"    htmlContent += `",
											"        <tr>",
											"            <td>${encounter.id || \"N/A\"}</td>",
											"            <td>${getIdentifierValue(encounter, \"VN\")}</td>",
											"            <td>${getIdentifierValue(encounter, \"ANON\")}</td>",
											"            <td>${encounter.status || \"N/A\"}</td>",
											"            <td>${getCodingValue(encounter, [\"class\", 0])}</td>",
											"            <td>${getCodingValue(encounter, [\"class\", 1])}</td>",
											"            <td>${encounter.subject?.reference || \"N/A\"}</td>",
											"            <td>${encounter.serviceProvider?.reference || \"N/A\"}</td>",
											"            <td>${encounter.actualPeriod?.start || \"N/A\"}</td>",
											"            <td>${encounter.actualPeriod?.end || \"N/A\"}</td>",
											"           ",
											"            <td>${getReason(encounter)}</td>",
											"            <td>${getDiagnosis(encounter)}</td>",
											"            <td>${getExtensionValue(encounter, \"https://elga.moped.at/StructureDefinition/moped-ext-aufnahmeart\")}</td>",
											"<td>${encounter.admission?.dischargeDisposition?.coding?.[0]?.code || \"N/A\"}</td>",
											"            <td>${encounter.account?.[0]?.reference || \"N/A\"}</td>",
											"            <td>${getExtensionValue(encounter, \"https://elga.moped.at/StructureDefinition/moped-ext-transportart\")}</td>",
											"            <td>${getExtensionValue(encounter, \"https://elga.moped.at/StructureDefinition/moped-ext-unfalldatum\")}</td>",
											"        </tr>`;",
											"});",
											"",
											"htmlContent += `</tbody></table>`;",
											"pm.visualizer.set(htmlContent);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{server-base}}/Encounter?service-provider.identifier=urn:ietf:rfc:3986|{{gda-oid-value}}",
									"host": [
										"{{server-base}}"
									],
									"path": [
										"Encounter"
									],
									"query": [
										{
											"key": "service-provider.identifier",
											"value": "urn:ietf:rfc:3986|{{gda-oid-value}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET TransferEncounter (nur dieser Fall)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();",
											"",
											"// **Filter encounters to include ONLY MopedTransferEncounter**",
											"const transferEncounters = response.entry",
											"    ?.map(entry => entry.resource)",
											"    ?.filter(resource => ",
											"        resource.resourceType === \"Encounter\" &&",
											"        Array.isArray(resource.meta?.profile) &&",
											"        resource.meta.profile.includes(\"https://elga.moped.at/StructureDefinition/MopedTransferEncounter\")",
											"    ) || []; ",
											"",
											"// **Helper function to get Patient reference correctly**",
											"const getPatientReference = (resource) => {",
											"    return resource.subject?.reference || \"N/A\";",
											"};",
											"",
											"// **Helper function to get Coding values from a path**",
											"const getCodingValue = (resource, path) => {",
											"    const field = path.reduce((obj, key) => obj?.[key], resource);",
											"    return field?.coding?.[0]?.code || \"N/A\";",
											"};",
											"",
											"// **Extract nested extension values (Altersgruppe, Neugeborenes)**",
											"const getNestedExtensionValue = (resource, parentUrl, childUrl) => {",
											"    const parentExt = resource.admission?.extension?.find(ext => ext.url === parentUrl);",
											"    const childExt = parentExt?.extension?.find(ext => ext.url === childUrl);",
											"    ",
											"    if (childExt) {",
											"        if (typeof childExt.valueBoolean !== \"undefined\") {",
											"            return childExt.valueBoolean ? \"Ja\" : \"Nein\"; // Convert boolean to Ja/Nein",
											"        }",
											"        return childExt.valueCode || \"N/A\";",
											"    }",
											"    return \"N/A\";",
											"};",
											"",
											"// **Helper function to extract Discharge Disposition**",
											"const getDischargeDisposition = (resource) => {",
											"    return resource.admission?.dischargeDisposition?.coding?.[0]?.code || \"N/A\";",
											"};",
											"",
											"// **HTML Table Generation**",
											"let htmlContent = `",
											"    <style>",
											"        table { width: 100%; border-collapse: collapse; }",
											"        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }",
											"        th { background-color: #f4f4f4; }",
											"    </style>",
											"    <h2>Moped Transfer Encounter Details</h2>",
											"    <table>",
											"        <thead>",
											"            <tr>",
											"                <th>ID</th>",
											"                <th>Status</th>",
											"                <th>Patient</th>",
											"                <th>Leistungserbringer</th>",
											"                <th>Aufnahmezeitpunkt</th>",
											"                <th>Entlassungszeitpunkt</th>",
											"                <th>physische Anwesenheit</th>",
											"                <th>Altersgruppe Zugang</th>",
											"                <th>Altersgruppe Entlassung</th>",
											"                <th>Neugeborenes</th>",
											"                <th>Abgangsart</th>",
											"                <th>Teil von</th>",
											"            </tr>",
											"        </thead>",
											"        <tbody>`;",
											"",
											"// **Transfer Encounter Table**",
											"transferEncounters.forEach(encounter => {",
											"    htmlContent += `",
											"        <tr>",
											"            <td>${encounter.id || \"N/A\"}</td>",
											"            <td>${encounter.status || \"N/A\"}</td>",
											"            <td>${getPatientReference(encounter)}</td>",
											"            <td>${encounter.serviceProvider?.reference || \"N/A\"}</td>",
											"            <td>${encounter.actualPeriod?.start || \"N/A\"}</td>",
											"            <td>${encounter.actualPeriod?.end || \"N/A\"}</td>",
											"            <td>${getCodingValue(encounter, [\"subjectStatus\"])}</td>",
											"            <td>${getNestedExtensionValue(encounter, \"https://elga.moped.at/StructureDefinition/moped-ext-altersgruppe\", \"beiZugang\")}</td>",
											"            <td>${getNestedExtensionValue(encounter, \"https://elga.moped.at/StructureDefinition/moped-ext-altersgruppe\", \"beiEntlassung\")}</td>",
											"            <td>${getNestedExtensionValue(encounter, \"https://elga.moped.at/StructureDefinition/moped-ext-altersgruppe\", \"neugeborenes\")}</td>",
											"            <td>${getDischargeDisposition(encounter)}</td>",
											"            <td>${encounter.partOf?.reference || \"N/A\"}</td>",
											"        </tr>`;",
											"});",
											"",
											"htmlContent += `</tbody></table>`;",
											"pm.visualizer.set(htmlContent);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{server-base}}/Encounter?part-of.identifier={{gda-oid-value}}|{{aufnahmezahl}}&_include=Encounter:subject",
									"host": [
										"{{server-base}}"
									],
									"path": [
										"Encounter"
									],
									"query": [
										{
											"key": "part-of.identifier",
											"value": "{{gda-oid-value}}|{{aufnahmezahl}}"
										},
										{
											"key": "_include",
											"value": "Encounter:subject"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET Coverage (nur dieser Fall)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();",
											"",
											"// **Filter to include ONLY MopedCoverage**",
											"const coverages = response.entry",
											"    ?.map(entry => entry.resource)",
											"    ?.filter(resource => ",
											"        resource.resourceType === \"Coverage\" &&",
											"        Array.isArray(resource.meta?.profile) &&",
											"        resource.meta.profile.includes(\"https://elga.moped.at/StructureDefinition/MopedCoverage\")",
											"    ) || [];",
											"",
											"// **Helper function to get Identifier value**",
											"const getIdentifierValue = (resource) => {",
											"    return resource.identifier?.[0]?.value || \"N/A\";",
											"};",
											"",
											"// **Helper function to get System of Identifier**",
											"const getIdentifierSystem = (resource) => {",
											"    return resource.identifier?.[0]?.system || \"N/A\";",
											"};",
											"",
											"// **Helper function to get Assigner Reference**",
											"const getIdentifierAssigner = (resource) => {",
											"    return resource.identifier?.[0]?.assigner?.reference || \"N/A\";",
											"};",
											"",
											"// **Helper function to get Coverage Class Type**",
											"const getCoverageClassType = (resource) => {",
											"    return resource.class?.[0]?.type?.coding?.[0]?.code || \"N/A\";",
											"};",
											"",
											"// **Helper function to get Coverage Class Value**",
											"const getCoverageClassValue = (resource) => {",
											"    return resource.class?.[0]?.value?.value || \"N/A\";",
											"};",
											"",
											"// **HTML Table Generation**",
											"let htmlContent = `",
											"    <style>",
											"        table { width: 100%; border-collapse: collapse; }",
											"        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }",
											"        th { background-color: #f4f4f4; }",
											"    </style>",
											"    <h2>Moped Coverage Details</h2>",
											"    <table>",
											"        <thead>",
											"            <tr>",
											"                <th>ID</th>",
											"                <th>VDASID</th>",
											"                <th>beneficiary</th>",
											"                <th>subscriber</th>",
											"                <th>Versicherer</th>",
											"                <th>Versichertenkategorie</th>",
											"            </tr>",
											"        </thead>",
											"        <tbody>`;",
											"",
											"// **Coverage Table**",
											"coverages.forEach(coverage => {",
											"    htmlContent += `",
											"        <tr>",
											"            <td>${coverage.id || \"N/A\"}</td>",
											"            <td>${getIdentifierValue(coverage)}</td>",
											"           ",
											"            <td>${coverage.beneficiary?.reference || \"N/A\"}</td>",
											"            <td>${coverage.subscriber?.reference || \"N/A\"}</td>",
											"            <td>${coverage.insurer?.reference || \"N/A\"}</td>",
											"            <td>${getCoverageClassValue(coverage)}</td>",
											"        </tr>`;",
											"});",
											"",
											"htmlContent += `</tbody></table>`;",
											"pm.visualizer.set(htmlContent);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{server-base}}/Coverage?identifier={{vdasID}}",
									"host": [
										"{{server-base}}"
									],
									"path": [
										"Coverage"
									],
									"query": [
										{
											"key": "identifier",
											"value": "{{vdasID}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET Conditions (nur dieser Fall)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();",
											"",
											"// **Filter to include ONLY MopedCondition**",
											"const conditions = response.entry",
											"    ?.map(entry => entry.resource)",
											"    ?.filter(resource => ",
											"        resource.resourceType === \"Condition\" &&",
											"        Array.isArray(resource.meta?.profile) &&",
											"        resource.meta.profile.includes(\"https://elga.moped.at/StructureDefinition/MopedCondition\")",
											"    ) || [];",
											"",
											"// **Helper function to get Identifier value**",
											"const getIdentifierValue = (resource) => {",
											"    return resource.identifier?.[0]?.value || \"N/A\";",
											"};",
											"",
											"// **Helper function to get Clinical Status**",
											"const getClinicalStatus = (resource) => {",
											"    return resource.clinicalStatus?.coding?.[0]?.code || \"N/A\";",
											"};",
											"",
											"// **Helper function to get Verification Status**",
											"const getVerificationStatus = (resource) => {",
											"    return resource.verificationStatus?.coding?.[0]?.code || \"N/A\";",
											"};",
											"",
											"// **Helper function to get ICD-10 Code**",
											"const getICDCode = (resource) => {",
											"    return resource.code?.coding?.find(coding => coding.system.includes(\"icd-10-bmsgpk-2025\"))?.code || \"N/A\";",
											"};",
											"",
											"// **Helper function to get ICD-10 Description**",
											"const getICDDescription = (resource) => {",
											"    return resource.code?.coding?.find(coding => coding.system.includes(\"icd-10-bmsgpk-2025\"))?.display || \"N/A\";",
											"};",
											"",
											"// **Helper function to get HDG Code**",
											"const getHDGCode = (resource) => {",
											"    return resource.code?.coding?.find(coding => coding.system.includes(\"LKFHauptdiagnosegruppenCS\"))?.code || \"N/A\";",
											"};",
											"",
											"// **Helper function to get HDG Description**",
											"const getHDGDescription = (resource) => {",
											"    return resource.code?.coding?.find(coding => coding.system.includes(\"LKFHauptdiagnosegruppenCS\"))?.display || \"N/A\";",
											"};",
											"",
											"// **HTML Table Generation**",
											"let htmlContent = `",
											"    <style>",
											"        table { width: 100%; border-collapse: collapse; }",
											"        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }",
											"        th { background-color: #f4f4f4; }",
											"    </style>",
											"    <h2>Moped Condition Details</h2>",
											"    <table>",
											"        <thead>",
											"            <tr>",
											"                <th>ID</th>",
											"                <th>Identifier</th>",
											"          ",
											"                ",
											"                <th>ICD-10 Code</th>",
											"                <th>ICD-10 Description</th>",
											"                <th>HDG Code</th>",
											"                <th>HDG Description</th>",
											"                <th>Patient</th>",
											"                <th>Encounter</th>",
											"            </tr>",
											"        </thead>",
											"        <tbody>`;",
											"",
											"// **Condition Table**",
											"conditions.forEach(condition => {",
											"    htmlContent += `",
											"        <tr>",
											"            <td>${condition.id || \"N/A\"}</td>",
											"            <td>${getIdentifierValue(condition)}</td>",
											"       ",
											"            ",
											"            <td>${getICDCode(condition)}</td>",
											"            <td>${getICDDescription(condition)}</td>",
											"            <td>${getHDGCode(condition)}</td>",
											"            <td>${getHDGDescription(condition)}</td>",
											"            <td>${condition.subject?.reference || \"N/A\"}</td>",
											"            <td>${condition.encounter?.reference || \"N/A\"}</td>",
											"        </tr>`;",
											"});",
											"",
											"htmlContent += `</tbody></table>`;",
											"pm.visualizer.set(htmlContent);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{server-base}}/Condition?encounter.identifier={{gda-oid-value}}|{{aufnahmezahl}}",
									"host": [
										"{{server-base}}"
									],
									"path": [
										"Condition"
									],
									"query": [
										{
											"key": "_include",
											"value": "*",
											"disabled": true
										},
										{
											"key": "encounter.identifier",
											"value": "{{gda-oid-value}}|{{aufnahmezahl}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET Procedures (nur dieser Fall)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();",
											"",
											"// **Filter to include ONLY MopedProcedure**",
											"const procedures = response.entry",
											"    ?.map(entry => entry.resource)",
											"    ?.filter(resource => ",
											"        resource.resourceType === \"Procedure\" &&",
											"        Array.isArray(resource.meta?.profile) &&",
											"        resource.meta.profile.includes(\"https://elga.moped.at/StructureDefinition/MopedProcedure\")",
											"    ) || [];",
											"",
											"// **Helper function to get Identifier value**",
											"const getIdentifierValue = (resource) => {",
											"    return resource.identifier?.find(id => id.type?.coding?.some(coding => coding.code === \"RI\"))?.value || \"N/A\";",
											"};",
											"",
											"// **Helper function to get Procedure Status**",
											"const getProcedureStatus = (resource) => {",
											"    return resource.status || \"N/A\";",
											"};",
											"",
											"// **Updated Helper function to get LKF Code & Description**",
											"const getLKFCodeData = (resource) => {",
											"    const lkfCoding = resource.code?.coding?.find(coding => coding.system.includes(\"lkat-bmsgpk-2025\"));",
											"    return {",
											"        code: lkfCoding?.code || \"N/A\",",
											"        display: lkfCoding?.display || \"N/A\"",
											"    };",
											"};",
											"",
											"// **Helper function to get MEL Gruppe Code & Description**",
											"const getMELGruppeData = (resource) => {",
											"    const melCoding = resource.category?.coding?.find(coding => coding.system.includes(\"LKFmedizinischeEinzelleistungenCS\"));",
											"    return {",
											"        code: melCoding?.code || \"N/A\",",
											"        display: melCoding?.display || \"N/A\"",
											"    };",
											"};",
											"",
											"// **Helper function to get Occurrence Date**",
											"const getOccurrenceDate = (resource) => {",
											"    return resource.occurrenceDateTime || \"N/A\";",
											"};",
											"",
											"// **HTML Table Generation**",
											"let htmlContent = `",
											"    <style>",
											"        table { width: 100%; border-collapse: collapse; }",
											"        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }",
											"        th { background-color: #f4f4f4; }",
											"    </style>",
											"    <h2>Moped Procedure Details</h2>",
											"    <table>",
											"        <thead>",
											"            <tr>",
											"                <th>ID</th>",
											"                <th>Identifier</th>",
											"                <th>Status</th>",
											"                <th>LKF Leistung</th>",
											"                <th>LKF Beschreibung</th>",
											"                <th>MEL Gruppe</th>",
											"                <th>MEL Gruppe Beschreibung</th>",
											"                <th>Datum</th>",
											"                <th>Patient</th>",
											"                <th>Encounter</th>",
											"                <th>Abteilung</th>",
											"                <th>Krankenanstalt</th>",
											"            </tr>",
											"        </thead>",
											"        <tbody>`;",
											"",
											"// **Procedure Table**",
											"procedures.forEach(procedure => {",
											"    const lkfData = getLKFCodeData(procedure);",
											"    const melData = getMELGruppeData(procedure);",
											"",
											"    htmlContent += `",
											"        <tr>",
											"            <td>${procedure.id || \"N/A\"}</td>",
											"            <td>${getIdentifierValue(procedure)}</td>",
											"            <td>${getProcedureStatus(procedure)}</td>",
											"            <td>${lkfData.code}</td>",
											"            <td>${lkfData.display}</td>",
											"            <td>${melData.code}</td>",
											"            <td>${melData.display}</td>",
											"            <td>${getOccurrenceDate(procedure)}</td>",
											"            <td>${procedure.subject?.reference || \"N/A\"}</td>",
											"            <td>${procedure.encounter?.reference || \"N/A\"}</td>",
											"            <td>${procedure.performer?.[0]?.actor?.reference || \"N/A\"}</td>",
											"            <td>${procedure.performer?.[0]?.onBehalfOf?.reference || \"N/A\"}</td>",
											"        </tr>`;",
											"});",
											"",
											"htmlContent += `</tbody></table>`;",
											"pm.visualizer.set(htmlContent);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{server-base}}/Procedure?encounter.identifier={{gda-oid-value}}|{{aufnahmezahl}}",
									"host": [
										"{{server-base}}"
									],
									"path": [
										"Procedure"
									],
									"query": [
										{
											"key": "encounter.identifier",
											"value": "{{gda-oid-value}}|{{aufnahmezahl}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET LKFRequest offen (alle F√§lle des KH)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();",
											"",
											"// **Filterung der LKFRequest (Claim) Ressourcen**",
											"const claims = response.entry",
											"    ?.map(entry => entry.resource)",
											"    ?.filter(resource => ",
											"        resource.resourceType === \"Claim\" &&",
											"        Array.isArray(resource.meta?.profile) &&",
											"        resource.meta.profile.includes(\"https://elga.moped.at/StructureDefinition/MopedLKFRequest\")",
											"    ) || [];",
											"",
											"// **Helper-Funktion: Extraktion von Coding-Werten**",
											"const getCodingValue = (resource, path) => {",
											"    const field = path.reduce((obj, key) => obj?.[key], resource);",
											"    return field?.coding?.[0]?.code || \"N/A\";",
											"};",
											"",
											"// **Helper-Funktion: Extraktion von Extensions-Werten**",
											"const getExtensionValue = (resource, url) => {",
											"    const ext = resource.extension?.find(ext => ext.url === url);",
											"    return ext ? (ext.valueCoding?.code || ext.valueString || \"N/A\") : \"N/A\";",
											"};",
											"",
											"// **Helper-Funktion: Extraktion von LKF-Punkten (komplexe Extension)**",
											"const getLKFPoints = (resource, subfield) => {",
											"    const ext = resource.extension?.find(ext => ext.url === \"https://elga.moped.at/StructureDefinition/moped-ext-LKFPunkte\");",
											"    const subExt = ext?.extension?.find(e => e.url === subfield);",
											"    return subExt ? subExt.valueUnsignedInt || 0 : \"N/A\";",
											"};",
											"",
											"// **Helper-Funktion: Extraktion von Diagnosen mit Haupt-/Zusatzdiagnose**",
											"const getDiagnoses = (claim) => {",
											"    return claim.diagnosis?.map(diagnosis => {",
											"        const diagnosisType = claim.item?.find(item => ",
											"            item.diagnosisSequence?.includes(diagnosis.sequence)",
											"        )?.category?.coding?.[0]?.code || \"N/A\";",
											"",
											"        return `${diagnosis.diagnosisReference?.reference || \"N/A\"} (${diagnosisType})`;",
											"    }).join(\"<br>\") || \"N/A\"; // Join diagnoses in one row",
											"};",
											"",
											"// **Helper-Funktion: Extraktion aller Encounters**",
											"const getEncounters = (claim) => {",
											"    return claim.encounter?.map(enc => enc.reference).join(\"<br>\") || \"N/A\";",
											"};",
											"",
											"// **Helper-Funktion: Extraktion aller Leistungen**",
											"const getProcedures = (claim) => {",
											"    return claim.procedure?.map(proc => proc.procedureReference?.reference).join(\"<br>\") || \"N/A\";",
											"};",
											"",
											"// **HTML-Generierung**",
											"let htmlContent = `",
											"    <style>",
											"        table { width: 100%; border-collapse: collapse; }",
											"        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }",
											"        th { background-color: #f4f4f4; }",
											"    </style>",
											"    <h2>LKFRequest (Claim) Details</h2>",
											"    <table>",
											"        <thead>",
											"            <tr>",
											"                <th>ID</th>",
											"                <th>Use</th>",
											"                <th>Status</th>",
											"                <th>Patient</th>",
											"                <th>Erstellt</th>",
											"                <th>Versicherer</th>",
											"                <th>Leistungserbringer</th>",
											"                <th>Encounters</th>",
											"                <th>Leistungen</th>",
											"                <th>Abrechnung Gruppe</th>",
											"                <th>Abrechnung Knoten</th>",
											"                <th>Diagnosen inkl. Haupt-/od. Zusatzdiagnose</th>",
											"                <th>Coverage</th>",
											"                <th>LKF Punkte - Total</th>",
											"                <th>LKF Punkte - Leistungskomponente</th>",
											"                <th>LKF Punkte - Tageskomponente Kontaktpunkte</th>",
											"                <th>LKF Punkte - Zusatzpunkte Intensiv</th>",
											"                <th>LKF Punkte - Zusatzpunkte Mehrfachleistungen</th>",
											"                <th>LKF Punkte - Punkte Belagsdauerausreisser Unten Leistungskomponente</th>",
											"                <th>LKF Punkte - Punkte Belagsdauerausreisser Unten Tageskomponente</th>",
											"                <th>LKF Punkte - Zusatzpunkte Belagsdauerausreisser Nach Oben</th>",
											"                <th>LKF Punkte - Punkte Spezieller Bereiche Tageweise</th>",
											"                <th>Fondsrelevanz</th>",
											"                <th>Plausibilit√§tskennzeichen</th>",
											"            </tr>",
											"        </thead>",
											"        <tbody>`;",
											"",
											"// **LKFRequest Tabelle**",
											"claims.forEach(claim => {",
											"    htmlContent += `",
											"        <tr>",
											"            <td>${claim.id || \"N/A\"}</td>",
											"            <td>${claim.use || \"N/A\"}</td>",
											"            <td>${claim.status || \"N/A\"}</td>",
											"            <td>${claim.patient?.reference || \"N/A\"}</td>",
											"            <td>${claim.created || \"N/A\"}</td>",
											"            <td>${claim.insurer?.reference || \"N/A\"}</td>",
											"            <td>${claim.provider?.reference || \"N/A\"}</td>",
											"            <td>${getEncounters(claim)}</td>",
											"            <td>${getProcedures(claim)}</td>",
											"            <td>${getCodingValue(claim, [\"diagnosisRelatedGroup\"])}</td>",
											"            <td>${getExtensionValue(claim, \"https://elga.moped.at/StructureDefinition/moped-ext-diagnoseKnoten\")}</td>",
											"            <td>${getDiagnoses(claim)}</td>",
											"            <td>${claim.insurance?.[0]?.coverage?.reference || \"N/A\"}</td>",
											"            <td>${getLKFPoints(claim, \"PunkteTotal\")}</td>",
											"            <td>${getLKFPoints(claim, \"Leistungskomponente\")}</td>",
											"            <td>${getLKFPoints(claim, \"TageskomponenteKontaktpunkte\")}</td>",
											"            <td>${getLKFPoints(claim, \"ZusatzpunkteIntensiv\")}</td>",
											"            <td>${getLKFPoints(claim, \"ZusatzpunkteMehrfachleistungen\")}</td>",
											"            <td>${getLKFPoints(claim, \"PunkteBelagsdauerausreisserUntenLeistungskomponente\")}</td>",
											"            <td>${getLKFPoints(claim, \"PunkteBelagsdauerausreisserUntenTageskomponente\")}</td>",
											"            <td>${getLKFPoints(claim, \"ZusatzpunkteBelagsdauerausreisserNachOben\")}</td>",
											"            <td>${getLKFPoints(claim, \"PunkteSpeziellerBereicheTageweise\")}</td>",
											"            <td>${getExtensionValue(claim, \"https://elga.moped.at/StructureDefinition/moped-ext-fondsrelevanz\")}</td>",
											"            <td>${getExtensionValue(claim, \"https://elga.moped.at/StructureDefinition/Plausibilitaetskennzeichen\")}</td>",
											"        </tr>`;",
											"});",
											"",
											"htmlContent += `</tbody></table>`;",
											"pm.visualizer.set(htmlContent);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{server-base}}/Claim?status=active&use=claim&provider.identifier=urn:ietf:rfc:3986|{{gda-oid-value}}&insurer.identifier=http://svc.co.at/CodeSystem/ecard-svt-cs|{{sv-identifier-value}}&_has:ClaimResponse:request:status:not=active",
									"host": [
										"{{server-base}}"
									],
									"path": [
										"Claim"
									],
									"query": [
										{
											"key": "status",
											"value": "active"
										},
										{
											"key": "use",
											"value": "claim"
										},
										{
											"key": "provider.identifier",
											"value": "urn:ietf:rfc:3986|{{gda-oid-value}}"
										},
										{
											"key": "insurer.identifier",
											"value": "http://svc.co.at/CodeSystem/ecard-svt-cs|{{sv-identifier-value}}"
										},
										{
											"key": "_has:ClaimResponse:request:status:not",
											"value": "active",
											"description": "nur unbeantwortete Requests"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET LKFRequest (nur dieser Fall)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();",
											"",
											"// **Filterung der LKFRequest (Claim) Ressourcen**",
											"const claims = response.entry",
											"    ?.map(entry => entry.resource)",
											"    ?.filter(resource => ",
											"        resource.resourceType === \"Claim\" &&",
											"        Array.isArray(resource.meta?.profile) &&",
											"        resource.meta.profile.includes(\"https://elga.moped.at/StructureDefinition/MopedLKFRequest\")",
											"    ) || [];",
											"",
											"// **Helper-Funktion: Extraktion von Coding-Werten**",
											"const getCodingValue = (resource, path) => {",
											"    const field = path.reduce((obj, key) => obj?.[key], resource);",
											"    return field?.coding?.[0]?.code || \"N/A\";",
											"};",
											"",
											"// **Helper-Funktion: Extraktion von Extensions-Werten**",
											"const getExtensionValue = (resource, url) => {",
											"    const ext = resource.extension?.find(ext => ext.url === url);",
											"    return ext ? (ext.valueCoding?.code || ext.valueString || \"N/A\") : \"N/A\";",
											"};",
											"",
											"// **Helper-Funktion: Extraktion von LKF-Punkten (komplexe Extension)**",
											"const getLKFPoints = (resource, subfield) => {",
											"    const ext = resource.extension?.find(ext => ext.url === \"https://elga.moped.at/StructureDefinition/moped-ext-LKFPunkte\");",
											"    const subExt = ext?.extension?.find(e => e.url === subfield);",
											"    return subExt ? subExt.valueUnsignedInt || 0 : \"N/A\";",
											"};",
											"",
											"// **Helper-Funktion: Extraktion von Diagnosen mit Haupt-/Zusatzdiagnose**",
											"const getDiagnoses = (claim) => {",
											"    return claim.diagnosis?.map(diagnosis => {",
											"        const diagnosisType = claim.item?.find(item => ",
											"            item.diagnosisSequence?.includes(diagnosis.sequence)",
											"        )?.category?.coding?.[0]?.code || \"N/A\";",
											"",
											"        return `${diagnosis.diagnosisReference?.reference || \"N/A\"} (${diagnosisType})`;",
											"    }).join(\"<br>\") || \"N/A\"; // Join diagnoses in one row",
											"};",
											"",
											"// **Helper-Funktion: Extraktion aller Encounters**",
											"const getEncounters = (claim) => {",
											"    return claim.encounter?.map(enc => enc.reference).join(\"<br>\") || \"N/A\";",
											"};",
											"",
											"// **Helper-Funktion: Extraktion aller Leistungen**",
											"const getProcedures = (claim) => {",
											"    return claim.procedure?.map(proc => proc.procedureReference?.reference).join(\"<br>\") || \"N/A\";",
											"};",
											"",
											"// **HTML-Generierung**",
											"let htmlContent = `",
											"    <style>",
											"        table { width: 100%; border-collapse: collapse; }",
											"        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }",
											"        th { background-color: #f4f4f4; }",
											"    </style>",
											"    <h2>LKFRequest (Claim) Details</h2>",
											"    <table>",
											"        <thead>",
											"            <tr>",
											"                <th>ID</th>",
											"                <th>Use</th>",
											"                <th>Status</th>",
											"                <th>Patient</th>",
											"                <th>Erstellt</th>",
											"                <th>Versicherer</th>",
											"                <th>Leistungserbringer</th>",
											"                <th>Encounters</th>",
											"                <th>Leistungen</th>",
											"                <th>Abrechnung Gruppe</th>",
											"                <th>Abrechnung Knoten</th>",
											"                <th>Diagnosen inkl. Haupt-/od. Zusatzdiagnose</th>",
											"                <th>Coverage</th>",
											"                <th>LKF Punkte - Total</th>",
											"                <th>LKF Punkte - Leistungskomponente</th>",
											"                <th>LKF Punkte - Tageskomponente Kontaktpunkte</th>",
											"                <th>LKF Punkte - Zusatzpunkte Intensiv</th>",
											"                <th>LKF Punkte - Zusatzpunkte Mehrfachleistungen</th>",
											"                <th>LKF Punkte - Punkte Belagsdauerausreisser Unten Leistungskomponente</th>",
											"                <th>LKF Punkte - Punkte Belagsdauerausreisser Unten Tageskomponente</th>",
											"                <th>LKF Punkte - Zusatzpunkte Belagsdauerausreisser Nach Oben</th>",
											"                <th>LKF Punkte - Punkte Spezieller Bereiche Tageweise</th>",
											"                <th>Fondsrelevanz</th>",
											"                <th>Plausibilit√§tskennzeichen</th>",
											"            </tr>",
											"        </thead>",
											"        <tbody>`;",
											"",
											"// **LKFRequest Tabelle**",
											"claims.forEach(claim => {",
											"    htmlContent += `",
											"        <tr>",
											"            <td>${claim.id || \"N/A\"}</td>",
											"            <td>${claim.use || \"N/A\"}</td>",
											"            <td>${claim.status || \"N/A\"}</td>",
											"            <td>${claim.patient?.reference || \"N/A\"}</td>",
											"            <td>${claim.created || \"N/A\"}</td>",
											"            <td>${claim.insurer?.reference || \"N/A\"}</td>",
											"            <td>${claim.provider?.reference || \"N/A\"}</td>",
											"            <td>${getEncounters(claim)}</td>",
											"            <td>${getProcedures(claim)}</td>",
											"            <td>${getCodingValue(claim, [\"diagnosisRelatedGroup\"])}</td>",
											"            <td>${getExtensionValue(claim, \"https://elga.moped.at/StructureDefinition/moped-ext-diagnoseKnoten\")}</td>",
											"            <td>${getDiagnoses(claim)}</td>",
											"            <td>${claim.insurance?.[0]?.coverage?.reference || \"N/A\"}</td>",
											"            <td>${getLKFPoints(claim, \"PunkteTotal\")}</td>",
											"            <td>${getLKFPoints(claim, \"Leistungskomponente\")}</td>",
											"            <td>${getLKFPoints(claim, \"TageskomponenteKontaktpunkte\")}</td>",
											"            <td>${getLKFPoints(claim, \"ZusatzpunkteIntensiv\")}</td>",
											"            <td>${getLKFPoints(claim, \"ZusatzpunkteMehrfachleistungen\")}</td>",
											"            <td>${getLKFPoints(claim, \"PunkteBelagsdauerausreisserUntenLeistungskomponente\")}</td>",
											"            <td>${getLKFPoints(claim, \"PunkteBelagsdauerausreisserUntenTageskomponente\")}</td>",
											"            <td>${getLKFPoints(claim, \"ZusatzpunkteBelagsdauerausreisserNachOben\")}</td>",
											"            <td>${getLKFPoints(claim, \"PunkteSpeziellerBereicheTageweise\")}</td>",
											"            <td>${getExtensionValue(claim, \"https://elga.moped.at/StructureDefinition/moped-ext-fondsrelevanz\")}</td>",
											"            <td>${getExtensionValue(claim, \"https://elga.moped.at/StructureDefinition/Plausibilitaetskennzeichen\")}</td>",
											"        </tr>`;",
											"});",
											"",
											"htmlContent += `</tbody></table>`;",
											"pm.visualizer.set(htmlContent);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{server-base}}/Claim?status=active&use=claim&provider.identifier=urn:ietf:rfc:3986|{{gda-oid-value}}&insurer.identifier=http://svc.co.at/CodeSystem/ecard-svt-cs|{{sv-identifier-value}}&_has:ClaimResponse:request:status:not=active&claim-encounter.identifier={{gda-oid-value}}|{{aufnahmezahl}}",
									"host": [
										"{{server-base}}"
									],
									"path": [
										"Claim"
									],
									"query": [
										{
											"key": "status",
											"value": "active"
										},
										{
											"key": "use",
											"value": "claim"
										},
										{
											"key": "provider.identifier",
											"value": "urn:ietf:rfc:3986|{{gda-oid-value}}"
										},
										{
											"key": "insurer.identifier",
											"value": "http://svc.co.at/CodeSystem/ecard-svt-cs|{{sv-identifier-value}}"
										},
										{
											"key": "_has:ClaimResponse:request:status:not",
											"value": "active",
											"description": "nur unbeantwortete Requests"
										},
										{
											"key": "claim-encounter.identifier",
											"value": "{{gda-oid-value}}|{{aufnahmezahl}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET LKFResponse (alle F√§lle des KH)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();",
											"",
											"// **Filter LKFResponses**",
											"const lkfResponses = response.entry",
											"    ?.map(entry => entry.resource)",
											"    ?.filter(resource => ",
											"        resource.resourceType === \"ClaimResponse\" &&",
											"        Array.isArray(resource.meta?.profile) &&",
											"        resource.meta.profile.includes(\"https://elga.moped.at/StructureDefinition/MopedLKFResponse\")",
											"    ) || [];",
											"",
											"// **Helper function to extract Coding values**",
											"const getCodingValue = (resource, url) => {",
											"    const extension = resource.extension?.find(ext => ext.url === url);",
											"    return extension?.valueCoding?.code || \"N/A\";",
											"};",
											"",
											"// **Helper function to extract Decimal values from Extensions**",
											"const getExtensionDecimalValue = (resource, url) => {",
											"    const ext = resource.extension?.find(ext => ext.url === url);",
											"    return ext?.valueDecimal !== undefined ? ext.valueDecimal : \"N/A\";",
											"};",
											"",
											"// **Helper function to extract UnsignedInt values from LKFPunkte**",
											"const getLKFPunkteValue = (resource, subUrl) => {",
											"    const lkfPunkte = resource.extension?.find(ext => ext.url === \"https://elga.moped.at/StructureDefinition/moped-ext-LKFPunkte\");",
											"    const subExt = lkfPunkte?.extension?.find(subExt => subExt.url === subUrl);",
											"    return subExt?.valueUnsignedInt !== undefined ? subExt.valueUnsignedInt : \"N/A\";",
											"};",
											"",
											"// **Helper function to extract Money values**",
											"const getExtensionMoneyValue = (resource, url) => {",
											"    const ext = resource.extension?.find(ext => ext.url === url);",
											"    return ext?.valueMoney?.value !== undefined ? ext.valueMoney.value : \"N/A\";",
											"};",
											"",
											"// **Helper function to extract String values from Extensions**",
											"const getExtensionStringValue = (resource, url) => {",
											"    const ext = resource.extension?.find(ext => ext.url === url);",
											"    return ext?.valueString || \"N/A\";",
											"};",
											"",
											"// **Helper function to get first coding system entry**",
											"const getFirstCodingValue = (resource, path) => {",
											"    const field = path.reduce((obj, key) => obj?.[key], resource);",
											"    return field?.[0]?.code || \"N/A\";",
											"};",
											"// **Helper function to extract UnsignedInt values from Extensions**",
											"const getExtensionUnsignedIntValue = (resource, url) => {",
											"    const ext = resource.extension?.find(ext => ext.url === url);",
											"    return ext?.valueUnsignedInt !== undefined ? ext.valueUnsignedInt : \"N/A\";",
											"};",
											"",
											"",
											"// **Generate HTML Table**",
											"let htmlContent = `",
											"    <style>",
											"        table { width: 100%; border-collapse: collapse; }",
											"        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }",
											"        th { background-color: #f4f4f4; }",
											"    </style>",
											"    <h2>Moped LKFResponse Details</h2>",
											"    <table>",
											"        <thead>",
											"            <tr>",
											"                <th>ID</th>",
											"                <th>Use</th>",
											"                <th>Status</th>",
											"                <th>Patient</th>",
											"                <th>Erstellt</th>",
											"                <th>Versicherer</th>",
											"                <th>Leistungserbringer</th>",
											"                <th>Abrechnung Gruppe</th>",
											"                <th>Abrechnung Knoten</th>",
											"                <th>Coverage</th>",
											"                <th>LKF Punkte - Total</th>",
											"                <th>LKF Punkte - Leistungskomponente</th>",
											"                <th>LKF Punkte - Tageskomponente Kontaktpunkte</th>",
											"                <th>LKF Punkte - Zusatzpunkte Intensiv</th>",
											"                <th>LKF Punkte - Zusatzpunkte Mehrfachleistungen</th>",
											"                <th>LKF Punkte - Punkte Belagsdauerausreisser Unten Leistungskomponente</th>",
											"                <th>LKF Punkte - Punkte Belagsdauerausreisser Unten Tageskomponente</th>",
											"                <th>LKF Punkte - Zusatzpunkte Belagsdauerausreisser Nach Oben</th>",
											"                <th>LKF Punkte - Punkte Spezieller Bereiche Tageweise</th>",
											"                <th>LDF Punktewert Netto</th>",
											"                <th>Punkte LDF Pauschale</th>",
											"                <th>LDF Betrag Netto</th>",
											"                <th>Patientenanteil Angeh√∂rige</th>",
											"                <th>Patientenanteil</th>",
											"                <th>Beihilfenaquivalent</th>",
											"                <th>Forderungsbetrag Ausl√§nderverrechnung Regress</th>",
											"                <th>Rechnungsnummer KHLGF</th>",
											"                <th>Sonderleistungsnummer</th>",
											"                <th>Anzahl Sonderleistungen</th>",
											"                <th>Konstenmeldung ARK</th>",
											"            </tr>",
											"        </thead>",
											"        <tbody>`;",
											"",
											"// **Populate Table**",
											"lkfResponses.forEach(lkfResponse => {",
											"    htmlContent += `",
											"        <tr>",
											"            <td>${lkfResponse.id || \"N/A\"}</td>",
											"            <td>${lkfResponse.use || \"N/A\"}</td>",
											"            <td>${lkfResponse.status || \"N/A\"}</td>",
											"            <td>${lkfResponse.patient?.reference || \"N/A\"}</td>",
											"            <td>${lkfResponse.created || \"N/A\"}</td>",
											"            <td>${lkfResponse.insurer?.reference || \"N/A\"}</td>",
											"            <td>${lkfResponse.requestor?.reference || \"N/A\"}</td>",
											"            <td>${getFirstCodingValue(lkfResponse, [\"diagnosisRelatedGroup\", \"coding\"])}</td>",
											"            <td>${getCodingValue(lkfResponse, \"https://elga.moped.at/StructureDefinition/moped-ext-diagnoseKnoten\")}</td>",
											"            <td>${lkfResponse.insurance?.[0]?.coverage?.reference || \"N/A\"}</td>",
											"            <td>${getLKFPunkteValue(lkfResponse, \"PunkteTotal\")}</td>",
											"            <td>${getLKFPunkteValue(lkfResponse, \"Leistungskomponente\")}</td>",
											"            <td>${getLKFPunkteValue(lkfResponse, \"TageskomponenteKontaktpunkte\")}</td>",
											"            <td>${getLKFPunkteValue(lkfResponse, \"ZusatzpunkteIntensiv\")}</td>",
											"            <td>${getLKFPunkteValue(lkfResponse, \"ZusatzpunkteMehrfachleistungen\")}</td>",
											"            <td>${getLKFPunkteValue(lkfResponse, \"PunkteBelagsdauerausreisserUntenLeistungskomponente\")}</td>",
											"            <td>${getLKFPunkteValue(lkfResponse, \"PunkteBelagsdauerausreisserUntenTageskomponente\")}</td>",
											"            <td>${getLKFPunkteValue(lkfResponse, \"ZusatzpunkteBelagsdauerausreisserNachOben\")}</td>",
											"            <td>${getLKFPunkteValue(lkfResponse, \"PunkteSpeziellerBereicheTageweise\")}</td>",
											"            <td>${getExtensionDecimalValue(lkfResponse, \"https://elga.moped.at/StructureDefinition/moped-ext-LDFPunktewertNetto\")}</td>",
											"            <td>${getExtensionDecimalValue(lkfResponse, \"https://elga.moped.at/StructureDefinition/moped-ext-PunkteLDFPauschale\")}</td>",
											"            <td>${getExtensionDecimalValue(lkfResponse, \"https://elga.moped.at/StructureDefinition/moped-ext-LDFBetragNetto\")}</td>",
											"            <td>${getExtensionMoneyValue(lkfResponse, \"https://elga.moped.at/StructureDefinition/moped-ext-PatientenanteilAngehoerige\")}</td>",
											"            <td>${getExtensionMoneyValue(lkfResponse, \"https://elga.moped.at/StructureDefinition/moped-ext-Patientenanteil\")}</td>",
											"            <td>${getExtensionUnsignedIntValue(lkfResponse, \"https://elga.moped.at/StructureDefinition/moped-ext-Beihilfenaequivalent\")}</td>",
											"",
											"            <td>${getExtensionMoneyValue(lkfResponse, \"https://elga.moped.at/StructureDefinition/moped-ext-ForderungsbetragAuslaenderverrechnungRegress\")}</td>",
											"            <td>${getExtensionStringValue(lkfResponse, \"https://elga.moped.at/StructureDefinition/moped-ext-RechnungsnummerKHLGF\")}</td>",
											"            <td>${getExtensionStringValue(lkfResponse, \"https://elga.moped.at/StructureDefinition/moped-ext-Sonderleistungsnummer\")}</td>",
											"            <td>${getExtensionDecimalValue(lkfResponse, \"https://elga.moped.at/StructureDefinition/moped-ext-AnzahlSonderleistungen\")}</td>",
											"            <td>${getCodingValue(lkfResponse, \"https://elga.moped.at/StructureDefinition/moped-ext-KonstenmeldungARK\")}</td>",
											"        </tr>`;",
											"});",
											"",
											"htmlContent += `</tbody></table>`;",
											"pm.visualizer.set(htmlContent);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{server-base}}/ClaimResponse?status=active&use=claim&requestor.identifier=urn:ietf:rfc:3986|{{gda-oid-value}}&insurer.identifier=http://svc.co.at/CodeSystem/ecard-svt-cs|{{sv-identifier-value}}",
									"host": [
										"{{server-base}}"
									],
									"path": [
										"ClaimResponse"
									],
									"query": [
										{
											"key": "status",
											"value": "active"
										},
										{
											"key": "use",
											"value": "claim"
										},
										{
											"key": "requestor.identifier",
											"value": "urn:ietf:rfc:3986|{{gda-oid-value}}"
										},
										{
											"key": "insurer.identifier",
											"value": "http://svc.co.at/CodeSystem/ecard-svt-cs|{{sv-identifier-value}}"
										},
										{
											"key": "",
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET LKFResponse (nur dieser Fall)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();",
											"",
											"// **Filter LKFResponses**",
											"const lkfResponses = response.entry",
											"    ?.map(entry => entry.resource)",
											"    ?.filter(resource => ",
											"        resource.resourceType === \"ClaimResponse\" &&",
											"        Array.isArray(resource.meta?.profile) &&",
											"        resource.meta.profile.includes(\"https://elga.moped.at/StructureDefinition/MopedLKFResponse\")",
											"    ) || [];",
											"",
											"// **Helper function to extract Coding values**",
											"const getCodingValue = (resource, url) => {",
											"    const extension = resource.extension?.find(ext => ext.url === url);",
											"    return extension?.valueCoding?.code || \"N/A\";",
											"};",
											"",
											"// **Helper function to extract Decimal values from Extensions**",
											"const getExtensionDecimalValue = (resource, url) => {",
											"    const ext = resource.extension?.find(ext => ext.url === url);",
											"    return ext?.valueDecimal !== undefined ? ext.valueDecimal : \"N/A\";",
											"};",
											"",
											"// **Helper function to extract UnsignedInt values from LKFPunkte**",
											"const getLKFPunkteValue = (resource, subUrl) => {",
											"    const lkfPunkte = resource.extension?.find(ext => ext.url === \"https://elga.moped.at/StructureDefinition/moped-ext-LKFPunkte\");",
											"    const subExt = lkfPunkte?.extension?.find(subExt => subExt.url === subUrl);",
											"    return subExt?.valueUnsignedInt !== undefined ? subExt.valueUnsignedInt : \"N/A\";",
											"};",
											"",
											"// **Helper function to extract Money values**",
											"const getExtensionMoneyValue = (resource, url) => {",
											"    const ext = resource.extension?.find(ext => ext.url === url);",
											"    return ext?.valueMoney?.value !== undefined ? ext.valueMoney.value : \"N/A\";",
											"};",
											"",
											"// **Helper function to extract String values from Extensions**",
											"const getExtensionStringValue = (resource, url) => {",
											"    const ext = resource.extension?.find(ext => ext.url === url);",
											"    return ext?.valueString || \"N/A\";",
											"};",
											"",
											"// **Helper function to get first coding system entry**",
											"const getFirstCodingValue = (resource, path) => {",
											"    const field = path.reduce((obj, key) => obj?.[key], resource);",
											"    return field?.[0]?.code || \"N/A\";",
											"};",
											"// **Helper function to extract UnsignedInt values from Extensions**",
											"const getExtensionUnsignedIntValue = (resource, url) => {",
											"    const ext = resource.extension?.find(ext => ext.url === url);",
											"    return ext?.valueUnsignedInt !== undefined ? ext.valueUnsignedInt : \"N/A\";",
											"};",
											"",
											"",
											"// **Generate HTML Table**",
											"let htmlContent = `",
											"    <style>",
											"        table { width: 100%; border-collapse: collapse; }",
											"        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }",
											"        th { background-color: #f4f4f4; }",
											"    </style>",
											"    <h2>Moped LKFResponse Details</h2>",
											"    <table>",
											"        <thead>",
											"            <tr>",
											"                <th>ID</th>",
											"                <th>Use</th>",
											"                <th>Status</th>",
											"                <th>Patient</th>",
											"                <th>Erstellt</th>",
											"                <th>Versicherer</th>",
											"                <th>Leistungserbringer</th>",
											"                <th>Abrechnung Gruppe</th>",
											"                <th>Abrechnung Knoten</th>",
											"                <th>Coverage</th>",
											"                <th>LKF Punkte - Total</th>",
											"                <th>LKF Punkte - Leistungskomponente</th>",
											"                <th>LKF Punkte - Tageskomponente Kontaktpunkte</th>",
											"                <th>LKF Punkte - Zusatzpunkte Intensiv</th>",
											"                <th>LKF Punkte - Zusatzpunkte Mehrfachleistungen</th>",
											"                <th>LKF Punkte - Punkte Belagsdauerausreisser Unten Leistungskomponente</th>",
											"                <th>LKF Punkte - Punkte Belagsdauerausreisser Unten Tageskomponente</th>",
											"                <th>LKF Punkte - Zusatzpunkte Belagsdauerausreisser Nach Oben</th>",
											"                <th>LKF Punkte - Punkte Spezieller Bereiche Tageweise</th>",
											"                <th>LDF Punktewert Netto</th>",
											"                <th>Punkte LDF Pauschale</th>",
											"                <th>LDF Betrag Netto</th>",
											"                <th>Patientenanteil Angeh√∂rige</th>",
											"                <th>Patientenanteil</th>",
											"                <th>Beihilfenaquivalent</th>",
											"                <th>Forderungsbetrag Ausl√§nderverrechnung Regress</th>",
											"                <th>Rechnungsnummer KHLGF</th>",
											"                <th>Sonderleistungsnummer</th>",
											"                <th>Anzahl Sonderleistungen</th>",
											"                <th>Konstenmeldung ARK</th>",
											"            </tr>",
											"        </thead>",
											"        <tbody>`;",
											"",
											"// **Populate Table**",
											"lkfResponses.forEach(lkfResponse => {",
											"    htmlContent += `",
											"        <tr>",
											"            <td>${lkfResponse.id || \"N/A\"}</td>",
											"            <td>${lkfResponse.use || \"N/A\"}</td>",
											"            <td>${lkfResponse.status || \"N/A\"}</td>",
											"            <td>${lkfResponse.patient?.reference || \"N/A\"}</td>",
											"            <td>${lkfResponse.created || \"N/A\"}</td>",
											"            <td>${lkfResponse.insurer?.reference || \"N/A\"}</td>",
											"            <td>${lkfResponse.requestor?.reference || \"N/A\"}</td>",
											"            <td>${getFirstCodingValue(lkfResponse, [\"diagnosisRelatedGroup\", \"coding\"])}</td>",
											"            <td>${getCodingValue(lkfResponse, \"https://elga.moped.at/StructureDefinition/moped-ext-diagnoseKnoten\")}</td>",
											"            <td>${lkfResponse.insurance?.[0]?.coverage?.reference || \"N/A\"}</td>",
											"            <td>${getLKFPunkteValue(lkfResponse, \"PunkteTotal\")}</td>",
											"            <td>${getLKFPunkteValue(lkfResponse, \"Leistungskomponente\")}</td>",
											"            <td>${getLKFPunkteValue(lkfResponse, \"TageskomponenteKontaktpunkte\")}</td>",
											"            <td>${getLKFPunkteValue(lkfResponse, \"ZusatzpunkteIntensiv\")}</td>",
											"            <td>${getLKFPunkteValue(lkfResponse, \"ZusatzpunkteMehrfachleistungen\")}</td>",
											"            <td>${getLKFPunkteValue(lkfResponse, \"PunkteBelagsdauerausreisserUntenLeistungskomponente\")}</td>",
											"            <td>${getLKFPunkteValue(lkfResponse, \"PunkteBelagsdauerausreisserUntenTageskomponente\")}</td>",
											"            <td>${getLKFPunkteValue(lkfResponse, \"ZusatzpunkteBelagsdauerausreisserNachOben\")}</td>",
											"            <td>${getLKFPunkteValue(lkfResponse, \"PunkteSpeziellerBereicheTageweise\")}</td>",
											"            <td>${getExtensionDecimalValue(lkfResponse, \"https://elga.moped.at/StructureDefinition/moped-ext-LDFPunktewertNetto\")}</td>",
											"            <td>${getExtensionDecimalValue(lkfResponse, \"https://elga.moped.at/StructureDefinition/moped-ext-PunkteLDFPauschale\")}</td>",
											"            <td>${getExtensionDecimalValue(lkfResponse, \"https://elga.moped.at/StructureDefinition/moped-ext-LDFBetragNetto\")}</td>",
											"            <td>${getExtensionMoneyValue(lkfResponse, \"https://elga.moped.at/StructureDefinition/moped-ext-PatientenanteilAngehoerige\")}</td>",
											"            <td>${getExtensionMoneyValue(lkfResponse, \"https://elga.moped.at/StructureDefinition/moped-ext-Patientenanteil\")}</td>",
											"            <td>${getExtensionUnsignedIntValue(lkfResponse, \"https://elga.moped.at/StructureDefinition/moped-ext-Beihilfenaequivalent\")}</td>",
											"",
											"            <td>${getExtensionMoneyValue(lkfResponse, \"https://elga.moped.at/StructureDefinition/moped-ext-ForderungsbetragAuslaenderverrechnungRegress\")}</td>",
											"            <td>${getExtensionStringValue(lkfResponse, \"https://elga.moped.at/StructureDefinition/moped-ext-RechnungsnummerKHLGF\")}</td>",
											"            <td>${getExtensionStringValue(lkfResponse, \"https://elga.moped.at/StructureDefinition/moped-ext-Sonderleistungsnummer\")}</td>",
											"            <td>${getExtensionDecimalValue(lkfResponse, \"https://elga.moped.at/StructureDefinition/moped-ext-AnzahlSonderleistungen\")}</td>",
											"            <td>${getCodingValue(lkfResponse, \"https://elga.moped.at/StructureDefinition/moped-ext-KonstenmeldungARK\")}</td>",
											"        </tr>`;",
											"});",
											"",
											"htmlContent += `</tbody></table>`;",
											"pm.visualizer.set(htmlContent);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{server-base}}/ClaimResponse?status=active&use=claim&requestor.identifier=urn:ietf:rfc:3986|{{gda-oid-value}}&insurer.identifier=http://svc.co.at/CodeSystem/ecard-svt-cs|{{sv-identifier-value}}&request.claim-encounter.identifier={{gda-oid-value}}|{{aufnahmezahl}}",
									"host": [
										"{{server-base}}"
									],
									"path": [
										"ClaimResponse"
									],
									"query": [
										{
											"key": "status",
											"value": "active"
										},
										{
											"key": "use",
											"value": "claim"
										},
										{
											"key": "requestor.identifier",
											"value": "urn:ietf:rfc:3986|{{gda-oid-value}}"
										},
										{
											"key": "insurer.identifier",
											"value": "http://svc.co.at/CodeSystem/ecard-svt-cs|{{sv-identifier-value}}"
										},
										{
											"key": "request.claim-encounter.identifier",
											"value": "{{gda-oid-value}}|{{aufnahmezahl}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "2 Patientenaufnahme",
					"item": [
						{
							"name": "$aufnehmen",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"resourceType\": \"Parameters\",\n    \"parameter\": [\n        {\n            \"name\": \"freigeben\",\n            \"valueBoolean\": TBD_true\n        },\n        {\n            \"name\": \"physischeAnwesenheit\",\n            \"valueCode\": \"TBD_ANW\"\n        },\n        {\n            \"name\": \"funktionscode\",\n            \"valueString\": \"TBD_131180\"\n        },\n        {\n            \"name\": \"funktionssubcode\",\n            \"valueString\": \"TBD_00\"\n        },\n        {\n            \"name\": \"falldaten\",\n            \"resource\": {\n                \"resourceType\": \"Bundle\",\n                \"meta\": {\n                    \"profile\": [\n                        \"https://elga.moped.at/StructureDefinition/MopedAufnahmeBundle\"\n                    ]\n                },\n                \"type\": \"transaction\",\n                \"entry\": [\n                    {\n                        \"resource\": {\n                            \"resourceType\": \"Encounter\",\n                            \"meta\": {\n                                \"profile\": [\n                                    \"https://elga.moped.at/StructureDefinition/MopedEncounter\"\n                                ]\n                            },\n                            \"identifier\": [\n                                {\n                                    \"type\": {\n                                        \"coding\": [\n                                            {\n                                                \"system\": \"http://terminology.hl7.org/CodeSystem/v2-0203\",\n                                                \"code\": \"VN\"\n                                            }\n                                        ]\n                                    },\n                                    \"system\": \"{{gda-oid-value}}\",\n                                    \"value\": \"{{aufnahmezahl}}\",\n                                    \"assigner\": {\n                                        \"reference\": \"Organization?identifier=urn:ietf:rfc:3986|{{gda-oid-value}}\"\n                                    }\n                                }\n                            ],\n                            \"status\": \"in-progress\",\n                            \"class\": [\n                                {\n                                    \"coding\": [\n                                        {\n                                            \"system\": \"https://elga.moped.at/CodeSystem/BehandlungsartCS\",\n                                            \"code\": \"TBD_S\"\n                                        }\n                                    ]\n                                },\n                                {\n                                    \"coding\": [\n                                        {\n                                            \"system\": \"https://elga.moped.at/CodeSystem/Aufnahmeart2CS\",\n                                            \"code\": \"TBD_P\"\n                                        }\n                                    ]\n                                }\n                            ],\n                            \"type\": [\n                                {\n                                    \"coding\": [\n                                        {\n                                            \"system\": \"https://elga.moped.at/CodeSystem/MopedEncounterTypesCS\",\n                                            \"code\": \"ENC\"\n                                        }\n                                    ]\n                                }\n                            ],\n                            \"subject\": {\n                                \"reference\": \"Patient?identifier=urn:oid:1.2.40.0.10.1.4.3.1|{{svnr}}\"\n                            },\n                            \"serviceProvider\": {\n                                \"reference\": \"Organization?identifier=urn:ietf:rfc:3986|{{gda-oid-value}}\"\n                            },\n                            \"actualPeriod\": {\n                                \"start\": \"TBD_2024-02-22T19:33:00+02:00\"\n                            },\n                            \"reason\": [\n                                {\n                                    \"use\": [\n                                        {\n                                            \"coding\": [\n                                                {\n                                                    \"system\": \"http://hl7.org/fhir/encounter-reason-use\",\n                                                    \"code\": \"RV\"\n                                                }\n                                            ]\n                                        }\n                                    ],\n                                    \"value\": [\n                                        {\n                                            \"concept\": {\n                                                \"coding\": [\n                                                    {\n                                                        \"system\": \"https://elga.moped.at/CodeSystem/UrsacheCS\",\n                                                        \"code\": \"TBD_00\"\n                                                    }\n                                                ]\n                                            }\n                                        }\n                                    ]\n                                }\n                            ],\n                            \"diagnosis\": [\n                                {\n                                    \"condition\": [\n                                        {\n                                            \"concept\": {\n                                                \"coding\": [\n                                                    {\n                                                        \"system\": \"https://termgit.elga.gv.at/CodeSystem/icd-10-bmsgpk-2025\",\n                                                        \"code\": \"TBD_G47.3\",\n                                                        \"display\": \"TBD_Sleep Apnea\"\n                                                    }\n                                                ]\n                                            }\n                                        }\n                                    ]\n                                }\n                            ],\n                            \"admission\": {\n                                \"extension\": [\n                                    {\n                                        \"url\": \"https://elga.moped.at/StructureDefinition/moped-ext-aufnahmeart\",\n                                        \"valueCoding\": {\n                                            \"system\": \"https://elga.moped.at/CodeSystem/AufnahmeartCS\",\n                                            \"code\": \"TBD_A\"\n                                        }\n                                    }\n                                ],\n                                \"origin\": {\n                                    \"reference\": \"Organization?identifier=urn:ietf:rfc:3986|TBD_urn:oid:1.3.6.1.4.1.36122.tbd.234\"\n                                }\n                            }\n                        },\n                        \"request\": {\n                            \"method\": \"PUT\",\n                            \"url\": \"Encounter?identifier={{gda-oid-value}}|{{aufnahmezahl}}\"\n                        }\n                    },\n                    {\n                        \"resource\": {\n                            \"resourceType\": \"Patient\",\n                            \"meta\": {\n                                \"profile\": [\n                                    \"http://hl7.at/fhir/HL7ATCoreProfiles/5.0.0/StructureDefinition/at-core-patient\"\n                                ]\n                            },\n                            \"extension\": [\n                                {\n                                    \"extension\": [\n                                        {\n                                            \"url\": \"code\",\n                                            \"valueCodeableConcept\": {\n                                                \"coding\": [\n                                                    {\n                                                        \"system\": \"https://termgit.elga.gv.at/CodeSystem/iso-3166-1-alpha-3\",\n                                                        \"code\": \"AUT\",\n                                                        \"display\": \"√ñsterreich\"\n                                                    }\n                                                ]\n                                            }\n                                        }\n                                    ],\n                                    \"url\": \"http://hl7.org/fhir/StructureDefinition/patient-citizenship\"\n                                }\n                            ],\n                            \"identifier\": [\n                                {\n                                    \"type\": {\n                                        \"coding\": [\n                                            {\n                                                \"system\": \"http://terminology.hl7.org/CodeSystem/v2-0203\",\n                                                \"code\": \"SS\",\n                                                \"display\": \"Social Security Number\"\n                                            }\n                                        ]\n                                    },\n                                    \"system\": \"urn:oid:1.2.40.0.10.1.4.3.1\",\n                                    \"value\": \"{{svnr}}\",\n                                    \"assigner\": {\n                                        \"display\": \"Dachverband der √∂sterreichischen Sozialversicherungstr√§ger\"\n                                    }\n                                }\n                            ],\n                            \"name\": [\n                                {\n                                    \"use\": \"official\",\n                                    \"family\": \"TBD_Sonnenschein\",\n                                    \"given\": [\n                                        \"TBD_Susi\"\n                                    ]\n                                }\n                            ],\n                            \"gender\": \"TBD_female\",\n                            \"birthDate\": \"TBD_1969-04-21\",\n                            \"address\": [\n                                {\n                                    \"extension\": [\n                                        {\n                                            \"url\": \"http://hl7.at/fhir/HL7ATCoreProfiles/5.0.0/StructureDefinition/at-core-ext-address-municipalityCode\",\n                                            \"valueString\": \"TBD_90301\"\n                                        }\n                                    ],\n                                    \"use\": \"home\",\n                                    \"line\": [\n                                        \"TBD_Baumgasse 20a\"\n                                    ],\n                                    \"_line\": [\n                                        {\n                                            \"extension\": [\n                                                {\n                                                    \"url\": \"http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-streetName\",\n                                                    \"valueString\": \"TBD_Baumgasse\"\n                                                },\n                                                {\n                                                    \"url\": \"http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-houseNumber\",\n                                                    \"valueString\": \"TBD_20a\"\n                                                }\n                                            ]\n                                        }\n                                    ],\n                                    \"city\": \"TBD_Wien\",\n                                    \"state\": \"TBD_Wien\",\n                                    \"postalCode\": \"TBD_1030\",\n                                    \"country\": \"TBD_AUT\"\n                                }\n                            ]\n                        },\n                        \"request\": {\n                            \"method\": \"PUT\",\n                            \"url\": \"Patient?identifier=urn:oid:1.2.40.0.10.1.4.3.1|{{svnr}}\"\n                        }\n                    },\n                    {\n                        \"resource\": {\n                            \"resourceType\": \"Coverage\",\n                            \"meta\": {\n                                \"profile\": [\n                                    \"https://elga.moped.at/StructureDefinition/MopedCoverage\"\n                                ]\n                            },\n                            \"identifier\": [\n                                {\n                                    \"system\": \"urn:oid:1.2.40.0.10.1.4.3.9.1\",\n                                    \"value\": \"{{vdasID}}\",\n                                    \"assigner\": {\n                                        \"reference\": \"Organization?identifier=urn:ietf:rfc:3986|{{gda-oid-value}}\"\n                                    }\n                                }\n                            ],\n                            \"status\": \"active\",\n                            \"kind\": \"insurance\",\n                            \"subscriber\": {\n                                \"reference\": \"Patient?identifier=urn:oid:1.2.40.0.10.1.4.3.1|{{svnr}}\"\n                            },\n                            \"beneficiary\": {\n                                \"reference\": \"Patient?identifier=urn:oid:1.2.40.0.10.1.4.3.1|{{svnr}}\"\n                            },\n                            \"insurer\": {\n                                \"reference\": \"Organization?identifier=http://svc.co.at/CodeSystem/ecard-svt-cs|{{sv-identifier-value}}\"\n                            },\n                            \"class\": [\n                                {\n                                    \"type\": {\n                                        \"coding\": [\n                                            {\n                                                \"system\": \"http://terminology.hl7.org/CodeSystem/coverage-class\",\n                                                \"code\": \"group\"\n                                            }\n                                        ]\n                                    },\n                                    \"value\": {\n                                        \"system\": \"http://svc.co.at/CodeSystem/ecard-versichertenkategorie-cs\",\n                                        \"value\": \"TBD_01\"\n                                    }\n                                }\n                            ]\n                        },\n                        \"request\": {\n                            \"method\": \"PUT\",\n                            \"url\": \"Coverage?identifier={{vdasID}}\"\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server-base}}/Encounter/$aufnehmen",
									"host": [
										"{{server-base}}"
									],
									"path": [
										"Encounter",
										"$aufnehmen"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET Patient",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();",
											"const patients = response.entry",
											"    ?.map(entry => entry.resource)",
											"    ?.filter(resource => resource.resourceType === \"Patient\") || []; // Ensures only Patient resources are displayed",
											"",
											"// Helper function to extract identifier values",
											"const getIdentifierValue = (resource, system) => {",
											"    return resource.identifier?.find(id => id.system === system)?.value || \"N/A\";",
											"};",
											"",
											"// Helper function to extract extension values",
											"const getExtensionValue = (resource, url) => {",
											"    const ext = resource.extension?.find(ext => ext.url === url);",
											"    return ext ? (ext.valueCodeableConcept?.coding?.[0]?.display || ext.valueString || \"N/A\") : \"N/A\";",
											"};",
											"",
											"// Helper function to get the address",
											"const getAddress = (resource) => {",
											"    const address = resource.address?.[0]; // Assuming primary address",
											"    if (!address) return \"N/A\";",
											"",
											"    const street = address.line?.[0] || \"N/A\";",
											"    const postalCode = address.postalCode || \"N/A\";",
											"    const city = address.city || \"N/A\";",
											"    const state = address.state || \"N/A\";",
											"    const country = address.country || \"N/A\";",
											"    const municipalityCode = getExtensionValue(address, \"http://hl7.at/fhir/HL7ATCoreProfiles/5.0.0/StructureDefinition/at-core-ext-address-municipalityCode\");",
											"",
											"    return `${street}, ${postalCode} ${city}, ${state}, ${country} (Gemeindecode: ${municipalityCode})`;",
											"};",
											"",
											"let htmlContent = `",
											"    <style>",
											"        table { width: 100%; border-collapse: collapse; }",
											"        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }",
											"        th { background-color: #f4f4f4; }",
											"    </style>",
											"    <h2>Patientendetails</h2>",
											"    <table>",
											"        <thead>",
											"            <tr>",
											"                <th>ID</th>",
											"                <th>Sozialversicherungsnummer</th>",
											"                <th>Name</th>",
											"                <th>Geschlecht</th>",
											"                <th>Geburtsdatum</th>",
											"                ",
											"                <th>Adresse</th>",
											"            </tr>",
											"        </thead>",
											"        <tbody>`;",
											"",
											"patients.forEach(patient => {",
											"    const name = patient.name?.[0];",
											"    const fullName = name ? `${name.given?.join(\" \")} ${name.family}` : \"N/A\";",
											"",
											"    htmlContent += `",
											"        <tr>",
											"            <td>${patient.id || \"N/A\"}</td>",
											"            <td>${getIdentifierValue(patient, \"urn:oid:1.2.40.0.10.1.4.3.1\")}</td>",
											"            <td>${fullName}</td>",
											"            <td>${patient.gender || \"N/A\"}</td>",
											"            <td>${patient.birthDate || \"N/A\"}</td>",
											"            ",
											"            <td>${getAddress(patient)}</td>",
											"        </tr>`;",
											"});",
											"",
											"htmlContent += `</tbody></table>`;",
											"pm.visualizer.set(htmlContent);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{server-base}}/Patient?identifier=urn:oid:1.2.40.0.10.1.4.3.1|{{svnr}}",
									"host": [
										"{{server-base}}"
									],
									"path": [
										"Patient"
									],
									"query": [
										{
											"key": "identifier",
											"value": "urn:oid:1.2.40.0.10.1.4.3.1|{{svnr}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET Account (nur dieser Fall)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();",
											"const accounts = response.entry",
											"    ?.map(entry => entry.resource)",
											"    ?.filter(resource => resource.resourceType === \"Account\") || []; // Ensures only Account resources are displayed",
											"",
											"// Helper function to extract extension values",
											"const getExtensionValue = (resource, url) => {",
											"    const ext = resource.extension?.find(ext => ext.url === url);",
											"    return ext ? (ext.valueUnsignedInt ?? ext.valueCoding?.code ?? \"N/A\") : \"N/A\";",
											"};",
											"",
											"// Extract patient reference correctly (handling array case)",
											"const getPatientReference = (resource) => {",
											"    if (Array.isArray(resource.subject)) {",
											"        return resource.subject[0]?.reference || \"N/A\";",
											"    }",
											"    return resource.subject?.reference || \"N/A\";",
											"};",
											"",
											"let htmlContent = `",
											"    <style>",
											"        table { width: 100%; border-collapse: collapse; }",
											"        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }",
											"        th { background-color: #f4f4f4; }",
											"    </style>",
											"    <h2>Account-Details</h2>",
											"    <table>",
											"        <thead>",
											"            <tr>",
											"                <th>ID</th>",
											"                <th>Status</th>",
											"                <th>Patient</th>",
											"                <th>Eigent√ºmer</th>",
											"                <th>Versicherung</th>",
											"                <th>Anzahl Verlegungen</th>",
											"                <th>Anzahl Beurlaubungen</th>",
											"                <th>Workflow-Status</th>",
											"            </tr>",
											"        </thead>",
											"        <tbody>`;",
											"",
											"accounts.forEach(account => {",
											"    htmlContent += `",
											"        <tr>",
											"            <td>${account.id || \"N/A\"}</td>",
											"            <td>${account.status || \"N/A\"}</td>",
											"            <td>${getPatientReference(account)}</td>",
											"            <td>${account.owner?.reference || \"N/A\"}</td>",
											"            <td>${account.coverage?.[0]?.coverage?.reference || \"N/A\"}</td>",
											"            <td>${getExtensionValue(account, \"https://elga.moped.at/StructureDefinition/moped-ext-AnzahlVerlegungen\")}</td>",
											"            <td>${getExtensionValue(account, \"https://elga.moped.at/StructureDefinition/moped-ext-AnzahlBeurlaubungen\")}</td>",
											"            <td>${getExtensionValue(account, \"https://elga.moped.at/StructureDefinition/moped-ext-workflow-status\")}</td>",
											"        </tr>`;",
											"});",
											"",
											"htmlContent += `</tbody></table>`;",
											"pm.visualizer.set(htmlContent);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{server-base}}/Encounter?identifier={{gda-oid-value}}|{{aufnahmezahl}}&_include=Encounter:account",
									"host": [
										"{{server-base}}"
									],
									"path": [
										"Encounter"
									],
									"query": [
										{
											"key": "identifier",
											"value": "{{gda-oid-value}}|{{aufnahmezahl}}"
										},
										{
											"key": "_include",
											"value": "Encounter:account"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET Encounter (nur dieser Fall)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();",
											"",
											"// **Filterung der Encounters (nur MopedEncounter)**",
											"const encounters = response.entry",
											"    ?.map(entry => entry.resource)",
											"    ?.filter(resource => ",
											"        resource.resourceType === \"Encounter\" &&",
											"        resource.meta?.profile?.includes(\"https://elga.moped.at/StructureDefinition/MopedEncounter\")",
											"    ) || []; ",
											"",
											"// Helper-Funktion zur Extraktion von Identifier-Werten",
											"const getIdentifierValue = (resource, code) => {",
											"    return resource.identifier?.find(id => ",
											"        id.type?.coding?.some(coding => coding.code === code)",
											"    )?.value || \"N/A\";",
											"};",
											"",
											"// Helper-Funktion zur Extraktion von Coding-Werten",
											"const getCodingValue = (resource, path) => {",
											"    const field = path.reduce((obj, key) => obj?.[key], resource);",
											"    return field?.coding?.[0]?.code || \"N/A\";",
											"};",
											"",
											"// Helper-Funktion zur Extraktion von Reason-Werten",
											"const getReason = (resource) => {",
											"    return resource.reason?.[0]?.value?.[0]?.concept?.coding?.[0]?.code || \"N/A\";",
											"};",
											"",
											"// Helper-Funktion zur Extraktion von Diagnose-Werten",
											"const getDiagnosis = (resource) => {",
											"    return resource.diagnosis?.[0]?.condition?.[0]?.concept?.coding?.[0]?.display || \"N/A\";",
											"};",
											"",
											"// Helper-Funktion zur Extraktion von Extensions-Werten",
											"const getExtensionValue = (resource, url) => {",
											"    const ext = resource.admission?.extension?.find(ext => ext.url === url) ||",
											"                resource.extension?.find(ext => ext.url === url);",
											"    return ext ? (ext.valueCoding?.code || ext.valueDate || ext.valueCode || \"N/A\") : \"N/A\";",
											"};",
											"",
											"let htmlContent = `",
											"    <style>",
											"        table { width: 100%; border-collapse: collapse; }",
											"        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }",
											"        th { background-color: #f4f4f4; }",
											"    </style>",
											"    <h2>Encounter-Details</h2>",
											"    <table>",
											"        <thead>",
											"            <tr>",
											"                <th>ID</th>",
											"                <th>Aufnahmezahl</th>",
											"                <th>Datensatz-ID</th>",
											"                <th>Status</th>",
											"                <th>Behandlungsart</th>",
											"                <th>Aufnahmeart</th>",
											"                <th>Patient</th>",
											"                <th>Leistungserbringer</th>",
											"                <th>Aufnahmezeitpunkt</th>",
											"                <th>Entlassungszeitpunkt</th>",
											"                ",
											"                <th>Ursache</th>",
											"                <th>Diagnose</th>",
											"                <th>Aufnahmeart2</th>",
											"                <th>Entlassungsart</th>",
											"                <th>Account</th>",
											"                <th>Transportart</th>",
											"                <th>Unfalldatum</th>",
											"            </tr>",
											"        </thead>",
											"        <tbody>`;",
											"",
											"// **Encounter Tabelle**",
											"encounters.forEach(encounter => {",
											"    htmlContent += `",
											"        <tr>",
											"            <td>${encounter.id || \"N/A\"}</td>",
											"            <td>${getIdentifierValue(encounter, \"VN\")}</td>",
											"            <td>${getIdentifierValue(encounter, \"ANON\")}</td>",
											"            <td>${encounter.status || \"N/A\"}</td>",
											"            <td>${getCodingValue(encounter, [\"class\", 0])}</td>",
											"            <td>${getCodingValue(encounter, [\"class\", 1])}</td>",
											"            <td>${encounter.subject?.reference || \"N/A\"}</td>",
											"            <td>${encounter.serviceProvider?.reference || \"N/A\"}</td>",
											"            <td>${encounter.actualPeriod?.start || \"N/A\"}</td>",
											"            <td>${encounter.actualPeriod?.end || \"N/A\"}</td>",
											"           ",
											"            <td>${getReason(encounter)}</td>",
											"            <td>${getDiagnosis(encounter)}</td>",
											"            <td>${getExtensionValue(encounter, \"https://elga.moped.at/StructureDefinition/moped-ext-aufnahmeart\")}</td>",
											"<td>${encounter.admission?.dischargeDisposition?.coding?.[0]?.code || \"N/A\"}</td>",
											"            <td>${encounter.account?.[0]?.reference || \"N/A\"}</td>",
											"            <td>${getExtensionValue(encounter, \"https://elga.moped.at/StructureDefinition/moped-ext-transportart\")}</td>",
											"            <td>${getExtensionValue(encounter, \"https://elga.moped.at/StructureDefinition/moped-ext-unfalldatum\")}</td>",
											"        </tr>`;",
											"});",
											"",
											"htmlContent += `</tbody></table>`;",
											"pm.visualizer.set(htmlContent);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{server-base}}/Encounter?identifier={{gda-oid-value}}|{{aufnahmezahl}}",
									"host": [
										"{{server-base}}"
									],
									"path": [
										"Encounter"
									],
									"query": [
										{
											"key": "identifier",
											"value": "{{gda-oid-value}}|{{aufnahmezahl}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "3 Versicherungsanspruch-Kl√§rung",
					"item": [
						{
							"name": "$anfragen",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"resourceType\": \"Parameters\",\n    \"parameter\": [\n        {\n            \"name\": \"aufnahmezahl\",\n            \"valueIdentifier\": {\n                \"system\": \"{{gda-oid-value}}\",\n                \"value\": \"{{aufnahmezahl}}\"\n            }\n        },\n        {\n            \"name\": \"versicherer\",\n            \"valueIdentifier\": {\n                \"system\": \"http://svc.co.at/CodeSystem/ecard-svt-cs\",\n                \"value\": \"{{sv-identifier-value}}\"\n            }\n        },\n        {\n            \"name\": \"verlaengerungstage\",\n            \"valueUnsignedInt\": TBD_0\n        },\n        {\n            \"name\": \"sonderklasse\",\n            \"valueCode\": \"TBD_A\"\n        },\n        {\n            \"name\": \"verdachtArbeitsSchuelerunfall\",\n            \"valueCode\": \"TBD_0\"\n        },\n        {\n            \"name\": \"verdachtFremdverschulden\",\n            \"valueBoolean\": TBD_false\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server-base}}Account/$anfragen",
									"host": [
										"{{server-base}}Account"
									],
									"path": [
										"$anfragen"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET VAEResponse (nur dieser Fall)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();",
											"const vaeResponses = response.entry",
											"    ?.map(entry => entry.resource)",
											"    ?.filter(resource => resource.resourceType === \"ClaimResponse\") || []; // Nur ClaimResponse (VAEResponse) Ressourcen anzeigen",
											"",
											"// Helper-Funktion zur Extraktion von Erweiterungswerten",
											"const getExtensionValue = (resource, url) => {",
											"    const ext = resource.extension?.find(ext => ext.url.toLowerCase() === url.toLowerCase());",
											"    return ext ? (ext.valueUnsignedInt ?? ext.valueCoding?.code ?? \"N/A\") : \"N/A\";",
											"};",
											"",
											"let htmlContent = `",
											"    <style>",
											"        table { width: 100%; border-collapse: collapse; }",
											"        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }",
											"        th { background-color: #f4f4f4; }",
											"    </style>",
											"    <h2>VAEResponse-Details</h2>",
											"    <table>",
											"        <thead>",
											"            <tr>",
											"                <th>ID</th>",
											"                <th>Erstellt am</th>",
											"                <th>Status</th>",
											"                <th>Nutzungsart</th>",
											"                <th>Patient</th>",
											"                <th>Versicherer</th>",
											"                <th>Angefragte VAERequest</th>",
											"                <th>Anfragender Leistungserbringer</th>",
											"                <th>Versicherung</th>",
											"               ",
											"                <th>VAEStatus</th>",
											"                <th>G√ºltigkeitszeitraum Start</th>",
											"                <th>G√ºltigkeitszeitraum Ende</th>",
											"                <th>Verpflegskosten-Beitragsbefreiung</th>",
											"                <th>Vortageanzahl auf Kostenbeitrag</th>",
											"            </tr>",
											"        </thead>",
											"        <tbody>`;",
											"",
											"vaeResponses.forEach(vae => {",
											"    htmlContent += `",
											"        <tr>",
											"            <td>${vae.id || \"N/A\"}</td>",
											"            <td>${vae.created || \"N/A\"}</td>",
											"            <td>${vae.status || \"N/A\"}</td>",
											"            <td>${vae.use || \"N/A\"}</td>",
											"            <td>${vae.patient?.reference || \"N/A\"}</td>",
											"            <td>${vae.insurer?.reference || \"N/A\"}</td>",
											"            <td>${vae.request?.reference || \"N/A\"}</td>",
											"            <td>${vae.requestor?.reference || \"N/A\"}</td>",
											"            <td>${vae.insurance?.[0]?.coverage?.reference || \"N/A\"}</td>",
											"            ",
											"            <td>${vae.decision?.coding?.[0]?.code || \"N/A\"}</td>",
											"            <td>${vae.preAuthPeriod?.start || \"N/A\"}</td>",
											"            <td>${vae.preAuthPeriod?.end || \"N/A\"}</td>",
											"            <td>${getExtensionValue(vae, \"https://elga.moped.at/StructureDefinition/moped-ext-VerpflegskostenBeitragsbefreiung\")}</td>",
											"            <td>${getExtensionValue(vae, \"https://elga.moped.at/StructureDefinition/moped-ext-VortageanzahlAufKostenbeitrag\")}</td>",
											"        </tr>`;",
											"});",
											"",
											"htmlContent += `</tbody></table>`;",
											"pm.visualizer.set(htmlContent);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server-base}}/ClaimResponse?status=active&use=preauthorization&requestor.identifier=urn:ietf:rfc:3986|{{gda-oid-value}}&insurer.identifier=http://svc.co.at/CodeSystem/ecard-svt-cs|{{sv-identifier-value}}&request.claim-encounter.identifier={{gda-oid-value}}|{{aufnahmezahl}}",
									"host": [
										"{{server-base}}"
									],
									"path": [
										"ClaimResponse"
									],
									"query": [
										{
											"key": "status",
											"value": "active"
										},
										{
											"key": "use",
											"value": "preauthorization"
										},
										{
											"key": "requestor.identifier",
											"value": "urn:ietf:rfc:3986|{{gda-oid-value}}"
										},
										{
											"key": "insurer.identifier",
											"value": "http://svc.co.at/CodeSystem/ecard-svt-cs|{{sv-identifier-value}}"
										},
										{
											"key": "request.claim-encounter.identifier",
											"value": "{{gda-oid-value}}|{{aufnahmezahl}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "5 Verlegung",
					"item": [
						{
							"name": "Verlegen 1",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"resourceType\": \"Parameters\",\n    \"parameter\": [\n        {\n            \"name\": \"aufnahmezahl\",\n            \"valueIdentifier\": {\n                \"system\": \"{{gda-oid-value}}\",\n                \"value\": \"{{aufnahmezahl}}\"\n            }\n        },\n        {\n            \"name\": \"zeitpunkt\",\n            \"valueDateTime\": \"TBD_2024-08-08T11:22:00+02:00\"\n        },\n        {\n            \"name\": \"funktionscode\",\n            \"valueString\": \"TBD_127181\"\n        },\n        {\n            \"name\": \"funktionssubcode\",\n            \"valueString\": \"TBD_00\"\n        },\n        {\n            \"name\": \"physischeAnwesenheit\",\n            \"valueCode\": \"TBD_ANW\"\n        },\n        {\n            \"name\": \"neuaufnahme\",\n            \"valueBoolean\": TBD_false\n        },\n        {\n            \"name\": \"abgangsart\",\n            \"valueCode\": \"TBD_1\"\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server-base}}Encounter/$verlegen",
									"host": [
										"{{server-base}}Encounter"
									],
									"path": [
										"$verlegen"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET TransferEncounter (nur dieser Fall)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();",
											"",
											"// **Filter encounters to include ONLY MopedTransferEncounter**",
											"const transferEncounters = response.entry",
											"    ?.map(entry => entry.resource)",
											"    ?.filter(resource => ",
											"        resource.resourceType === \"Encounter\" &&",
											"        Array.isArray(resource.meta?.profile) &&",
											"        resource.meta.profile.includes(\"https://elga.moped.at/StructureDefinition/MopedTransferEncounter\")",
											"    ) || []; ",
											"",
											"// **Helper function to get Patient reference correctly**",
											"const getPatientReference = (resource) => {",
											"    return resource.subject?.reference || \"N/A\";",
											"};",
											"",
											"// **Helper function to get Coding values from a path**",
											"const getCodingValue = (resource, path) => {",
											"    const field = path.reduce((obj, key) => obj?.[key], resource);",
											"    return field?.coding?.[0]?.code || \"N/A\";",
											"};",
											"",
											"// **Extract nested extension values (Altersgruppe, Neugeborenes)**",
											"const getNestedExtensionValue = (resource, parentUrl, childUrl) => {",
											"    const parentExt = resource.admission?.extension?.find(ext => ext.url === parentUrl);",
											"    const childExt = parentExt?.extension?.find(ext => ext.url === childUrl);",
											"    ",
											"    if (childExt) {",
											"        if (typeof childExt.valueBoolean !== \"undefined\") {",
											"            return childExt.valueBoolean ? \"Ja\" : \"Nein\"; // Convert boolean to Ja/Nein",
											"        }",
											"        return childExt.valueCode || \"N/A\";",
											"    }",
											"    return \"N/A\";",
											"};",
											"",
											"// **Helper function to extract Discharge Disposition**",
											"const getDischargeDisposition = (resource) => {",
											"    return resource.admission?.dischargeDisposition?.coding?.[0]?.code || \"N/A\";",
											"};",
											"",
											"// **HTML Table Generation**",
											"let htmlContent = `",
											"    <style>",
											"        table { width: 100%; border-collapse: collapse; }",
											"        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }",
											"        th { background-color: #f4f4f4; }",
											"    </style>",
											"    <h2>Moped Transfer Encounter Details</h2>",
											"    <table>",
											"        <thead>",
											"            <tr>",
											"                <th>ID</th>",
											"                <th>Status</th>",
											"                <th>Patient</th>",
											"                <th>Leistungserbringer</th>",
											"                <th>Aufnahmezeitpunkt</th>",
											"                <th>Entlassungszeitpunkt</th>",
											"                <th>physische Anwesenheit</th>",
											"                <th>Altersgruppe Zugang</th>",
											"                <th>Altersgruppe Entlassung</th>",
											"                <th>Neugeborenes</th>",
											"                <th>Abgangsart</th>",
											"                <th>Teil von</th>",
											"            </tr>",
											"        </thead>",
											"        <tbody>`;",
											"",
											"// **Transfer Encounter Table**",
											"transferEncounters.forEach(encounter => {",
											"    htmlContent += `",
											"        <tr>",
											"            <td>${encounter.id || \"N/A\"}</td>",
											"            <td>${encounter.status || \"N/A\"}</td>",
											"            <td>${getPatientReference(encounter)}</td>",
											"            <td>${encounter.serviceProvider?.reference || \"N/A\"}</td>",
											"            <td>${encounter.actualPeriod?.start || \"N/A\"}</td>",
											"            <td>${encounter.actualPeriod?.end || \"N/A\"}</td>",
											"            <td>${getCodingValue(encounter, [\"subjectStatus\"])}</td>",
											"            <td>${getNestedExtensionValue(encounter, \"https://elga.moped.at/StructureDefinition/moped-ext-altersgruppe\", \"beiZugang\")}</td>",
											"            <td>${getNestedExtensionValue(encounter, \"https://elga.moped.at/StructureDefinition/moped-ext-altersgruppe\", \"beiEntlassung\")}</td>",
											"            <td>${getNestedExtensionValue(encounter, \"https://elga.moped.at/StructureDefinition/moped-ext-altersgruppe\", \"neugeborenes\")}</td>",
											"            <td>${getDischargeDisposition(encounter)}</td>",
											"            <td>${encounter.partOf?.reference || \"N/A\"}</td>",
											"        </tr>`;",
											"});",
											"",
											"htmlContent += `</tbody></table>`;",
											"pm.visualizer.set(htmlContent);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{server-base}}/Encounter?part-of.identifier={{gda-oid-value}}|{{aufnahmezahl}}&_include=Encounter:subject",
									"host": [
										"{{server-base}}"
									],
									"path": [
										"Encounter"
									],
									"query": [
										{
											"key": "part-of.identifier",
											"value": "{{gda-oid-value}}|{{aufnahmezahl}}"
										},
										{
											"key": "_include",
											"value": "Encounter:subject"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "6 Patientenentlassung",
					"item": [
						{
							"name": "√úberpr√ºfen ob VAE Antwort vorhanden!!!",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();",
											"const vaeResponses = response.entry",
											"    ?.map(entry => entry.resource)",
											"    ?.filter(resource => resource.resourceType === \"ClaimResponse\") || []; // Nur ClaimResponse (VAEResponse) Ressourcen anzeigen",
											"",
											"// Helper-Funktion zur Extraktion von Erweiterungswerten",
											"const getExtensionValue = (resource, url) => {",
											"    const ext = resource.extension?.find(ext => ext.url.toLowerCase() === url.toLowerCase());",
											"    return ext ? (ext.valueUnsignedInt ?? ext.valueCoding?.code ?? \"N/A\") : \"N/A\";",
											"};",
											"",
											"let htmlContent = `",
											"    <style>",
											"        table { width: 100%; border-collapse: collapse; }",
											"        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }",
											"        th { background-color: #f4f4f4; }",
											"    </style>",
											"    <h2>VAEResponse-Details</h2>",
											"    <table>",
											"        <thead>",
											"            <tr>",
											"                <th>ID</th>",
											"                <th>Erstellt am</th>",
											"                <th>Status</th>",
											"                <th>Nutzungsart</th>",
											"                <th>Patient</th>",
											"                <th>Versicherer</th>",
											"                <th>Angefragte VAERequest</th>",
											"                <th>Anfragender Leistungserbringer</th>",
											"                <th>Versicherung</th>",
											"               ",
											"                <th>VAEStatus</th>",
											"                <th>G√ºltigkeitszeitraum Start</th>",
											"                <th>G√ºltigkeitszeitraum Ende</th>",
											"                <th>Verpflegskosten-Beitragsbefreiung</th>",
											"                <th>Vortageanzahl auf Kostenbeitrag</th>",
											"            </tr>",
											"        </thead>",
											"        <tbody>`;",
											"",
											"vaeResponses.forEach(vae => {",
											"    htmlContent += `",
											"        <tr>",
											"            <td>${vae.id || \"N/A\"}</td>",
											"            <td>${vae.created || \"N/A\"}</td>",
											"            <td>${vae.status || \"N/A\"}</td>",
											"            <td>${vae.use || \"N/A\"}</td>",
											"            <td>${vae.patient?.reference || \"N/A\"}</td>",
											"            <td>${vae.insurer?.reference || \"N/A\"}</td>",
											"            <td>${vae.request?.reference || \"N/A\"}</td>",
											"            <td>${vae.requestor?.reference || \"N/A\"}</td>",
											"            <td>${vae.insurance?.[0]?.coverage?.reference || \"N/A\"}</td>",
											"            ",
											"            <td>${vae.decision?.coding?.[0]?.code || \"N/A\"}</td>",
											"            <td>${vae.preAuthPeriod?.start || \"N/A\"}</td>",
											"            <td>${vae.preAuthPeriod?.end || \"N/A\"}</td>",
											"            <td>${getExtensionValue(vae, \"https://elga.moped.at/StructureDefinition/moped-ext-VerpflegskostenBeitragsbefreiung\")}</td>",
											"            <td>${getExtensionValue(vae, \"https://elga.moped.at/StructureDefinition/moped-ext-VortageanzahlAufKostenbeitrag\")}</td>",
											"        </tr>`;",
											"});",
											"",
											"htmlContent += `</tbody></table>`;",
											"pm.visualizer.set(htmlContent);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{server-base}}/ClaimResponse?status=active&use=preauthorization&requestor.identifier=urn:ietf:rfc:3986|{{gda-oid-value}}&insurer.identifier=http://svc.co.at/CodeSystem/ecard-svt-cs|{{sv-identifier-value}}&request.claim-encounter.identifier={{gda-oid-value}}|{{aufnahmezahl}}",
									"host": [
										"{{server-base}}"
									],
									"path": [
										"ClaimResponse"
									],
									"query": [
										{
											"key": "status",
											"value": "active"
										},
										{
											"key": "use",
											"value": "preauthorization"
										},
										{
											"key": "requestor.identifier",
											"value": "urn:ietf:rfc:3986|{{gda-oid-value}}"
										},
										{
											"key": "insurer.identifier",
											"value": "http://svc.co.at/CodeSystem/ecard-svt-cs|{{sv-identifier-value}}"
										},
										{
											"key": "request.claim-encounter.identifier",
											"value": "{{gda-oid-value}}|{{aufnahmezahl}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "$entlassen",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"resourceType\": \"Parameters\",\n  \"parameter\": [\n    {\n      \"name\": \"aufnahmezahl\",\n            \"valueIdentifier\": {\n                \"system\": \"{{gda-oid-value}}\",\n                \"value\": \"{{aufnahmezahl}}\"\n            }\n    },\n    {\n      \"name\": \"zeitpunkt\",\n      \"valueDateTime\": \"TBD_2024-02-23T07:38:00+02:00\"\n    },\n    {\n      \"name\": \"entlassungsart\",\n      \"valueCode\": \"TBD_E\"\n    },\n    {\n      \"name\": \"tageOhneKostenbeitrag\",\n      \"valueUnsignedInt\": TBD_0\n    },\n    {\n      \"name\": \"abgangsart\",\n      \"valueCode\": \"TBD_1\"\n    },\n    {\n      \"name\": \"freigeben\",\n      \"valueBoolean\": TBD_true\n    }\n  ]\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server-base}}/Encounter/$entlassen",
									"host": [
										"{{server-base}}"
									],
									"path": [
										"Encounter",
										"$entlassen"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET TransferEncounter (nur dieser Fall)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();",
											"",
											"// **Filter encounters to include ONLY MopedTransferEncounter**",
											"const transferEncounters = response.entry",
											"    ?.map(entry => entry.resource)",
											"    ?.filter(resource => ",
											"        resource.resourceType === \"Encounter\" &&",
											"        Array.isArray(resource.meta?.profile) &&",
											"        resource.meta.profile.includes(\"https://elga.moped.at/StructureDefinition/MopedTransferEncounter\")",
											"    ) || []; ",
											"",
											"// **Helper function to get Patient reference correctly**",
											"const getPatientReference = (resource) => {",
											"    return resource.subject?.reference || \"N/A\";",
											"};",
											"",
											"// **Helper function to get Coding values from a path**",
											"const getCodingValue = (resource, path) => {",
											"    const field = path.reduce((obj, key) => obj?.[key], resource);",
											"    return field?.coding?.[0]?.code || \"N/A\";",
											"};",
											"",
											"// **Extract nested extension values (Altersgruppe, Neugeborenes)**",
											"const getNestedExtensionValue = (resource, parentUrl, childUrl) => {",
											"    const parentExt = resource.admission?.extension?.find(ext => ext.url === parentUrl);",
											"    const childExt = parentExt?.extension?.find(ext => ext.url === childUrl);",
											"    ",
											"    if (childExt) {",
											"        if (typeof childExt.valueBoolean !== \"undefined\") {",
											"            return childExt.valueBoolean ? \"Ja\" : \"Nein\"; // Convert boolean to Ja/Nein",
											"        }",
											"        return childExt.valueCode || \"N/A\";",
											"    }",
											"    return \"N/A\";",
											"};",
											"",
											"// **Helper function to extract Discharge Disposition**",
											"const getDischargeDisposition = (resource) => {",
											"    return resource.admission?.dischargeDisposition?.coding?.[0]?.code || \"N/A\";",
											"};",
											"",
											"// **HTML Table Generation**",
											"let htmlContent = `",
											"    <style>",
											"        table { width: 100%; border-collapse: collapse; }",
											"        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }",
											"        th { background-color: #f4f4f4; }",
											"    </style>",
											"    <h2>Moped Transfer Encounter Details</h2>",
											"    <table>",
											"        <thead>",
											"            <tr>",
											"                <th>ID</th>",
											"                <th>Status</th>",
											"                <th>Patient</th>",
											"                <th>Leistungserbringer</th>",
											"                <th>Aufnahmezeitpunkt</th>",
											"                <th>Entlassungszeitpunkt</th>",
											"                <th>physische Anwesenheit</th>",
											"                <th>Altersgruppe Zugang</th>",
											"                <th>Altersgruppe Entlassung</th>",
											"                <th>Neugeborenes</th>",
											"                <th>Abgangsart</th>",
											"                <th>Teil von</th>",
											"            </tr>",
											"        </thead>",
											"        <tbody>`;",
											"",
											"// **Transfer Encounter Table**",
											"transferEncounters.forEach(encounter => {",
											"    htmlContent += `",
											"        <tr>",
											"            <td>${encounter.id || \"N/A\"}</td>",
											"            <td>${encounter.status || \"N/A\"}</td>",
											"            <td>${getPatientReference(encounter)}</td>",
											"            <td>${encounter.serviceProvider?.reference || \"N/A\"}</td>",
											"            <td>${encounter.actualPeriod?.start || \"N/A\"}</td>",
											"            <td>${encounter.actualPeriod?.end || \"N/A\"}</td>",
											"            <td>${getCodingValue(encounter, [\"subjectStatus\"])}</td>",
											"            <td>${getNestedExtensionValue(encounter, \"https://elga.moped.at/StructureDefinition/moped-ext-altersgruppe\", \"beiZugang\")}</td>",
											"            <td>${getNestedExtensionValue(encounter, \"https://elga.moped.at/StructureDefinition/moped-ext-altersgruppe\", \"beiEntlassung\")}</td>",
											"            <td>${getNestedExtensionValue(encounter, \"https://elga.moped.at/StructureDefinition/moped-ext-altersgruppe\", \"neugeborenes\")}</td>",
											"            <td>${getDischargeDisposition(encounter)}</td>",
											"            <td>${encounter.partOf?.reference || \"N/A\"}</td>",
											"        </tr>`;",
											"});",
											"",
											"htmlContent += `</tbody></table>`;",
											"pm.visualizer.set(htmlContent);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{server-base}}/Encounter?part-of.identifier={{gda-oid-value}}|{{aufnahmezahl}}&_include=Encounter:subject",
									"host": [
										"{{server-base}}"
									],
									"path": [
										"Encounter"
									],
									"query": [
										{
											"key": "part-of.identifier",
											"value": "{{gda-oid-value}}|{{aufnahmezahl}}"
										},
										{
											"key": "_include",
											"value": "Encounter:subject"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET Encounter (nur dieser Fall)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();",
											"",
											"// **Filterung der Encounters (nur MopedEncounter)**",
											"const encounters = response.entry",
											"    ?.map(entry => entry.resource)",
											"    ?.filter(resource => ",
											"        resource.resourceType === \"Encounter\" &&",
											"        resource.meta?.profile?.includes(\"https://elga.moped.at/StructureDefinition/MopedEncounter\")",
											"    ) || []; ",
											"",
											"// Helper-Funktion zur Extraktion von Identifier-Werten",
											"const getIdentifierValue = (resource, code) => {",
											"    return resource.identifier?.find(id => ",
											"        id.type?.coding?.some(coding => coding.code === code)",
											"    )?.value || \"N/A\";",
											"};",
											"",
											"// Helper-Funktion zur Extraktion von Coding-Werten",
											"const getCodingValue = (resource, path) => {",
											"    const field = path.reduce((obj, key) => obj?.[key], resource);",
											"    return field?.coding?.[0]?.code || \"N/A\";",
											"};",
											"",
											"// Helper-Funktion zur Extraktion von Reason-Werten",
											"const getReason = (resource) => {",
											"    return resource.reason?.[0]?.value?.[0]?.concept?.coding?.[0]?.code || \"N/A\";",
											"};",
											"",
											"// Helper-Funktion zur Extraktion von Diagnose-Werten",
											"const getDiagnosis = (resource) => {",
											"    return resource.diagnosis?.[0]?.condition?.[0]?.concept?.coding?.[0]?.display || \"N/A\";",
											"};",
											"",
											"// Helper-Funktion zur Extraktion von Extensions-Werten",
											"const getExtensionValue = (resource, url) => {",
											"    const ext = resource.admission?.extension?.find(ext => ext.url === url) ||",
											"                resource.extension?.find(ext => ext.url === url);",
											"    return ext ? (ext.valueCoding?.code || ext.valueDate || ext.valueCode || \"N/A\") : \"N/A\";",
											"};",
											"",
											"let htmlContent = `",
											"    <style>",
											"        table { width: 100%; border-collapse: collapse; }",
											"        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }",
											"        th { background-color: #f4f4f4; }",
											"    </style>",
											"    <h2>Encounter-Details</h2>",
											"    <table>",
											"        <thead>",
											"            <tr>",
											"                <th>ID</th>",
											"                <th>Aufnahmezahl</th>",
											"                <th>Datensatz-ID</th>",
											"                <th>Status</th>",
											"                <th>Behandlungsart</th>",
											"                <th>Aufnahmeart</th>",
											"                <th>Patient</th>",
											"                <th>Leistungserbringer</th>",
											"                <th>Aufnahmezeitpunkt</th>",
											"                <th>Entlassungszeitpunkt</th>",
											"                ",
											"                <th>Ursache</th>",
											"                <th>Diagnose</th>",
											"                <th>Aufnahmeart2</th>",
											"                <th>Entlassungsart</th>",
											"                <th>Account</th>",
											"                <th>Transportart</th>",
											"                <th>Unfalldatum</th>",
											"            </tr>",
											"        </thead>",
											"        <tbody>`;",
											"",
											"// **Encounter Tabelle**",
											"encounters.forEach(encounter => {",
											"    htmlContent += `",
											"        <tr>",
											"            <td>${encounter.id || \"N/A\"}</td>",
											"            <td>${getIdentifierValue(encounter, \"VN\")}</td>",
											"            <td>${getIdentifierValue(encounter, \"ANON\")}</td>",
											"            <td>${encounter.status || \"N/A\"}</td>",
											"            <td>${getCodingValue(encounter, [\"class\", 0])}</td>",
											"            <td>${getCodingValue(encounter, [\"class\", 1])}</td>",
											"            <td>${encounter.subject?.reference || \"N/A\"}</td>",
											"            <td>${encounter.serviceProvider?.reference || \"N/A\"}</td>",
											"            <td>${encounter.actualPeriod?.start || \"N/A\"}</td>",
											"            <td>${encounter.actualPeriod?.end || \"N/A\"}</td>",
											"           ",
											"            <td>${getReason(encounter)}</td>",
											"            <td>${getDiagnosis(encounter)}</td>",
											"            <td>${getExtensionValue(encounter, \"https://elga.moped.at/StructureDefinition/moped-ext-aufnahmeart\")}</td>",
											"<td>${encounter.admission?.dischargeDisposition?.coding?.[0]?.code || \"N/A\"}</td>",
											"            <td>${encounter.account?.[0]?.reference || \"N/A\"}</td>",
											"            <td>${getExtensionValue(encounter, \"https://elga.moped.at/StructureDefinition/moped-ext-transportart\")}</td>",
											"            <td>${getExtensionValue(encounter, \"https://elga.moped.at/StructureDefinition/moped-ext-unfalldatum\")}</td>",
											"        </tr>`;",
											"});",
											"",
											"htmlContent += `</tbody></table>`;",
											"pm.visualizer.set(htmlContent);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{server-base}}/Encounter?identifier={{gda-oid-value}}|{{aufnahmezahl}}",
									"host": [
										"{{server-base}}"
									],
									"path": [
										"Encounter"
									],
									"query": [
										{
											"key": "identifier",
											"value": "{{gda-oid-value}}|{{aufnahmezahl}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "7 Leistungen Erfassen",
					"item": [
						{
							"name": "$erfassen",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"resourceType\": \"Parameters\",\n    \"parameter\": [\n        {\n            \"name\": \"aufnahmezahl\",\n            \"valueIdentifier\": {\n                \"system\": \"{{gda-oid-value}}\",\n                \"value\": \"{{aufnahmezahl}}\"\n            }\n        },\n        {\n            \"name\": \"leistung\",\n            \"resource\": {\n                \"resourceType\": \"Procedure\",\n                \"meta\": {\n                    \"profile\": [\n                        \"https://elga.moped.at/StructureDefinition/MopedProcedure\"\n                    ]\n                },\n                \"identifier\": [\n                    {\n                        \"type\": {\n                            \"coding\": [\n                                {\n                                    \"system\": \"http://terminology.hl7.org/CodeSystem/v2-0203\",\n                                    \"code\": \"RI\"\n                                }\n                            ]\n                        },\n                        \"value\": \"{{aufnahmezahl}}{{gda-oid-value}}-TBD_AN010-TBD_2024-02-22T19:33\"\n                    }\n                ],\n                \"status\": \"completed\",\n                \"code\": {\n                    \"coding\": [\n                        {\n                            \"system\": \"https://termgit.elga.gv.at/CodeSystem/lkat-bmsgpk-2025\",\n                            \"code\": \"TBD_AN010\",\n                            \"display\": \"TBD_Polysomnographie im Schlaflabor (LE=je Behandlungstag)\"\n                        }\n                    ]\n                },\n                \"subject\": {\n                    \"reference\": \"Patient?identifier=urn:oid:1.2.40.0.10.1.4.3.1|{{svnr}}\"\n                },\n                \"encounter\": {\n                    \"reference\": \"Encounter?identifier={{gda-oid-value}}|{{aufnahmezahl}}\"\n                },\n                \"occurrenceDateTime\": \"TBD_2024-02-22T19:33:00+02:00\",\n                \"performer\": [\n                    {\n                        \"actor\": {\n                            \"reference\": \"Organization?identifier=http://example.org/lkf-system/funktionscode|TBD_131180&partof:identifier=urn:ietf:rfc:3986|{{gda-oid-value}}\"\n                        },\n                        \"onBehalfOf\": {\n                            \"reference\": \"Organization?identifier=urn:ietf:rfc:3986|{{gda-oid-value}}\"\n                        }\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"diagnose\",\n            \"resource\": {\n                \"resourceType\": \"Condition\",\n                \"meta\": {\n                    \"profile\": [\n                        \"https://elga.moped.at/StructureDefinition/MopedCondition\"\n                    ]\n                },\n                \"identifier\": [\n                    {\n                        \"type\": {\n                            \"coding\": [\n                                {\n                                    \"system\": \"http://terminology.hl7.org/CodeSystem/v2-0203\",\n                                    \"code\": \"RI\"\n                                }\n                            ]\n                        },\n                        \"value\": \"{{aufnahmezahl}}{{gda-oid-value}}-TBD_G47.3\"\n                    }\n                ],\n                \"clinicalStatus\": {\n                    \"extension\": [\n                        {\n                            \"url\": \"http://hl7.org/fhir/StructureDefinition/data-absent-reason\",\n                            \"valueCode\": \"not-asked\"\n                        }\n                    ],\n                    \"coding\": [\n                        {\n                            \"system\": \"http://terminology.hl7.org/CodeSystem/condition-clinical\",\n                            \"code\": \"unknown\"\n                        }\n                    ]\n                },\n                \"verificationStatus\": {\n                    \"coding\": [\n                        {\n                            \"system\": \"http://terminology.hl7.org/CodeSystem/condition-ver-status\",\n                            \"code\": \"TBD_confirmed\"\n                        }\n                    ]\n                },\n                \"code\": {\n                    \"coding\": [\n                        {\n                            \"system\": \"https://termgit.elga.gv.at/CodeSystem/icd-10-bmsgpk-2025\",\n                            \"code\": \"TBD_G47.3\",\n                            \"display\": \"TBD_Schlafapnoe\"\n                        },\n                        {\n                            \"system\": \"https://elga.moped.at/CodeSystem/LKFHauptdiagnosegruppenCS\",\n                            \"code\": \"TBD_HDG01.31\",\n                            \"display\": \"TBD_Sonstige Erkrankungen - Nervensystem\"\n                        }\n                    ]\n                },\n                \"subject\": {\n                    \"reference\": \"Patient?identifier=urn:oid:1.2.40.0.10.1.4.3.1|{{svnr}}\"\n                },\n                \"encounter\": {\n                    \"reference\": \"Encounter?identifier={{gda-oid-value}}|{{aufnahmezahl}}\"\n                }\n            }\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server-base}}/Encounter/$erfassen",
									"host": [
										"{{server-base}}"
									],
									"path": [
										"Encounter",
										"$erfassen"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET Conditions (nur dieser Fall)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();",
											"",
											"// **Filter to include ONLY MopedCondition**",
											"const conditions = response.entry",
											"    ?.map(entry => entry.resource)",
											"    ?.filter(resource => ",
											"        resource.resourceType === \"Condition\" &&",
											"        Array.isArray(resource.meta?.profile) &&",
											"        resource.meta.profile.includes(\"https://elga.moped.at/StructureDefinition/MopedCondition\")",
											"    ) || [];",
											"",
											"// **Helper function to get Identifier value**",
											"const getIdentifierValue = (resource) => {",
											"    return resource.identifier?.[0]?.value || \"N/A\";",
											"};",
											"",
											"// **Helper function to get Clinical Status**",
											"const getClinicalStatus = (resource) => {",
											"    return resource.clinicalStatus?.coding?.[0]?.code || \"N/A\";",
											"};",
											"",
											"// **Helper function to get Verification Status**",
											"const getVerificationStatus = (resource) => {",
											"    return resource.verificationStatus?.coding?.[0]?.code || \"N/A\";",
											"};",
											"",
											"// **Helper function to get ICD-10 Code**",
											"const getICDCode = (resource) => {",
											"    return resource.code?.coding?.find(coding => coding.system.includes(\"icd-10-bmsgpk-2025\"))?.code || \"N/A\";",
											"};",
											"",
											"// **Helper function to get ICD-10 Description**",
											"const getICDDescription = (resource) => {",
											"    return resource.code?.coding?.find(coding => coding.system.includes(\"icd-10-bmsgpk-2025\"))?.display || \"N/A\";",
											"};",
											"",
											"// **Helper function to get HDG Code**",
											"const getHDGCode = (resource) => {",
											"    return resource.code?.coding?.find(coding => coding.system.includes(\"LKFHauptdiagnosegruppenCS\"))?.code || \"N/A\";",
											"};",
											"",
											"// **Helper function to get HDG Description**",
											"const getHDGDescription = (resource) => {",
											"    return resource.code?.coding?.find(coding => coding.system.includes(\"LKFHauptdiagnosegruppenCS\"))?.display || \"N/A\";",
											"};",
											"",
											"// **HTML Table Generation**",
											"let htmlContent = `",
											"    <style>",
											"        table { width: 100%; border-collapse: collapse; }",
											"        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }",
											"        th { background-color: #f4f4f4; }",
											"    </style>",
											"    <h2>Moped Condition Details</h2>",
											"    <table>",
											"        <thead>",
											"            <tr>",
											"                <th>ID</th>",
											"                <th>Identifier</th>",
											"          ",
											"                ",
											"                <th>ICD-10 Code</th>",
											"                <th>ICD-10 Description</th>",
											"                <th>HDG Code</th>",
											"                <th>HDG Description</th>",
											"                <th>Patient</th>",
											"                <th>Encounter</th>",
											"            </tr>",
											"        </thead>",
											"        <tbody>`;",
											"",
											"// **Condition Table**",
											"conditions.forEach(condition => {",
											"    htmlContent += `",
											"        <tr>",
											"            <td>${condition.id || \"N/A\"}</td>",
											"            <td>${getIdentifierValue(condition)}</td>",
											"       ",
											"            ",
											"            <td>${getICDCode(condition)}</td>",
											"            <td>${getICDDescription(condition)}</td>",
											"            <td>${getHDGCode(condition)}</td>",
											"            <td>${getHDGDescription(condition)}</td>",
											"            <td>${condition.subject?.reference || \"N/A\"}</td>",
											"            <td>${condition.encounter?.reference || \"N/A\"}</td>",
											"        </tr>`;",
											"});",
											"",
											"htmlContent += `</tbody></table>`;",
											"pm.visualizer.set(htmlContent);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{server-base}}/Condition?encounter.identifier={{gda-oid-value}}|{{aufnahmezahl}}",
									"host": [
										"{{server-base}}"
									],
									"path": [
										"Condition"
									],
									"query": [
										{
											"key": "_include",
											"value": "*",
											"disabled": true
										},
										{
											"key": "encounter.identifier",
											"value": "{{gda-oid-value}}|{{aufnahmezahl}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET Procedures (nur dieser Fall)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();",
											"",
											"// **Filter to include ONLY MopedProcedure**",
											"const procedures = response.entry",
											"    ?.map(entry => entry.resource)",
											"    ?.filter(resource => ",
											"        resource.resourceType === \"Procedure\" &&",
											"        Array.isArray(resource.meta?.profile) &&",
											"        resource.meta.profile.includes(\"https://elga.moped.at/StructureDefinition/MopedProcedure\")",
											"    ) || [];",
											"",
											"// **Helper function to get Identifier value**",
											"const getIdentifierValue = (resource) => {",
											"    return resource.identifier?.find(id => id.type?.coding?.some(coding => coding.code === \"RI\"))?.value || \"N/A\";",
											"};",
											"",
											"// **Helper function to get Procedure Status**",
											"const getProcedureStatus = (resource) => {",
											"    return resource.status || \"N/A\";",
											"};",
											"",
											"// **Updated Helper function to get LKF Code & Description**",
											"const getLKFCodeData = (resource) => {",
											"    const lkfCoding = resource.code?.coding?.find(coding => coding.system.includes(\"lkat-bmsgpk-2025\"));",
											"    return {",
											"        code: lkfCoding?.code || \"N/A\",",
											"        display: lkfCoding?.display || \"N/A\"",
											"    };",
											"};",
											"",
											"// **Helper function to get MEL Gruppe Code & Description**",
											"const getMELGruppeData = (resource) => {",
											"    const melCoding = resource.category?.coding?.find(coding => coding.system.includes(\"LKFmedizinischeEinzelleistungenCS\"));",
											"    return {",
											"        code: melCoding?.code || \"N/A\",",
											"        display: melCoding?.display || \"N/A\"",
											"    };",
											"};",
											"",
											"// **Helper function to get Occurrence Date**",
											"const getOccurrenceDate = (resource) => {",
											"    return resource.occurrenceDateTime || \"N/A\";",
											"};",
											"",
											"// **HTML Table Generation**",
											"let htmlContent = `",
											"    <style>",
											"        table { width: 100%; border-collapse: collapse; }",
											"        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }",
											"        th { background-color: #f4f4f4; }",
											"    </style>",
											"    <h2>Moped Procedure Details</h2>",
											"    <table>",
											"        <thead>",
											"            <tr>",
											"                <th>ID</th>",
											"                <th>Identifier</th>",
											"                <th>Status</th>",
											"                <th>LKF Leistung</th>",
											"                <th>LKF Beschreibung</th>",
											"                <th>MEL Gruppe</th>",
											"                <th>MEL Gruppe Beschreibung</th>",
											"                <th>Datum</th>",
											"                <th>Patient</th>",
											"                <th>Encounter</th>",
											"                <th>Abteilung</th>",
											"                <th>Krankenanstalt</th>",
											"            </tr>",
											"        </thead>",
											"        <tbody>`;",
											"",
											"// **Procedure Table**",
											"procedures.forEach(procedure => {",
											"    const lkfData = getLKFCodeData(procedure);",
											"    const melData = getMELGruppeData(procedure);",
											"",
											"    htmlContent += `",
											"        <tr>",
											"            <td>${procedure.id || \"N/A\"}</td>",
											"            <td>${getIdentifierValue(procedure)}</td>",
											"            <td>${getProcedureStatus(procedure)}</td>",
											"            <td>${lkfData.code}</td>",
											"            <td>${lkfData.display}</td>",
											"            <td>${melData.code}</td>",
											"            <td>${melData.display}</td>",
											"            <td>${getOccurrenceDate(procedure)}</td>",
											"            <td>${procedure.subject?.reference || \"N/A\"}</td>",
											"            <td>${procedure.encounter?.reference || \"N/A\"}</td>",
											"            <td>${procedure.performer?.[0]?.actor?.reference || \"N/A\"}</td>",
											"            <td>${procedure.performer?.[0]?.onBehalfOf?.reference || \"N/A\"}</td>",
											"        </tr>`;",
											"});",
											"",
											"htmlContent += `</tbody></table>`;",
											"pm.visualizer.set(htmlContent);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{server-base}}/Procedure?encounter.identifier={{gda-oid-value}}|{{aufnahmezahl}}",
									"host": [
										"{{server-base}}"
									],
									"path": [
										"Procedure"
									],
									"query": [
										{
											"key": "encounter.identifier",
											"value": "{{gda-oid-value}}|{{aufnahmezahl}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "8 Abrechnen",
					"item": [
						{
							"name": "$abrechnen",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"resourceType\": \"Parameters\",\n    \"parameter\": [\n        {\n            \"name\": \"aufnahmezahl\",\n            \"valueIdentifier\": {\n                \"system\": \"{{gda-oid-value}}\",\n                \"value\": \"{{aufnahmezahl}}\"\n            }\n        },\n        {\n            \"name\": \"abschliessen\",\n            \"valueBoolean\": TBD_true\n        },\n        {\n            \"name\": \"claim\",\n            \"resource\": {\n                \"resourceType\": \"Claim\",\n                \"meta\": {\n                    \"profile\": [\n                        \"https://elga.moped.at/StructureDefinition/MopedLKFRequest\"\n                    ]\n                },\n                \"extension\": [\n                    {\n                        \"url\": \"https://elga.moped.at/StructureDefinition/moped-ext-diagnoseKnoten\",\n                        \"valueCoding\": {\n                            \"system\": \"https://elga.moped.at/CodeSystem/LKFAbrechnungsKnotenCS\",\n                            \"code\": \"TBD_D\"\n                        }\n                    },\n                    {\n                        \"extension\": [\n                            {\n                                \"url\": \"PunkteBelagsdauerausreisserUntenLeistungskomponente\",\n                                \"valueUnsignedInt\": TBD_0\n                            },\n                            {\n                                \"url\": \"PunkteBelagsdauerausreisserUntenTageskomponente\",\n                                \"valueUnsignedInt\": TBD_0\n                            },\n                            {\n                                \"url\": \"ZusatzpunkteBelagsdauerausreisserNachOben\",\n                                \"valueUnsignedInt\": TBD_0\n                            },\n                            {\n                                \"url\": \"ZusatzpunkteIntensiv\",\n                                \"valueUnsignedInt\": TBD_0\n                            },\n                            {\n                                \"url\": \"ZusatzpunkteMehrfachleistungen\",\n                                \"valueUnsignedInt\": TBD_0\n                            },\n                            {\n                                \"url\": \"PunkteSpeziellerBereicheTageweise\",\n                                \"valueUnsignedInt\": TBD_0\n                            },\n                            {\n                                \"url\": \"PunkteTotal\",\n                                \"valueUnsignedInt\": TBD_1110\n                            },\n                            {\n                                \"url\": \"Leistungskomponente\",\n                                \"valueUnsignedInt\": TBD_743\n                            },\n                            {\n                                \"url\": \"TageskomponenteKontaktpunkte\",\n                                \"valueUnsignedInt\": TBD_367\n                            }\n                        ],\n                        \"url\": \"https://elga.moped.at/StructureDefinition/moped-ext-LKFPunkte\"\n                    },\n                    {\n                        \"url\": \"https://elga.moped.at/StructureDefinition/moped-ext-fondsrelevanz\",\n                        \"valueCoding\": {\n                            \"system\": \"https://elga.moped.at/CodeSystem/FondsrelevanzCS\",\n                            \"code\": \"TBD_J\"\n                        }\n                    },\n                    {\n                        \"url\": \"https://elga.moped.at/StructureDefinition/Plausibilitaetskennzeichen\",\n                        \"valueString\": \"TBD_4\"\n                    }\n                ],\n                \"status\": \"active\",\n                \"type\": {\n                    \"coding\": [\n                        {\n                            \"system\": \"http://terminology.hl7.org/CodeSystem/claim-type\",\n                            \"code\": \"institutional\"\n                        }\n                    ]\n                },\n                \"use\": \"claim\",\n                \"patient\": {\n                    \"reference\": \"Patient?identifier=urn:oid:1.2.40.0.10.1.4.3.1|{{svnr}}\"\n                },\n                \"created\": \"TBD_2024-10-31\",\n                \"insurer\": {\n                    \"reference\": \"Organization?identifier=http://svc.co.at/CodeSystem/ecard-svt-cs|{{sv-identifier-value}}\"\n                },\n                \"provider\": {\n                    \"reference\": \"Organization?identifier=urn:ietf:rfc:3986|{{gda-oid-value}}\"\n                },\n                \"encounter\": [\n                    {\n                        \"reference\": \"Encounter?identifier={{gda-oid-value}}|{{aufnahmezahl}}\"\n                    }\n                ],\n                \"diagnosisRelatedGroup\": {\n                    \"coding\": [\n                        {\n                            \"system\": \"https://elga.moped.at/CodeSystem/LKFHauptdiagnosegruppenCS\",\n                            \"code\": \"TBD_HDG01.31\"\n                        }\n                    ]\n                },\n                \"diagnosis\": [\n                    {\n                        \"sequence\": 1,\n                        \"diagnosisReference\": {\n                            \"reference\": \"Condition?identifier.value={{aufnahmezahl}}{{gda-oid-value}}-TBD_G47.3\"\n                        },\n                        \"onAdmission\": {\n                            \"coding\": [\n                                {\n                                    \"system\": \"http://terminology.hl7.org/CodeSystem/ex-diagnosis-on-admission\",\n                                    \"code\": \"TBD_unknown\"\n                                }\n                            ]\n                        }\n                    }\n                ],\n                \"procedure\": [\n                    {\n                        \"extension\": [\n                            {\n                                \"url\": \"https://elga.moped.at/StructureDefinition/moped-ext-AbrechnungsRelevanz\",\n                                \"valueCoding\": {\n                                    \"system\": \"https://elga.moped.at/CodeSystem/AbrechnungsRelevanzCS\",\n                                    \"code\": \"TBD_J\"\n                                }\n                            }\n                        ],\n                        \"sequence\": 1,\n                        \"procedureReference\": {\n                            \"reference\": \"Procedure?identifier.value={{aufnahmezahl}}{{gda-oid-value}}-TBD_AN010-TBD_2024-02-22T19:33\"\n                        }\n                    }\n                ],\n                \"insurance\": [\n                    {\n                        \"sequence\": 1,\n                        \"focal\": true,\n                        \"coverage\": {\n                            \"reference\": \"Coverage?identifier={{vdasID}}\"\n                        }\n                    }\n                ],\n                \"item\": [\n                    {\n                        \"sequence\": 1,\n                        \"procedureSequence\": [\n                            1\n                        ]\n                    },\n                    {\n                        \"sequence\": 2,\n                        \"diagnosisSequence\": [\n                            1\n                        ],\n                        \"category\": {\n                            \"coding\": [\n                                {\n                                    \"system\": \"https://termgit.elga.gv.at/CodeSystem/lkf-diagnose-typ\",\n                                    \"code\": \"TBD_H\"\n                                }\n                            ]\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server-base}}/Encounter/$abrechnen",
									"host": [
										"{{server-base}}"
									],
									"path": [
										"Encounter",
										"$abrechnen"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET LKFRequest (nur dieser Fall)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();",
											"",
											"// **Filterung der LKFRequest (Claim) Ressourcen**",
											"const claims = response.entry",
											"    ?.map(entry => entry.resource)",
											"    ?.filter(resource => ",
											"        resource.resourceType === \"Claim\" &&",
											"        Array.isArray(resource.meta?.profile) &&",
											"        resource.meta.profile.includes(\"https://elga.moped.at/StructureDefinition/MopedLKFRequest\")",
											"    ) || [];",
											"",
											"// **Helper-Funktion: Extraktion von Coding-Werten**",
											"const getCodingValue = (resource, path) => {",
											"    const field = path.reduce((obj, key) => obj?.[key], resource);",
											"    return field?.coding?.[0]?.code || \"N/A\";",
											"};",
											"",
											"// **Helper-Funktion: Extraktion von Extensions-Werten**",
											"const getExtensionValue = (resource, url) => {",
											"    const ext = resource.extension?.find(ext => ext.url === url);",
											"    return ext ? (ext.valueCoding?.code || ext.valueString || \"N/A\") : \"N/A\";",
											"};",
											"",
											"// **Helper-Funktion: Extraktion von LKF-Punkten (komplexe Extension)**",
											"const getLKFPoints = (resource, subfield) => {",
											"    const ext = resource.extension?.find(ext => ext.url === \"https://elga.moped.at/StructureDefinition/moped-ext-LKFPunkte\");",
											"    const subExt = ext?.extension?.find(e => e.url === subfield);",
											"    return subExt ? subExt.valueUnsignedInt || 0 : \"N/A\";",
											"};",
											"",
											"// **Helper-Funktion: Extraktion von Diagnosen mit Haupt-/Zusatzdiagnose**",
											"const getDiagnoses = (claim) => {",
											"    return claim.diagnosis?.map(diagnosis => {",
											"        const diagnosisType = claim.item?.find(item => ",
											"            item.diagnosisSequence?.includes(diagnosis.sequence)",
											"        )?.category?.coding?.[0]?.code || \"N/A\";",
											"",
											"        return `${diagnosis.diagnosisReference?.reference || \"N/A\"} (${diagnosisType})`;",
											"    }).join(\"<br>\") || \"N/A\"; // Join diagnoses in one row",
											"};",
											"",
											"// **Helper-Funktion: Extraktion aller Encounters**",
											"const getEncounters = (claim) => {",
											"    return claim.encounter?.map(enc => enc.reference).join(\"<br>\") || \"N/A\";",
											"};",
											"",
											"// **Helper-Funktion: Extraktion aller Leistungen**",
											"const getProcedures = (claim) => {",
											"    return claim.procedure?.map(proc => proc.procedureReference?.reference).join(\"<br>\") || \"N/A\";",
											"};",
											"",
											"// **HTML-Generierung**",
											"let htmlContent = `",
											"    <style>",
											"        table { width: 100%; border-collapse: collapse; }",
											"        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }",
											"        th { background-color: #f4f4f4; }",
											"    </style>",
											"    <h2>LKFRequest (Claim) Details</h2>",
											"    <table>",
											"        <thead>",
											"            <tr>",
											"                <th>ID</th>",
											"                <th>Use</th>",
											"                <th>Status</th>",
											"                <th>Patient</th>",
											"                <th>Erstellt</th>",
											"                <th>Versicherer</th>",
											"                <th>Leistungserbringer</th>",
											"                <th>Encounters</th>",
											"                <th>Leistungen</th>",
											"                <th>Abrechnung Gruppe</th>",
											"                <th>Abrechnung Knoten</th>",
											"                <th>Diagnosen inkl. Haupt-/od. Zusatzdiagnose</th>",
											"                <th>Coverage</th>",
											"                <th>LKF Punkte - Total</th>",
											"                <th>LKF Punkte - Leistungskomponente</th>",
											"                <th>LKF Punkte - Tageskomponente Kontaktpunkte</th>",
											"                <th>LKF Punkte - Zusatzpunkte Intensiv</th>",
											"                <th>LKF Punkte - Zusatzpunkte Mehrfachleistungen</th>",
											"                <th>LKF Punkte - Punkte Belagsdauerausreisser Unten Leistungskomponente</th>",
											"                <th>LKF Punkte - Punkte Belagsdauerausreisser Unten Tageskomponente</th>",
											"                <th>LKF Punkte - Zusatzpunkte Belagsdauerausreisser Nach Oben</th>",
											"                <th>LKF Punkte - Punkte Spezieller Bereiche Tageweise</th>",
											"                <th>Fondsrelevanz</th>",
											"                <th>Plausibilit√§tskennzeichen</th>",
											"            </tr>",
											"        </thead>",
											"        <tbody>`;",
											"",
											"// **LKFRequest Tabelle**",
											"claims.forEach(claim => {",
											"    htmlContent += `",
											"        <tr>",
											"            <td>${claim.id || \"N/A\"}</td>",
											"            <td>${claim.use || \"N/A\"}</td>",
											"            <td>${claim.status || \"N/A\"}</td>",
											"            <td>${claim.patient?.reference || \"N/A\"}</td>",
											"            <td>${claim.created || \"N/A\"}</td>",
											"            <td>${claim.insurer?.reference || \"N/A\"}</td>",
											"            <td>${claim.provider?.reference || \"N/A\"}</td>",
											"            <td>${getEncounters(claim)}</td>",
											"            <td>${getProcedures(claim)}</td>",
											"            <td>${getCodingValue(claim, [\"diagnosisRelatedGroup\"])}</td>",
											"            <td>${getExtensionValue(claim, \"https://elga.moped.at/StructureDefinition/moped-ext-diagnoseKnoten\")}</td>",
											"            <td>${getDiagnoses(claim)}</td>",
											"            <td>${claim.insurance?.[0]?.coverage?.reference || \"N/A\"}</td>",
											"            <td>${getLKFPoints(claim, \"PunkteTotal\")}</td>",
											"            <td>${getLKFPoints(claim, \"Leistungskomponente\")}</td>",
											"            <td>${getLKFPoints(claim, \"TageskomponenteKontaktpunkte\")}</td>",
											"            <td>${getLKFPoints(claim, \"ZusatzpunkteIntensiv\")}</td>",
											"            <td>${getLKFPoints(claim, \"ZusatzpunkteMehrfachleistungen\")}</td>",
											"            <td>${getLKFPoints(claim, \"PunkteBelagsdauerausreisserUntenLeistungskomponente\")}</td>",
											"            <td>${getLKFPoints(claim, \"PunkteBelagsdauerausreisserUntenTageskomponente\")}</td>",
											"            <td>${getLKFPoints(claim, \"ZusatzpunkteBelagsdauerausreisserNachOben\")}</td>",
											"            <td>${getLKFPoints(claim, \"PunkteSpeziellerBereicheTageweise\")}</td>",
											"            <td>${getExtensionValue(claim, \"https://elga.moped.at/StructureDefinition/moped-ext-fondsrelevanz\")}</td>",
											"            <td>${getExtensionValue(claim, \"https://elga.moped.at/StructureDefinition/Plausibilitaetskennzeichen\")}</td>",
											"        </tr>`;",
											"});",
											"",
											"htmlContent += `</tbody></table>`;",
											"pm.visualizer.set(htmlContent);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{server-base}}/Claim?status=active&use=claim&provider.identifier=urn:ietf:rfc:3986|{{gda-oid-value}}&insurer.identifier=http://svc.co.at/CodeSystem/ecard-svt-cs|{{sv-identifier-value}}&_has:ClaimResponse:request:status:not=active&claim-encounter.identifier={{gda-oid-value}}|{{aufnahmezahl}}",
									"host": [
										"{{server-base}}"
									],
									"path": [
										"Claim"
									],
									"query": [
										{
											"key": "status",
											"value": "active"
										},
										{
											"key": "use",
											"value": "claim"
										},
										{
											"key": "provider.identifier",
											"value": "urn:ietf:rfc:3986|{{gda-oid-value}}"
										},
										{
											"key": "insurer.identifier",
											"value": "http://svc.co.at/CodeSystem/ecard-svt-cs|{{sv-identifier-value}}"
										},
										{
											"key": "_has:ClaimResponse:request:status:not",
											"value": "active",
											"description": "nur unbeantwortete Requests"
										},
										{
											"key": "claim-encounter.identifier",
											"value": "{{gda-oid-value}}|{{aufnahmezahl}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET LKFResponse (nur dieser Fall)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();",
											"",
											"// **Filter LKFResponses**",
											"const lkfResponses = response.entry",
											"    ?.map(entry => entry.resource)",
											"    ?.filter(resource => ",
											"        resource.resourceType === \"ClaimResponse\" &&",
											"        Array.isArray(resource.meta?.profile) &&",
											"        resource.meta.profile.includes(\"https://elga.moped.at/StructureDefinition/MopedLKFResponse\")",
											"    ) || [];",
											"",
											"// **Helper function to extract Coding values**",
											"const getCodingValue = (resource, url) => {",
											"    const extension = resource.extension?.find(ext => ext.url === url);",
											"    return extension?.valueCoding?.code || \"N/A\";",
											"};",
											"",
											"// **Helper function to extract Decimal values from Extensions**",
											"const getExtensionDecimalValue = (resource, url) => {",
											"    const ext = resource.extension?.find(ext => ext.url === url);",
											"    return ext?.valueDecimal !== undefined ? ext.valueDecimal : \"N/A\";",
											"};",
											"",
											"// **Helper function to extract UnsignedInt values from LKFPunkte**",
											"const getLKFPunkteValue = (resource, subUrl) => {",
											"    const lkfPunkte = resource.extension?.find(ext => ext.url === \"https://elga.moped.at/StructureDefinition/moped-ext-LKFPunkte\");",
											"    const subExt = lkfPunkte?.extension?.find(subExt => subExt.url === subUrl);",
											"    return subExt?.valueUnsignedInt !== undefined ? subExt.valueUnsignedInt : \"N/A\";",
											"};",
											"",
											"// **Helper function to extract Money values**",
											"const getExtensionMoneyValue = (resource, url) => {",
											"    const ext = resource.extension?.find(ext => ext.url === url);",
											"    return ext?.valueMoney?.value !== undefined ? ext.valueMoney.value : \"N/A\";",
											"};",
											"",
											"// **Helper function to extract String values from Extensions**",
											"const getExtensionStringValue = (resource, url) => {",
											"    const ext = resource.extension?.find(ext => ext.url === url);",
											"    return ext?.valueString || \"N/A\";",
											"};",
											"",
											"// **Helper function to get first coding system entry**",
											"const getFirstCodingValue = (resource, path) => {",
											"    const field = path.reduce((obj, key) => obj?.[key], resource);",
											"    return field?.[0]?.code || \"N/A\";",
											"};",
											"// **Helper function to extract UnsignedInt values from Extensions**",
											"const getExtensionUnsignedIntValue = (resource, url) => {",
											"    const ext = resource.extension?.find(ext => ext.url === url);",
											"    return ext?.valueUnsignedInt !== undefined ? ext.valueUnsignedInt : \"N/A\";",
											"};",
											"",
											"",
											"// **Generate HTML Table**",
											"let htmlContent = `",
											"    <style>",
											"        table { width: 100%; border-collapse: collapse; }",
											"        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }",
											"        th { background-color: #f4f4f4; }",
											"    </style>",
											"    <h2>Moped LKFResponse Details</h2>",
											"    <table>",
											"        <thead>",
											"            <tr>",
											"                <th>ID</th>",
											"                <th>Use</th>",
											"                <th>Status</th>",
											"                <th>Patient</th>",
											"                <th>Erstellt</th>",
											"                <th>Versicherer</th>",
											"                <th>Leistungserbringer</th>",
											"                <th>Abrechnung Gruppe</th>",
											"                <th>Abrechnung Knoten</th>",
											"                <th>Coverage</th>",
											"                <th>LKF Punkte - Total</th>",
											"                <th>LKF Punkte - Leistungskomponente</th>",
											"                <th>LKF Punkte - Tageskomponente Kontaktpunkte</th>",
											"                <th>LKF Punkte - Zusatzpunkte Intensiv</th>",
											"                <th>LKF Punkte - Zusatzpunkte Mehrfachleistungen</th>",
											"                <th>LKF Punkte - Punkte Belagsdauerausreisser Unten Leistungskomponente</th>",
											"                <th>LKF Punkte - Punkte Belagsdauerausreisser Unten Tageskomponente</th>",
											"                <th>LKF Punkte - Zusatzpunkte Belagsdauerausreisser Nach Oben</th>",
											"                <th>LKF Punkte - Punkte Spezieller Bereiche Tageweise</th>",
											"                <th>LDF Punktewert Netto</th>",
											"                <th>Punkte LDF Pauschale</th>",
											"                <th>LDF Betrag Netto</th>",
											"                <th>Patientenanteil Angeh√∂rige</th>",
											"                <th>Patientenanteil</th>",
											"                <th>Beihilfenaquivalent</th>",
											"                <th>Forderungsbetrag Ausl√§nderverrechnung Regress</th>",
											"                <th>Rechnungsnummer KHLGF</th>",
											"                <th>Sonderleistungsnummer</th>",
											"                <th>Anzahl Sonderleistungen</th>",
											"                <th>Konstenmeldung ARK</th>",
											"            </tr>",
											"        </thead>",
											"        <tbody>`;",
											"",
											"// **Populate Table**",
											"lkfResponses.forEach(lkfResponse => {",
											"    htmlContent += `",
											"        <tr>",
											"            <td>${lkfResponse.id || \"N/A\"}</td>",
											"            <td>${lkfResponse.use || \"N/A\"}</td>",
											"            <td>${lkfResponse.status || \"N/A\"}</td>",
											"            <td>${lkfResponse.patient?.reference || \"N/A\"}</td>",
											"            <td>${lkfResponse.created || \"N/A\"}</td>",
											"            <td>${lkfResponse.insurer?.reference || \"N/A\"}</td>",
											"            <td>${lkfResponse.requestor?.reference || \"N/A\"}</td>",
											"            <td>${getFirstCodingValue(lkfResponse, [\"diagnosisRelatedGroup\", \"coding\"])}</td>",
											"            <td>${getCodingValue(lkfResponse, \"https://elga.moped.at/StructureDefinition/moped-ext-diagnoseKnoten\")}</td>",
											"            <td>${lkfResponse.insurance?.[0]?.coverage?.reference || \"N/A\"}</td>",
											"            <td>${getLKFPunkteValue(lkfResponse, \"PunkteTotal\")}</td>",
											"            <td>${getLKFPunkteValue(lkfResponse, \"Leistungskomponente\")}</td>",
											"            <td>${getLKFPunkteValue(lkfResponse, \"TageskomponenteKontaktpunkte\")}</td>",
											"            <td>${getLKFPunkteValue(lkfResponse, \"ZusatzpunkteIntensiv\")}</td>",
											"            <td>${getLKFPunkteValue(lkfResponse, \"ZusatzpunkteMehrfachleistungen\")}</td>",
											"            <td>${getLKFPunkteValue(lkfResponse, \"PunkteBelagsdauerausreisserUntenLeistungskomponente\")}</td>",
											"            <td>${getLKFPunkteValue(lkfResponse, \"PunkteBelagsdauerausreisserUntenTageskomponente\")}</td>",
											"            <td>${getLKFPunkteValue(lkfResponse, \"ZusatzpunkteBelagsdauerausreisserNachOben\")}</td>",
											"            <td>${getLKFPunkteValue(lkfResponse, \"PunkteSpeziellerBereicheTageweise\")}</td>",
											"            <td>${getExtensionDecimalValue(lkfResponse, \"https://elga.moped.at/StructureDefinition/moped-ext-LDFPunktewertNetto\")}</td>",
											"            <td>${getExtensionDecimalValue(lkfResponse, \"https://elga.moped.at/StructureDefinition/moped-ext-PunkteLDFPauschale\")}</td>",
											"            <td>${getExtensionDecimalValue(lkfResponse, \"https://elga.moped.at/StructureDefinition/moped-ext-LDFBetragNetto\")}</td>",
											"            <td>${getExtensionMoneyValue(lkfResponse, \"https://elga.moped.at/StructureDefinition/moped-ext-PatientenanteilAngehoerige\")}</td>",
											"            <td>${getExtensionMoneyValue(lkfResponse, \"https://elga.moped.at/StructureDefinition/moped-ext-Patientenanteil\")}</td>",
											"            <td>${getExtensionUnsignedIntValue(lkfResponse, \"https://elga.moped.at/StructureDefinition/moped-ext-Beihilfenaequivalent\")}</td>",
											"",
											"            <td>${getExtensionMoneyValue(lkfResponse, \"https://elga.moped.at/StructureDefinition/moped-ext-ForderungsbetragAuslaenderverrechnungRegress\")}</td>",
											"            <td>${getExtensionStringValue(lkfResponse, \"https://elga.moped.at/StructureDefinition/moped-ext-RechnungsnummerKHLGF\")}</td>",
											"            <td>${getExtensionStringValue(lkfResponse, \"https://elga.moped.at/StructureDefinition/moped-ext-Sonderleistungsnummer\")}</td>",
											"            <td>${getExtensionDecimalValue(lkfResponse, \"https://elga.moped.at/StructureDefinition/moped-ext-AnzahlSonderleistungen\")}</td>",
											"            <td>${getCodingValue(lkfResponse, \"https://elga.moped.at/StructureDefinition/moped-ext-KonstenmeldungARK\")}</td>",
											"        </tr>`;",
											"});",
											"",
											"htmlContent += `</tbody></table>`;",
											"pm.visualizer.set(htmlContent);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{server-base}}/ClaimResponse?status=active&use=claim&requestor.identifier=urn:ietf:rfc:3986|{{gda-oid-value}}&insurer.identifier=http://svc.co.at/CodeSystem/ecard-svt-cs|{{sv-identifier-value}}&request.claim-encounter.identifier={{gda-oid-value}}|{{aufnahmezahl}}",
									"host": [
										"{{server-base}}"
									],
									"path": [
										"ClaimResponse"
									],
									"query": [
										{
											"key": "status",
											"value": "active"
										},
										{
											"key": "use",
											"value": "claim"
										},
										{
											"key": "requestor.identifier",
											"value": "urn:ietf:rfc:3986|{{gda-oid-value}}"
										},
										{
											"key": "insurer.identifier",
											"value": "http://svc.co.at/CodeSystem/ecard-svt-cs|{{sv-identifier-value}}"
										},
										{
											"key": "request.claim-encounter.identifier",
											"value": "{{gda-oid-value}}|{{aufnahmezahl}}"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"auth": {
				"type": "basic",
				"basic": [
					{
						"key": "username",
						"value": "TBD",
						"type": "string"
					},
					{
						"key": "password",
						"value": "hackathon",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "SV",
			"item": [
				{
					"name": "4 VAE Antwort",
					"item": [
						{
							"name": "GET VAERequest offen (alle F√§lle der SV)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();",
											"const vaeRequests = response.entry",
											"    ?.map(entry => entry.resource)",
											"    ?.filter(resource => resource.resourceType === \"Claim\") || []; // Nur Claim (VAERequest) Ressourcen anzeigen",
											"",
											"// Helper-Funktion zur Extraktion von Erweiterungswerten",
											"const getExtensionValue = (resource, url) => {",
											"    const ext = resource.extension?.find(ext => ext.url.toLowerCase() === url.toLowerCase());",
											"    return ext ? (ext.valueUnsignedInt ?? ext.valueCoding?.code ?? \"N/A\") : \"N/A\";",
											"};",
											"",
											"// Helper-Funktion zur Extraktion von SupportingInfo-Boolean-Werten",
											"const getSupportingInfo = (resource, code) => {",
											"    const info = resource.supportingInfo?.find(info => ",
											"        info.code?.coding?.some(coding => coding.code === code)",
											"    );",
											"    return info ? (info.valueBoolean !== undefined ? (info.valueBoolean ? \"Ja\" : \"Nein\") : \"N/A\") : \"N/A\";",
											"};",
											"",
											"// Helper-Funktion zur Extraktion von Encounter-Referenzen",
											"const getEncounterReference = (resource, index) => {",
											"    return resource.encounter?.[index]?.reference || \"N/A\";",
											"};",
											"",
											"// Helper-Funktion zur Extraktion von Unfalltyp",
											"const getAccidentType = (resource) => {",
											"    return resource.accident?.type?.coding?.[0]?.code || \"N/A\";",
											"};",
											"",
											"// Unfalldatum soll nur angezeigt werden, wenn VerdachtArbeitsSch√ºlerunfall nicht \"0\" ist",
											"const getAccidentDate = (resource) => {",
											"    const accidentType = getAccidentType(resource);",
											"    return accidentType !== \"0\" ? (resource.accident?.date || \"N/A\") : \"N/A\";",
											"};",
											"",
											"let htmlContent = `",
											"    <style>",
											"        table { width: 100%; border-collapse: collapse; }",
											"        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }",
											"        th { background-color: #f4f4f4; }",
											"    </style>",
											"    <h2>VAERequest-Details</h2>",
											"    <table>",
											"        <thead>",
											"            <tr>",
											"                <th>ID</th>",
											"                <th>Erstellt am</th>",
											"                <th>Status</th>",
											"                <th>Nutzungsart</th>",
											"                <th>Patient</th>",
											"                <th>Sonderklasse</th>",
											"                <th>Verl√§ngerungstage</th>",
											"                <th>Versicherer</th>",
											"                <th>Leistungserbringer</th>",
											"                <th>Coverage</th>",
											"                <th>Verdacht Arbeits/Sch√ºlerunfall</th>",
											"                <th>Unfalldatum</th>",
											"                <th>Encounter</th>",
											"                <th>Transfer Encounter</th>",
											"                <th>Verdacht auf Fremdverschulden</th>",
											"            </tr>",
											"        </thead>",
											"        <tbody>`;",
											"",
											"vaeRequests.forEach(vae => {",
											"    htmlContent += `",
											"        <tr>",
											"            <td>${vae.id || \"N/A\"}</td>",
											"            <td>${vae.created || \"N/A\"}</td>",
											"            <td>${vae.status || \"N/A\"}</td>",
											"            <td>${vae.use || \"N/A\"}</td>",
											"            <td>${vae.patient?.reference || \"N/A\"}</td>",
											"            <td>${getExtensionValue(vae, \"https://elga.moped.at/StructureDefinition/moped-ext-sonderklasse\")}</td>",
											"            <td>${getExtensionValue(vae, \"https://elga.moped.at/StructureDefinition/moped-ext-verlaengerungstage\")}</td>",
											"            <td>${vae.insurer?.reference || \"N/A\"}</td>",
											"            <td>${vae.provider?.reference || \"N/A\"}</td>",
											"            <td>${vae.insurance?.[0]?.coverage?.reference || \"N/A\"}</td>",
											"            <td>${getAccidentType(vae)}</td>",
											"            <td>${getAccidentDate(vae)}</td>",
											"            <td>${getEncounterReference(vae, 0)}</td>",
											"            <td>${getEncounterReference(vae, 1)}</td>",
											"            <td>${getSupportingInfo(vae, \"FREVER\")}</td>",
											"        </tr>`;",
											"});",
											"",
											"htmlContent += `</tbody></table>`;",
											"pm.visualizer.set(htmlContent);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{server-base}}/Claim?status=active&use=preauthorization&insurer.identifier=http://svc.co.at/CodeSystem/ecard-svt-cs|{{sv-identifier-value}}&_has:ClaimResponse:request:status:not=active",
									"host": [
										"{{server-base}}"
									],
									"path": [
										"Claim"
									],
									"query": [
										{
											"key": "status",
											"value": "active"
										},
										{
											"key": "use",
											"value": "preauthorization"
										},
										{
											"key": "provider.identifier",
											"value": "urn:ietf:rfc:3986|{{gda-oid-value}}",
											"disabled": true
										},
										{
											"key": "insurer.identifier",
											"value": "http://svc.co.at/CodeSystem/ecard-svt-cs|{{sv-identifier-value}}"
										},
										{
											"key": "_has:ClaimResponse:request:status:not",
											"value": "active",
											"description": "nur unbeantwortete Requests"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET VAERequest offen (nur dieser Fall)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();",
											"const vaeRequests = response.entry",
											"    ?.map(entry => entry.resource)",
											"    ?.filter(resource => resource.resourceType === \"Claim\") || []; // Nur Claim (VAERequest) Ressourcen anzeigen",
											"",
											"// Helper-Funktion zur Extraktion von Erweiterungswerten",
											"const getExtensionValue = (resource, url) => {",
											"    const ext = resource.extension?.find(ext => ext.url.toLowerCase() === url.toLowerCase());",
											"    return ext ? (ext.valueUnsignedInt ?? ext.valueCoding?.code ?? \"N/A\") : \"N/A\";",
											"};",
											"",
											"// Helper-Funktion zur Extraktion von SupportingInfo-Boolean-Werten",
											"const getSupportingInfo = (resource, code) => {",
											"    const info = resource.supportingInfo?.find(info => ",
											"        info.code?.coding?.some(coding => coding.code === code)",
											"    );",
											"    return info ? (info.valueBoolean !== undefined ? (info.valueBoolean ? \"Ja\" : \"Nein\") : \"N/A\") : \"N/A\";",
											"};",
											"",
											"// Helper-Funktion zur Extraktion von Encounter-Referenzen",
											"const getEncounterReference = (resource, index) => {",
											"    return resource.encounter?.[index]?.reference || \"N/A\";",
											"};",
											"",
											"// Helper-Funktion zur Extraktion von Unfalltyp",
											"const getAccidentType = (resource) => {",
											"    return resource.accident?.type?.coding?.[0]?.code || \"N/A\";",
											"};",
											"",
											"// Unfalldatum soll nur angezeigt werden, wenn VerdachtArbeitsSch√ºlerunfall nicht \"0\" ist",
											"const getAccidentDate = (resource) => {",
											"    const accidentType = getAccidentType(resource);",
											"    return accidentType !== \"0\" ? (resource.accident?.date || \"N/A\") : \"N/A\";",
											"};",
											"",
											"let htmlContent = `",
											"    <style>",
											"        table { width: 100%; border-collapse: collapse; }",
											"        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }",
											"        th { background-color: #f4f4f4; }",
											"    </style>",
											"    <h2>VAERequest-Details</h2>",
											"    <table>",
											"        <thead>",
											"            <tr>",
											"                <th>ID</th>",
											"                <th>Erstellt am</th>",
											"                <th>Status</th>",
											"                <th>Nutzungsart</th>",
											"                <th>Patient</th>",
											"                <th>Sonderklasse</th>",
											"                <th>Verl√§ngerungstage</th>",
											"                <th>Versicherer</th>",
											"                <th>Leistungserbringer</th>",
											"                <th>Coverage</th>",
											"                <th>Verdacht Arbeits/Sch√ºlerunfall</th>",
											"                <th>Unfalldatum</th>",
											"                <th>Encounter</th>",
											"                <th>Transfer Encounter</th>",
											"                <th>Verdacht auf Fremdverschulden</th>",
											"            </tr>",
											"        </thead>",
											"        <tbody>`;",
											"",
											"vaeRequests.forEach(vae => {",
											"    htmlContent += `",
											"        <tr>",
											"            <td>${vae.id || \"N/A\"}</td>",
											"            <td>${vae.created || \"N/A\"}</td>",
											"            <td>${vae.status || \"N/A\"}</td>",
											"            <td>${vae.use || \"N/A\"}</td>",
											"            <td>${vae.patient?.reference || \"N/A\"}</td>",
											"            <td>${getExtensionValue(vae, \"https://elga.moped.at/StructureDefinition/moped-ext-sonderklasse\")}</td>",
											"            <td>${getExtensionValue(vae, \"https://elga.moped.at/StructureDefinition/moped-ext-verlaengerungstage\")}</td>",
											"            <td>${vae.insurer?.reference || \"N/A\"}</td>",
											"            <td>${vae.provider?.reference || \"N/A\"}</td>",
											"            <td>${vae.insurance?.[0]?.coverage?.reference || \"N/A\"}</td>",
											"            <td>${getAccidentType(vae)}</td>",
											"            <td>${getAccidentDate(vae)}</td>",
											"            <td>${getEncounterReference(vae, 0)}</td>",
											"            <td>${getEncounterReference(vae, 1)}</td>",
											"            <td>${getSupportingInfo(vae, \"FREVER\")}</td>",
											"        </tr>`;",
											"});",
											"",
											"htmlContent += `</tbody></table>`;",
											"pm.visualizer.set(htmlContent);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{server-base}}/Claim?status=active&use=preauthorization&provider.identifier=urn:ietf:rfc:3986|{{gda-oid-value}}&insurer.identifier=http://svc.co.at/CodeSystem/ecard-svt-cs|{{sv-identifier-value}}&_has:ClaimResponse:request:status:not=active&claim-encounter.identifier={{gda-oid-value}}|{{aufnahmezahl}}",
									"host": [
										"{{server-base}}"
									],
									"path": [
										"Claim"
									],
									"query": [
										{
											"key": "status",
											"value": "active"
										},
										{
											"key": "use",
											"value": "preauthorization"
										},
										{
											"key": "provider.identifier",
											"value": "urn:ietf:rfc:3986|{{gda-oid-value}}"
										},
										{
											"key": "insurer.identifier",
											"value": "http://svc.co.at/CodeSystem/ecard-svt-cs|{{sv-identifier-value}}"
										},
										{
											"key": "_has:ClaimResponse:request:status:not",
											"value": "active",
											"description": "nur unbeantwortete Requests"
										},
										{
											"key": "claim-encounter.identifier",
											"value": "{{gda-oid-value}}|{{aufnahmezahl}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "$beantworten",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"resourceType\": \"Parameters\",\n    \"parameter\": [\n        {\n            \"name\": \"MopedVAEResponse\",\n            \"resource\": {\n                \"resourceType\": \"ClaimResponse\",\n                \"meta\": {\n                    \"profile\": [\n                        \"https://elga.moped.at/StructureDefinition/MopedVAEResponse\"\n                    ]\n                },\n                \"extension\": [\n                    {\n                        \"url\": \"https://elga.moped.at/StructureDefinition/moped-ext-verpflegskostenBeitragsbefreiung\",\n                        \"valueCoding\": {\n                            \"system\": \"https://elga.moped.at/CodeSystem/VerpflegskostenBeitragsbefreiungCS\",\n                            \"code\": \"TBD_N\"\n                        }\n                    },\n                    {\n                        \"url\": \"https://elga.moped.at/StructureDefinition/moped-ext-vortageanzahlAufKostenbeitrag\",\n                        \"valueUnsignedInt\": TBD_2\n                    }\n                ],\n                \"status\": \"active\",\n                \"type\": {\n                    \"coding\": [\n                        {\n                            \"code\": \"institutional\"\n                        }\n                    ]\n                },\n                \"use\": \"preauthorization\",\n                \"patient\": {\n                    \"reference\": \"Patient?identifier=urn:oid:1.2.40.0.10.1.4.3.1|{{svnr}}\"\n                },\n                \"created\": \"2025-02-18\",\n                \"insurer\": {\n                    \"reference\": \"Organization?identifier=http://svc.co.at/CodeSystem/ecard-svt-cs|{{sv-identifier-value}}\"\n                },\n                \"requestor\": {\n                    \"reference\": \"Organization?identifier=urn:ietf:rfc:3986|{{gda-oid-value}}\"\n                },\n                \"request\": {\n                    \"reference\": \"Claim/{{vae_req_id}}\"\n                },\n                \"outcome\": \"complete\",\n                \"decision\": {\n                    \"coding\": [\n                        {\n                            \"system\": \"https://elga.moped.at/CodeSystem/VAEStatusCS\",\n                            \"code\": \"TBD_00\"\n                        }\n                    ]\n                },\n                \"preAuthPeriod\": {\n                    \"start\": \"TBD_2024-02-22\",\n                    \"end\": \"TBD_2024-08-21\"\n                },\n                \"insurance\": [\n                    {\n                        \"sequence\": 1,\n                        \"focal\": true,\n                        \"coverage\": {\n                            \"reference\": \"Coverage?identifier={{vdasID}}\"\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server-base}}/ClaimResponse/$beantworten",
									"host": [
										"{{server-base}}"
									],
									"path": [
										"ClaimResponse",
										"$beantworten"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET VAEResponse die gerade erstellt wurde (nur dieser Fall)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();",
											"const vaeResponses = response.entry",
											"    ?.map(entry => entry.resource)",
											"    ?.filter(resource => resource.resourceType === \"ClaimResponse\") || []; // Nur ClaimResponse (VAEResponse) Ressourcen anzeigen",
											"",
											"// Helper-Funktion zur Extraktion von Erweiterungswerten",
											"const getExtensionValue = (resource, url) => {",
											"    const ext = resource.extension?.find(ext => ext.url.toLowerCase() === url.toLowerCase());",
											"    return ext ? (ext.valueUnsignedInt ?? ext.valueCoding?.code ?? \"N/A\") : \"N/A\";",
											"};",
											"",
											"let htmlContent = `",
											"    <style>",
											"        table { width: 100%; border-collapse: collapse; }",
											"        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }",
											"        th { background-color: #f4f4f4; }",
											"    </style>",
											"    <h2>VAEResponse-Details</h2>",
											"    <table>",
											"        <thead>",
											"            <tr>",
											"                <th>ID</th>",
											"                <th>Erstellt am</th>",
											"                <th>Status</th>",
											"                <th>Nutzungsart</th>",
											"                <th>Patient</th>",
											"                <th>Versicherer</th>",
											"                <th>Angefragte VAERequest</th>",
											"                <th>Anfragender Leistungserbringer</th>",
											"                <th>Versicherung</th>",
											"               ",
											"                <th>VAEStatus</th>",
											"                <th>G√ºltigkeitszeitraum Start</th>",
											"                <th>G√ºltigkeitszeitraum Ende</th>",
											"                <th>Verpflegskosten-Beitragsbefreiung</th>",
											"                <th>Vortageanzahl auf Kostenbeitrag</th>",
											"            </tr>",
											"        </thead>",
											"        <tbody>`;",
											"",
											"vaeResponses.forEach(vae => {",
											"    htmlContent += `",
											"        <tr>",
											"            <td>${vae.id || \"N/A\"}</td>",
											"            <td>${vae.created || \"N/A\"}</td>",
											"            <td>${vae.status || \"N/A\"}</td>",
											"            <td>${vae.use || \"N/A\"}</td>",
											"            <td>${vae.patient?.reference || \"N/A\"}</td>",
											"            <td>${vae.insurer?.reference || \"N/A\"}</td>",
											"            <td>${vae.request?.reference || \"N/A\"}</td>",
											"            <td>${vae.requestor?.reference || \"N/A\"}</td>",
											"            <td>${vae.insurance?.[0]?.coverage?.reference || \"N/A\"}</td>",
											"            ",
											"            <td>${vae.decision?.coding?.[0]?.code || \"N/A\"}</td>",
											"            <td>${vae.preAuthPeriod?.start || \"N/A\"}</td>",
											"            <td>${vae.preAuthPeriod?.end || \"N/A\"}</td>",
											"            <td>${getExtensionValue(vae, \"https://elga.moped.at/StructureDefinition/moped-ext-VerpflegskostenBeitragsbefreiung\")}</td>",
											"            <td>${getExtensionValue(vae, \"https://elga.moped.at/StructureDefinition/moped-ext-VortageanzahlAufKostenbeitrag\")}</td>",
											"        </tr>`;",
											"});",
											"",
											"htmlContent += `</tbody></table>`;",
											"pm.visualizer.set(htmlContent);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server-base}}/ClaimResponse?status=active&use=preauthorization&requestor.identifier=urn:ietf:rfc:3986|{{gda-oid-value}}&insurer.identifier=http://svc.co.at/CodeSystem/ecard-svt-cs|{{sv-identifier-value}}&request.claim-encounter.identifier={{gda-oid-value}}|{{aufnahmezahl}}",
									"host": [
										"{{server-base}}"
									],
									"path": [
										"ClaimResponse"
									],
									"query": [
										{
											"key": "status",
											"value": "active"
										},
										{
											"key": "use",
											"value": "preauthorization"
										},
										{
											"key": "requestor.identifier",
											"value": "urn:ietf:rfc:3986|{{gda-oid-value}}"
										},
										{
											"key": "insurer.identifier",
											"value": "http://svc.co.at/CodeSystem/ecard-svt-cs|{{sv-identifier-value}}"
										},
										{
											"key": "request.claim-encounter.identifier",
											"value": "{{gda-oid-value}}|{{aufnahmezahl}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET VAERequest offen (alle F√§lle der SV)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();",
											"const vaeRequests = response.entry",
											"    ?.map(entry => entry.resource)",
											"    ?.filter(resource => resource.resourceType === \"Claim\") || []; // Nur Claim (VAERequest) Ressourcen anzeigen",
											"",
											"// Helper-Funktion zur Extraktion von Erweiterungswerten",
											"const getExtensionValue = (resource, url) => {",
											"    const ext = resource.extension?.find(ext => ext.url.toLowerCase() === url.toLowerCase());",
											"    return ext ? (ext.valueUnsignedInt ?? ext.valueCoding?.code ?? \"N/A\") : \"N/A\";",
											"};",
											"",
											"// Helper-Funktion zur Extraktion von SupportingInfo-Boolean-Werten",
											"const getSupportingInfo = (resource, code) => {",
											"    const info = resource.supportingInfo?.find(info => ",
											"        info.code?.coding?.some(coding => coding.code === code)",
											"    );",
											"    return info ? (info.valueBoolean !== undefined ? (info.valueBoolean ? \"Ja\" : \"Nein\") : \"N/A\") : \"N/A\";",
											"};",
											"",
											"// Helper-Funktion zur Extraktion von Encounter-Referenzen",
											"const getEncounterReference = (resource, index) => {",
											"    return resource.encounter?.[index]?.reference || \"N/A\";",
											"};",
											"",
											"// Helper-Funktion zur Extraktion von Unfalltyp",
											"const getAccidentType = (resource) => {",
											"    return resource.accident?.type?.coding?.[0]?.code || \"N/A\";",
											"};",
											"",
											"// Unfalldatum soll nur angezeigt werden, wenn VerdachtArbeitsSch√ºlerunfall nicht \"0\" ist",
											"const getAccidentDate = (resource) => {",
											"    const accidentType = getAccidentType(resource);",
											"    return accidentType !== \"0\" ? (resource.accident?.date || \"N/A\") : \"N/A\";",
											"};",
											"",
											"let htmlContent = `",
											"    <style>",
											"        table { width: 100%; border-collapse: collapse; }",
											"        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }",
											"        th { background-color: #f4f4f4; }",
											"    </style>",
											"    <h2>VAERequest-Details</h2>",
											"    <table>",
											"        <thead>",
											"            <tr>",
											"                <th>ID</th>",
											"                <th>Erstellt am</th>",
											"                <th>Status</th>",
											"                <th>Nutzungsart</th>",
											"                <th>Patient</th>",
											"                <th>Sonderklasse</th>",
											"                <th>Verl√§ngerungstage</th>",
											"                <th>Versicherer</th>",
											"                <th>Leistungserbringer</th>",
											"                <th>Coverage</th>",
											"                <th>Verdacht Arbeits/Sch√ºlerunfall</th>",
											"                <th>Unfalldatum</th>",
											"                <th>Encounter</th>",
											"                <th>Transfer Encounter</th>",
											"                <th>Verdacht auf Fremdverschulden</th>",
											"            </tr>",
											"        </thead>",
											"        <tbody>`;",
											"",
											"vaeRequests.forEach(vae => {",
											"    htmlContent += `",
											"        <tr>",
											"            <td>${vae.id || \"N/A\"}</td>",
											"            <td>${vae.created || \"N/A\"}</td>",
											"            <td>${vae.status || \"N/A\"}</td>",
											"            <td>${vae.use || \"N/A\"}</td>",
											"            <td>${vae.patient?.reference || \"N/A\"}</td>",
											"            <td>${getExtensionValue(vae, \"https://elga.moped.at/StructureDefinition/moped-ext-sonderklasse\")}</td>",
											"            <td>${getExtensionValue(vae, \"https://elga.moped.at/StructureDefinition/moped-ext-verlaengerungstage\")}</td>",
											"            <td>${vae.insurer?.reference || \"N/A\"}</td>",
											"            <td>${vae.provider?.reference || \"N/A\"}</td>",
											"            <td>${vae.insurance?.[0]?.coverage?.reference || \"N/A\"}</td>",
											"            <td>${getAccidentType(vae)}</td>",
											"            <td>${getAccidentDate(vae)}</td>",
											"            <td>${getEncounterReference(vae, 0)}</td>",
											"            <td>${getEncounterReference(vae, 1)}</td>",
											"            <td>${getSupportingInfo(vae, \"FREVER\")}</td>",
											"        </tr>`;",
											"});",
											"",
											"htmlContent += `</tbody></table>`;",
											"pm.visualizer.set(htmlContent);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{server-base}}/Claim?status=active&use=preauthorization&insurer.identifier=http://svc.co.at/CodeSystem/ecard-svt-cs|{{sv-identifier-value}}&_has:ClaimResponse:request:status:not=active",
									"host": [
										"{{server-base}}"
									],
									"path": [
										"Claim"
									],
									"query": [
										{
											"key": "status",
											"value": "active"
										},
										{
											"key": "use",
											"value": "preauthorization"
										},
										{
											"key": "provider.identifier",
											"value": "urn:ietf:rfc:3986|{{gda-oid-value}}",
											"disabled": true
										},
										{
											"key": "insurer.identifier",
											"value": "http://svc.co.at/CodeSystem/ecard-svt-cs|{{sv-identifier-value}}"
										},
										{
											"key": "_has:ClaimResponse:request:status:not",
											"value": "active",
											"description": "nur unbeantwortete Requests"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "GET Organization SV Stammdaten",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"const org = response.entry?.[0]?.resource || {}; // Extract the first organization",
									"",
									"let htmlContent = `",
									"    <style>",
									"        table { width: 100%; border-collapse: collapse; }",
									"        th, td { border: 1px solid #ddd; padding: 10px; text-align: left; }",
									"        th { background-color: #f4f4f4; }",
									"    </style>",
									"    <h2>Organization Details</h2>",
									"    <table>",
									"        <thead>",
									"            <tr>",
									"                <th>ID</th>",
									"                <th>Name</th>",
									"                ",
									"                <th>Identifier System</th>",
									"                <th>Identifier Value</th>",
									"               ",
									"                <th>Last Updated</th>",
									"                <th>Address</th>",
									"                <th>City</th>",
									"                <th>State</th>",
									"                <th>Postal Code</th>",
									"                <th>Country</th>",
									"            </tr>",
									"        </thead>",
									"        <tbody>",
									"            <tr>",
									"                <td>${org.id || \"N/A\"}</td>",
									"                <td>${org.name || \"N/A\"}</td>",
									"               ",
									"                <td>${org.identifier?.[0]?.system || \"N/A\"}</td>",
									"                <td>${org.identifier?.[0]?.value || \"N/A\"}</td>",
									"                ",
									"                <td>${org.meta?.lastUpdated || \"N/A\"}</td>",
									"                <td>${org.contact?.[0]?.address?.line?.join(\", \") || \"N/A\"}</td>",
									"                <td>${org.contact?.[0]?.address?.city || \"N/A\"}</td>",
									"                <td>${org.contact?.[0]?.address?.state || \"N/A\"}</td>",
									"                <td>${org.contact?.[0]?.address?.postalCode || \"N/A\"}</td>",
									"                <td>${org.contact?.[0]?.address?.country || \"N/A\"}</td>",
									"            </tr>",
									"        </tbody>",
									"    </table>`;",
									"",
									"pm.visualizer.set(htmlContent);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{server-base}}/Organization?identifier=http://svc.co.at/CodeSystem/ecard-svt-cs|{{sv-identifier-value}}",
							"host": [
								"{{server-base}}"
							],
							"path": [
								"Organization"
							],
							"query": [
								{
									"key": "identifier",
									"value": "http://svc.co.at/CodeSystem/ecard-svt-cs|{{sv-identifier-value}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Encounter (nur dieser Fall)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"",
									"// **Filterung der Encounters (nur MopedEncounter)**",
									"const encounters = response.entry",
									"    ?.map(entry => entry.resource)",
									"    ?.filter(resource => ",
									"        resource.resourceType === \"Encounter\" &&",
									"        resource.meta?.profile?.includes(\"https://elga.moped.at/StructureDefinition/MopedEncounterSV\")",
									"    ) || []; ",
									"",
									"// Helper-Funktion zur Extraktion von Identifier-Werten",
									"const getIdentifierValue = (resource, code) => {",
									"    return resource.identifier?.find(id => ",
									"        id.type?.coding?.some(coding => coding.code === code)",
									"    )?.value || \"N/A\";",
									"};",
									"",
									"// Helper-Funktion zur Extraktion von Coding-Werten",
									"const getCodingValue = (resource, path) => {",
									"    const field = path.reduce((obj, key) => obj?.[key], resource);",
									"    return field?.coding?.[0]?.code || \"N/A\";",
									"};",
									"",
									"// Helper-Funktion zur Extraktion von Reason-Werten",
									"const getReason = (resource) => {",
									"    return resource.reason?.[0]?.value?.[0]?.concept?.coding?.[0]?.code || \"N/A\";",
									"};",
									"",
									"// Helper-Funktion zur Extraktion von Diagnose-Werten",
									"const getDiagnosis = (resource) => {",
									"    return resource.diagnosis?.[0]?.condition?.[0]?.concept?.coding?.[0]?.display || \"N/A\";",
									"};",
									"",
									"// Helper-Funktion zur Extraktion von Extensions-Werten",
									"const getExtensionValue = (resource, url) => {",
									"    const ext = resource.admission?.extension?.find(ext => ext.url === url) ||",
									"                resource.extension?.find(ext => ext.url === url);",
									"    return ext ? (ext.valueCoding?.code || ext.valueDate || ext.valueCode || \"N/A\") : \"N/A\";",
									"};",
									"",
									"let htmlContent = `",
									"    <style>",
									"        table { width: 100%; border-collapse: collapse; }",
									"        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }",
									"        th { background-color: #f4f4f4; }",
									"    </style>",
									"    <h2>Encounter-Details</h2>",
									"    <table>",
									"        <thead>",
									"            <tr>",
									"                <th>ID</th>",
									"                <th>Aufnahmezahl</th>",
									"                <th>Datensatz-ID</th>",
									"                <th>Status</th>",
									"                <th>Behandlungsart</th>",
									"                <th>Aufnahmeart</th>",
									"                <th>Patient</th>",
									"                <th>Leistungserbringer</th>",
									"                <th>Aufnahmezeitpunkt</th>",
									"                <th>Entlassungszeitpunkt</th>",
									"                ",
									"                <th>Ursache</th>",
									"                <th>Diagnose</th>",
									"                <th>Aufnahmeart2</th>",
									"                <th>Entlassungsart</th>",
									"                <th>Account</th>",
									"                <th>Transportart</th>",
									"                <th>Unfalldatum</th>",
									"            </tr>",
									"        </thead>",
									"        <tbody>`;",
									"",
									"// **Encounter Tabelle**",
									"encounters.forEach(encounter => {",
									"    htmlContent += `",
									"        <tr>",
									"            <td>${encounter.id || \"N/A\"}</td>",
									"            <td>${getIdentifierValue(encounter, \"VN\")}</td>",
									"            <td>${getIdentifierValue(encounter, \"ANON\")}</td>",
									"            <td>${encounter.status || \"N/A\"}</td>",
									"            <td>${getCodingValue(encounter, [\"class\", 0])}</td>",
									"            <td>${getCodingValue(encounter, [\"class\", 1])}</td>",
									"            <td>${encounter.subject?.reference || \"N/A\"}</td>",
									"            <td>${encounter.serviceProvider?.reference || \"N/A\"}</td>",
									"            <td>${encounter.actualPeriod?.start || \"N/A\"}</td>",
									"            <td>${encounter.actualPeriod?.end || \"N/A\"}</td>",
									"           ",
									"            <td>${getReason(encounter)}</td>",
									"            <td>${getDiagnosis(encounter)}</td>",
									"            <td>${getExtensionValue(encounter, \"https://elga.moped.at/StructureDefinition/moped-ext-aufnahmeart\")}</td>",
									"            <td>${encounter.admission?.dischargeDisposition || \"N/A\"}</td>",
									"            <td>${encounter.account?.[0]?.reference || \"N/A\"}</td>",
									"            <td>${getExtensionValue(encounter, \"https://elga.moped.at/StructureDefinition/moped-ext-transportart\")}</td>",
									"            <td>${getExtensionValue(encounter, \"https://elga.moped.at/StructureDefinition/moped-ext-unfalldatum\")}</td>",
									"        </tr>`;",
									"});",
									"",
									"htmlContent += `</tbody></table>`;",
									"pm.visualizer.set(htmlContent);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{server-base}}/Encounter?identifier={{gda-oid-value}}|{{aufnahmezahl}}",
							"host": [
								"{{server-base}}"
							],
							"path": [
								"Encounter"
							],
							"query": [
								{
									"key": "identifier",
									"value": "{{gda-oid-value}}|{{aufnahmezahl}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Patient",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"const patients = response.entry",
									"    ?.map(entry => entry.resource)",
									"    ?.filter(resource => resource.resourceType === \"Patient\") || []; // Ensures only Patient resources are displayed",
									"",
									"// Helper function to extract identifier values",
									"const getIdentifierValue = (resource, system) => {",
									"    return resource.identifier?.find(id => id.system === system)?.value || \"N/A\";",
									"};",
									"",
									"// Helper function to extract extension values",
									"const getExtensionValue = (resource, url) => {",
									"    const ext = resource.extension?.find(ext => ext.url === url);",
									"    return ext ? (ext.valueCodeableConcept?.coding?.[0]?.display || ext.valueString || \"N/A\") : \"N/A\";",
									"};",
									"",
									"// Helper function to get the address",
									"const getAddress = (resource) => {",
									"    const address = resource.address?.[0]; // Assuming primary address",
									"    if (!address) return \"N/A\";",
									"",
									"    const street = address.line?.[0] || \"N/A\";",
									"    const postalCode = address.postalCode || \"N/A\";",
									"    const city = address.city || \"N/A\";",
									"    const state = address.state || \"N/A\";",
									"    const country = address.country || \"N/A\";",
									"    const municipalityCode = getExtensionValue(address, \"https://elga.moped.at/StructureDefinition/AddressMunicipalityCode\");",
									"",
									"    return `${street}, ${postalCode} ${city}, ${state}, ${country} (Gemeindecode: ${municipalityCode})`;",
									"};",
									"",
									"let htmlContent = `",
									"    <style>",
									"        table { width: 100%; border-collapse: collapse; }",
									"        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }",
									"        th { background-color: #f4f4f4; }",
									"    </style>",
									"    <h2>Patientendetails</h2>",
									"    <table>",
									"        <thead>",
									"            <tr>",
									"                <th>ID</th>",
									"                <th>Sozialversicherungsnummer</th>",
									"                <th>Name</th>",
									"                <th>Geschlecht</th>",
									"                <th>Geburtsdatum</th>",
									"                ",
									"                <th>Adresse</th>",
									"            </tr>",
									"        </thead>",
									"        <tbody>`;",
									"",
									"patients.forEach(patient => {",
									"    const name = patient.name?.[0];",
									"    const fullName = name ? `${name.given?.join(\" \")} ${name.family}` : \"N/A\";",
									"",
									"    htmlContent += `",
									"        <tr>",
									"            <td>${patient.id || \"N/A\"}</td>",
									"            <td>${getIdentifierValue(patient, \"urn:oid:1.2.40.0.10.1.4.3.1\")}</td>",
									"            <td>${fullName}</td>",
									"            <td>${patient.gender || \"N/A\"}</td>",
									"            <td>${patient.birthDate || \"N/A\"}</td>",
									"            ",
									"            <td>${getAddress(patient)}</td>",
									"        </tr>`;",
									"});",
									"",
									"htmlContent += `</tbody></table>`;",
									"pm.visualizer.set(htmlContent);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{server-base}}/Patient?identifier=urn:oid:1.2.40.0.10.1.4.3.1|{{svnr}}",
							"host": [
								"{{server-base}}"
							],
							"path": [
								"Patient"
							],
							"query": [
								{
									"key": "identifier",
									"value": "urn:oid:1.2.40.0.10.1.4.3.1|{{svnr}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET LKFResponse (alle F√§lle der SV)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"",
									"// **Filter LKFResponses**",
									"const lkfResponses = response.entry",
									"    ?.map(entry => entry.resource)",
									"    ?.filter(resource => ",
									"        resource.resourceType === \"ClaimResponse\" &&",
									"        Array.isArray(resource.meta?.profile) &&",
									"        resource.meta.profile.includes(\"https://elga.moped.at/StructureDefinition/MopedLKFResponse\")",
									"    ) || [];",
									"",
									"// **Helper function to extract Coding values**",
									"const getCodingValue = (resource, url) => {",
									"    const extension = resource.extension?.find(ext => ext.url === url);",
									"    return extension?.valueCoding?.code || \"N/A\";",
									"};",
									"",
									"// **Helper function to extract Decimal values from Extensions**",
									"const getExtensionDecimalValue = (resource, url) => {",
									"    const ext = resource.extension?.find(ext => ext.url === url);",
									"    return ext?.valueDecimal !== undefined ? ext.valueDecimal : \"N/A\";",
									"};",
									"",
									"// **Helper function to extract UnsignedInt values from LKFPunkte**",
									"const getLKFPunkteValue = (resource, subUrl) => {",
									"    const lkfPunkte = resource.extension?.find(ext => ext.url === \"https://elga.moped.at/StructureDefinition/moped-ext-LKFPunkte\");",
									"    const subExt = lkfPunkte?.extension?.find(subExt => subExt.url === subUrl);",
									"    return subExt?.valueUnsignedInt !== undefined ? subExt.valueUnsignedInt : \"N/A\";",
									"};",
									"",
									"// **Helper function to extract Money values**",
									"const getExtensionMoneyValue = (resource, url) => {",
									"    const ext = resource.extension?.find(ext => ext.url === url);",
									"    return ext?.valueMoney?.value !== undefined ? ext.valueMoney.value : \"N/A\";",
									"};",
									"",
									"// **Helper function to extract String values from Extensions**",
									"const getExtensionStringValue = (resource, url) => {",
									"    const ext = resource.extension?.find(ext => ext.url === url);",
									"    return ext?.valueString || \"N/A\";",
									"};",
									"",
									"// **Helper function to get first coding system entry**",
									"const getFirstCodingValue = (resource, path) => {",
									"    const field = path.reduce((obj, key) => obj?.[key], resource);",
									"    return field?.[0]?.code || \"N/A\";",
									"};",
									"// **Helper function to extract UnsignedInt values from Extensions**",
									"const getExtensionUnsignedIntValue = (resource, url) => {",
									"    const ext = resource.extension?.find(ext => ext.url === url);",
									"    return ext?.valueUnsignedInt !== undefined ? ext.valueUnsignedInt : \"N/A\";",
									"};",
									"",
									"",
									"// **Generate HTML Table**",
									"let htmlContent = `",
									"    <style>",
									"        table { width: 100%; border-collapse: collapse; }",
									"        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }",
									"        th { background-color: #f4f4f4; }",
									"    </style>",
									"    <h2>Moped LKFResponse Details</h2>",
									"    <table>",
									"        <thead>",
									"            <tr>",
									"                <th>ID</th>",
									"                <th>Use</th>",
									"                <th>Status</th>",
									"                <th>Patient</th>",
									"                <th>Erstellt</th>",
									"                <th>Versicherer</th>",
									"                <th>Leistungserbringer</th>",
									"                <th>Abrechnung Gruppe</th>",
									"                <th>Abrechnung Knoten</th>",
									"                <th>Coverage</th>",
									"                <th>LKF Punkte - Total</th>",
									"                <th>LKF Punkte - Leistungskomponente</th>",
									"                <th>LKF Punkte - Tageskomponente Kontaktpunkte</th>",
									"                <th>LKF Punkte - Zusatzpunkte Intensiv</th>",
									"                <th>LKF Punkte - Zusatzpunkte Mehrfachleistungen</th>",
									"                <th>LKF Punkte - Punkte Belagsdauerausreisser Unten Leistungskomponente</th>",
									"                <th>LKF Punkte - Punkte Belagsdauerausreisser Unten Tageskomponente</th>",
									"                <th>LKF Punkte - Zusatzpunkte Belagsdauerausreisser Nach Oben</th>",
									"                <th>LKF Punkte - Punkte Spezieller Bereiche Tageweise</th>",
									"                <th>LDF Punktewert Netto</th>",
									"                <th>Punkte LDF Pauschale</th>",
									"                <th>LDF Betrag Netto</th>",
									"                <th>Patientenanteil Angeh√∂rige</th>",
									"                <th>Patientenanteil</th>",
									"                <th>Beihilfenaquivalent</th>",
									"                <th>Forderungsbetrag Ausl√§nderverrechnung Regress</th>",
									"                <th>Rechnungsnummer KHLGF</th>",
									"                <th>Sonderleistungsnummer</th>",
									"                <th>Anzahl Sonderleistungen</th>",
									"                <th>Konstenmeldung ARK</th>",
									"            </tr>",
									"        </thead>",
									"        <tbody>`;",
									"",
									"// **Populate Table**",
									"lkfResponses.forEach(lkfResponse => {",
									"    htmlContent += `",
									"        <tr>",
									"            <td>${lkfResponse.id || \"N/A\"}</td>",
									"            <td>${lkfResponse.use || \"N/A\"}</td>",
									"            <td>${lkfResponse.status || \"N/A\"}</td>",
									"            <td>${lkfResponse.patient?.reference || \"N/A\"}</td>",
									"            <td>${lkfResponse.created || \"N/A\"}</td>",
									"            <td>${lkfResponse.insurer?.reference || \"N/A\"}</td>",
									"            <td>${lkfResponse.requestor?.reference || \"N/A\"}</td>",
									"            <td>${getFirstCodingValue(lkfResponse, [\"diagnosisRelatedGroup\", \"coding\"])}</td>",
									"            <td>${getCodingValue(lkfResponse, \"https://elga.moped.at/StructureDefinition/moped-ext-diagnoseKnoten\")}</td>",
									"            <td>${lkfResponse.insurance?.[0]?.coverage?.reference || \"N/A\"}</td>",
									"            <td>${getLKFPunkteValue(lkfResponse, \"PunkteTotal\")}</td>",
									"            <td>${getLKFPunkteValue(lkfResponse, \"Leistungskomponente\")}</td>",
									"            <td>${getLKFPunkteValue(lkfResponse, \"TageskomponenteKontaktpunkte\")}</td>",
									"            <td>${getLKFPunkteValue(lkfResponse, \"ZusatzpunkteIntensiv\")}</td>",
									"            <td>${getLKFPunkteValue(lkfResponse, \"ZusatzpunkteMehrfachleistungen\")}</td>",
									"            <td>${getLKFPunkteValue(lkfResponse, \"PunkteBelagsdauerausreisserUntenLeistungskomponente\")}</td>",
									"            <td>${getLKFPunkteValue(lkfResponse, \"PunkteBelagsdauerausreisserUntenTageskomponente\")}</td>",
									"            <td>${getLKFPunkteValue(lkfResponse, \"ZusatzpunkteBelagsdauerausreisserNachOben\")}</td>",
									"            <td>${getLKFPunkteValue(lkfResponse, \"PunkteSpeziellerBereicheTageweise\")}</td>",
									"            <td>${getExtensionDecimalValue(lkfResponse, \"https://elga.moped.at/StructureDefinition/moped-ext-LDFPunktewertNetto\")}</td>",
									"            <td>${getExtensionDecimalValue(lkfResponse, \"https://elga.moped.at/StructureDefinition/moped-ext-PunkteLDFPauschale\")}</td>",
									"            <td>${getExtensionDecimalValue(lkfResponse, \"https://elga.moped.at/StructureDefinition/moped-ext-LDFBetragNetto\")}</td>",
									"            <td>${getExtensionMoneyValue(lkfResponse, \"https://elga.moped.at/StructureDefinition/moped-ext-PatientenanteilAngehoerige\")}</td>",
									"            <td>${getExtensionMoneyValue(lkfResponse, \"https://elga.moped.at/StructureDefinition/moped-ext-Patientenanteil\")}</td>",
									"            <td>${getExtensionUnsignedIntValue(lkfResponse, \"https://elga.moped.at/StructureDefinition/moped-ext-Beihilfenaequivalent\")}</td>",
									"",
									"            <td>${getExtensionMoneyValue(lkfResponse, \"https://elga.moped.at/StructureDefinition/moped-ext-ForderungsbetragAuslaenderverrechnungRegress\")}</td>",
									"            <td>${getExtensionStringValue(lkfResponse, \"https://elga.moped.at/StructureDefinition/moped-ext-RechnungsnummerKHLGF\")}</td>",
									"            <td>${getExtensionStringValue(lkfResponse, \"https://elga.moped.at/StructureDefinition/moped-ext-Sonderleistungsnummer\")}</td>",
									"            <td>${getExtensionDecimalValue(lkfResponse, \"https://elga.moped.at/StructureDefinition/moped-ext-AnzahlSonderleistungen\")}</td>",
									"            <td>${getCodingValue(lkfResponse, \"https://elga.moped.at/StructureDefinition/moped-ext-KonstenmeldungARK\")}</td>",
									"        </tr>`;",
									"});",
									"",
									"htmlContent += `</tbody></table>`;",
									"pm.visualizer.set(htmlContent);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{server-base}}/ClaimResponse?status=active&use=claim&insurer.identifier=http://svc.co.at/CodeSystem/ecard-svt-cs|{{sv-identifier-value}}",
							"host": [
								"{{server-base}}"
							],
							"path": [
								"ClaimResponse"
							],
							"query": [
								{
									"key": "status",
									"value": "active"
								},
								{
									"key": "use",
									"value": "claim"
								},
								{
									"key": "requestor.identifier",
									"value": "urn:ietf:rfc:3986|{{gda-oid-value}}",
									"disabled": true
								},
								{
									"key": "insurer.identifier",
									"value": "http://svc.co.at/CodeSystem/ecard-svt-cs|{{sv-identifier-value}}"
								},
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET LKFResponse (nur dieser Fall)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"",
									"// **Filter LKFResponses**",
									"const lkfResponses = response.entry",
									"    ?.map(entry => entry.resource)",
									"    ?.filter(resource => ",
									"        resource.resourceType === \"ClaimResponse\" &&",
									"        Array.isArray(resource.meta?.profile) &&",
									"        resource.meta.profile.includes(\"https://elga.moped.at/StructureDefinition/MopedLKFResponse\")",
									"    ) || [];",
									"",
									"// **Helper function to extract Coding values**",
									"const getCodingValue = (resource, url) => {",
									"    const extension = resource.extension?.find(ext => ext.url === url);",
									"    return extension?.valueCoding?.code || \"N/A\";",
									"};",
									"",
									"// **Helper function to extract Decimal values from Extensions**",
									"const getExtensionDecimalValue = (resource, url) => {",
									"    const ext = resource.extension?.find(ext => ext.url === url);",
									"    return ext?.valueDecimal !== undefined ? ext.valueDecimal : \"N/A\";",
									"};",
									"",
									"// **Helper function to extract UnsignedInt values from LKFPunkte**",
									"const getLKFPunkteValue = (resource, subUrl) => {",
									"    const lkfPunkte = resource.extension?.find(ext => ext.url === \"https://elga.moped.at/StructureDefinition/moped-ext-LKFPunkte\");",
									"    const subExt = lkfPunkte?.extension?.find(subExt => subExt.url === subUrl);",
									"    return subExt?.valueUnsignedInt !== undefined ? subExt.valueUnsignedInt : \"N/A\";",
									"};",
									"",
									"// **Helper function to extract Money values**",
									"const getExtensionMoneyValue = (resource, url) => {",
									"    const ext = resource.extension?.find(ext => ext.url === url);",
									"    return ext?.valueMoney?.value !== undefined ? ext.valueMoney.value : \"N/A\";",
									"};",
									"",
									"// **Helper function to extract String values from Extensions**",
									"const getExtensionStringValue = (resource, url) => {",
									"    const ext = resource.extension?.find(ext => ext.url === url);",
									"    return ext?.valueString || \"N/A\";",
									"};",
									"",
									"// **Helper function to get first coding system entry**",
									"const getFirstCodingValue = (resource, path) => {",
									"    const field = path.reduce((obj, key) => obj?.[key], resource);",
									"    return field?.[0]?.code || \"N/A\";",
									"};",
									"// **Helper function to extract UnsignedInt values from Extensions**",
									"const getExtensionUnsignedIntValue = (resource, url) => {",
									"    const ext = resource.extension?.find(ext => ext.url === url);",
									"    return ext?.valueUnsignedInt !== undefined ? ext.valueUnsignedInt : \"N/A\";",
									"};",
									"",
									"",
									"// **Generate HTML Table**",
									"let htmlContent = `",
									"    <style>",
									"        table { width: 100%; border-collapse: collapse; }",
									"        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }",
									"        th { background-color: #f4f4f4; }",
									"    </style>",
									"    <h2>Moped LKFResponse Details</h2>",
									"    <table>",
									"        <thead>",
									"            <tr>",
									"                <th>ID</th>",
									"                <th>Use</th>",
									"                <th>Status</th>",
									"                <th>Patient</th>",
									"                <th>Erstellt</th>",
									"                <th>Versicherer</th>",
									"                <th>Leistungserbringer</th>",
									"                <th>Abrechnung Gruppe</th>",
									"                <th>Abrechnung Knoten</th>",
									"                <th>Coverage</th>",
									"                <th>LKF Punkte - Total</th>",
									"                <th>LKF Punkte - Leistungskomponente</th>",
									"                <th>LKF Punkte - Tageskomponente Kontaktpunkte</th>",
									"                <th>LKF Punkte - Zusatzpunkte Intensiv</th>",
									"                <th>LKF Punkte - Zusatzpunkte Mehrfachleistungen</th>",
									"                <th>LKF Punkte - Punkte Belagsdauerausreisser Unten Leistungskomponente</th>",
									"                <th>LKF Punkte - Punkte Belagsdauerausreisser Unten Tageskomponente</th>",
									"                <th>LKF Punkte - Zusatzpunkte Belagsdauerausreisser Nach Oben</th>",
									"                <th>LKF Punkte - Punkte Spezieller Bereiche Tageweise</th>",
									"                <th>LDF Punktewert Netto</th>",
									"                <th>Punkte LDF Pauschale</th>",
									"                <th>LDF Betrag Netto</th>",
									"                <th>Patientenanteil Angeh√∂rige</th>",
									"                <th>Patientenanteil</th>",
									"                <th>Beihilfenaquivalent</th>",
									"                <th>Forderungsbetrag Ausl√§nderverrechnung Regress</th>",
									"                <th>Rechnungsnummer KHLGF</th>",
									"                <th>Sonderleistungsnummer</th>",
									"                <th>Anzahl Sonderleistungen</th>",
									"                <th>Konstenmeldung ARK</th>",
									"            </tr>",
									"        </thead>",
									"        <tbody>`;",
									"",
									"// **Populate Table**",
									"lkfResponses.forEach(lkfResponse => {",
									"    htmlContent += `",
									"        <tr>",
									"            <td>${lkfResponse.id || \"N/A\"}</td>",
									"            <td>${lkfResponse.use || \"N/A\"}</td>",
									"            <td>${lkfResponse.status || \"N/A\"}</td>",
									"            <td>${lkfResponse.patient?.reference || \"N/A\"}</td>",
									"            <td>${lkfResponse.created || \"N/A\"}</td>",
									"            <td>${lkfResponse.insurer?.reference || \"N/A\"}</td>",
									"            <td>${lkfResponse.requestor?.reference || \"N/A\"}</td>",
									"            <td>${getFirstCodingValue(lkfResponse, [\"diagnosisRelatedGroup\", \"coding\"])}</td>",
									"            <td>${getCodingValue(lkfResponse, \"https://elga.moped.at/StructureDefinition/moped-ext-diagnoseKnoten\")}</td>",
									"            <td>${lkfResponse.insurance?.[0]?.coverage?.reference || \"N/A\"}</td>",
									"            <td>${getLKFPunkteValue(lkfResponse, \"PunkteTotal\")}</td>",
									"            <td>${getLKFPunkteValue(lkfResponse, \"Leistungskomponente\")}</td>",
									"            <td>${getLKFPunkteValue(lkfResponse, \"TageskomponenteKontaktpunkte\")}</td>",
									"            <td>${getLKFPunkteValue(lkfResponse, \"ZusatzpunkteIntensiv\")}</td>",
									"            <td>${getLKFPunkteValue(lkfResponse, \"ZusatzpunkteMehrfachleistungen\")}</td>",
									"            <td>${getLKFPunkteValue(lkfResponse, \"PunkteBelagsdauerausreisserUntenLeistungskomponente\")}</td>",
									"            <td>${getLKFPunkteValue(lkfResponse, \"PunkteBelagsdauerausreisserUntenTageskomponente\")}</td>",
									"            <td>${getLKFPunkteValue(lkfResponse, \"ZusatzpunkteBelagsdauerausreisserNachOben\")}</td>",
									"            <td>${getLKFPunkteValue(lkfResponse, \"PunkteSpeziellerBereicheTageweise\")}</td>",
									"            <td>${getExtensionDecimalValue(lkfResponse, \"https://elga.moped.at/StructureDefinition/moped-ext-LDFPunktewertNetto\")}</td>",
									"            <td>${getExtensionDecimalValue(lkfResponse, \"https://elga.moped.at/StructureDefinition/moped-ext-PunkteLDFPauschale\")}</td>",
									"            <td>${getExtensionDecimalValue(lkfResponse, \"https://elga.moped.at/StructureDefinition/moped-ext-LDFBetragNetto\")}</td>",
									"            <td>${getExtensionMoneyValue(lkfResponse, \"https://elga.moped.at/StructureDefinition/moped-ext-PatientenanteilAngehoerige\")}</td>",
									"            <td>${getExtensionMoneyValue(lkfResponse, \"https://elga.moped.at/StructureDefinition/moped-ext-Patientenanteil\")}</td>",
									"            <td>${getExtensionUnsignedIntValue(lkfResponse, \"https://elga.moped.at/StructureDefinition/moped-ext-Beihilfenaequivalent\")}</td>",
									"",
									"            <td>${getExtensionMoneyValue(lkfResponse, \"https://elga.moped.at/StructureDefinition/moped-ext-ForderungsbetragAuslaenderverrechnungRegress\")}</td>",
									"            <td>${getExtensionStringValue(lkfResponse, \"https://elga.moped.at/StructureDefinition/moped-ext-RechnungsnummerKHLGF\")}</td>",
									"            <td>${getExtensionStringValue(lkfResponse, \"https://elga.moped.at/StructureDefinition/moped-ext-Sonderleistungsnummer\")}</td>",
									"            <td>${getExtensionDecimalValue(lkfResponse, \"https://elga.moped.at/StructureDefinition/moped-ext-AnzahlSonderleistungen\")}</td>",
									"            <td>${getCodingValue(lkfResponse, \"https://elga.moped.at/StructureDefinition/moped-ext-KonstenmeldungARK\")}</td>",
									"        </tr>`;",
									"});",
									"",
									"htmlContent += `</tbody></table>`;",
									"pm.visualizer.set(htmlContent);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{server-base}}/ClaimResponse?status=active&use=claim&insurer.identifier=http://svc.co.at/CodeSystem/ecard-svt-cs|{{sv-identifier-value}}&request.claim-encounter.identifier={{gda-oid-value}}|{{aufnahmezahl}}",
							"host": [
								"{{server-base}}"
							],
							"path": [
								"ClaimResponse"
							],
							"query": [
								{
									"key": "status",
									"value": "active"
								},
								{
									"key": "use",
									"value": "claim"
								},
								{
									"key": "requestor.identifier",
									"value": "urn:ietf:rfc:3986|{{gda-oid-value}}",
									"disabled": true
								},
								{
									"key": "insurer.identifier",
									"value": "http://svc.co.at/CodeSystem/ecard-svt-cs|{{sv-identifier-value}}"
								},
								{
									"key": "request.claim-encounter.identifier",
									"value": "{{gda-oid-value}}|{{aufnahmezahl}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "basic",
				"basic": [
					{
						"key": "username",
						"value": "TBD",
						"type": "string"
					},
					{
						"key": "password",
						"value": "hackathon",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "LGF",
			"item": [
				{
					"name": "9 Freigabe",
					"item": [
						{
							"name": "GET LKFRequest offen (alle F√§lle des LGF)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();",
											"",
											"// **Filterung der LKFRequest (Claim) Ressourcen**",
											"const claims = response.entry",
											"    ?.map(entry => entry.resource)",
											"    ?.filter(resource => ",
											"        resource.resourceType === \"Claim\" &&",
											"        Array.isArray(resource.meta?.profile) &&",
											"        resource.meta.profile.includes(\"https://elga.moped.at/StructureDefinition/MopedLKFRequest\")",
											"    ) || [];",
											"",
											"// **Helper-Funktion: Extraktion von Coding-Werten**",
											"const getCodingValue = (resource, path) => {",
											"    const field = path.reduce((obj, key) => obj?.[key], resource);",
											"    return field?.coding?.[0]?.code || \"N/A\";",
											"};",
											"",
											"// **Helper-Funktion: Extraktion von Extensions-Werten**",
											"const getExtensionValue = (resource, url) => {",
											"    const ext = resource.extension?.find(ext => ext.url === url);",
											"    return ext ? (ext.valueCoding?.code || ext.valueString || \"N/A\") : \"N/A\";",
											"};",
											"",
											"// **Helper-Funktion: Extraktion von LKF-Punkten (komplexe Extension)**",
											"const getLKFPoints = (resource, subfield) => {",
											"    const ext = resource.extension?.find(ext => ext.url === \"https://elga.moped.at/StructureDefinition/moped-ext-LKFPunkte\");",
											"    const subExt = ext?.extension?.find(e => e.url === subfield);",
											"    return subExt ? subExt.valueUnsignedInt || 0 : \"N/A\";",
											"};",
											"",
											"// **Helper-Funktion: Extraktion von Diagnosen mit Haupt-/Zusatzdiagnose**",
											"const getDiagnoses = (claim) => {",
											"    return claim.diagnosis?.map(diagnosis => {",
											"        const diagnosisType = claim.item?.find(item => ",
											"            item.diagnosisSequence?.includes(diagnosis.sequence)",
											"        )?.category?.coding?.[0]?.code || \"N/A\";",
											"",
											"        return `${diagnosis.diagnosisReference?.reference || \"N/A\"} (${diagnosisType})`;",
											"    }).join(\"<br>\") || \"N/A\"; // Join diagnoses in one row",
											"};",
											"",
											"// **Helper-Funktion: Extraktion aller Encounters**",
											"const getEncounters = (claim) => {",
											"    return claim.encounter?.map(enc => enc.reference).join(\"<br>\") || \"N/A\";",
											"};",
											"",
											"// **Helper-Funktion: Extraktion aller Leistungen**",
											"const getProcedures = (claim) => {",
											"    return claim.procedure?.map(proc => proc.procedureReference?.reference).join(\"<br>\") || \"N/A\";",
											"};",
											"",
											"// **HTML-Generierung**",
											"let htmlContent = `",
											"    <style>",
											"        table { width: 100%; border-collapse: collapse; }",
											"        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }",
											"        th { background-color: #f4f4f4; }",
											"    </style>",
											"    <h2>LKFRequest (Claim) Details</h2>",
											"    <table>",
											"        <thead>",
											"            <tr>",
											"                <th>ID</th>",
											"                <th>Use</th>",
											"                <th>Status</th>",
											"                <th>Patient</th>",
											"                <th>Erstellt</th>",
											"                <th>Versicherer</th>",
											"                <th>Leistungserbringer</th>",
											"                <th>Encounters</th>",
											"                <th>Leistungen</th>",
											"                <th>Abrechnung Gruppe</th>",
											"                <th>Abrechnung Knoten</th>",
											"                <th>Diagnosen inkl. Haupt-/od. Zusatzdiagnose</th>",
											"                <th>Coverage</th>",
											"                <th>LKF Punkte - Total</th>",
											"                <th>LKF Punkte - Leistungskomponente</th>",
											"                <th>LKF Punkte - Tageskomponente Kontaktpunkte</th>",
											"                <th>LKF Punkte - Zusatzpunkte Intensiv</th>",
											"                <th>LKF Punkte - Zusatzpunkte Mehrfachleistungen</th>",
											"                <th>LKF Punkte - Punkte Belagsdauerausreisser Unten Leistungskomponente</th>",
											"                <th>LKF Punkte - Punkte Belagsdauerausreisser Unten Tageskomponente</th>",
											"                <th>LKF Punkte - Zusatzpunkte Belagsdauerausreisser Nach Oben</th>",
											"                <th>LKF Punkte - Punkte Spezieller Bereiche Tageweise</th>",
											"                <th>Fondsrelevanz</th>",
											"                <th>Plausibilit√§tskennzeichen</th>",
											"            </tr>",
											"        </thead>",
											"        <tbody>`;",
											"",
											"// **LKFRequest Tabelle**",
											"claims.forEach(claim => {",
											"    htmlContent += `",
											"        <tr>",
											"            <td>${claim.id || \"N/A\"}</td>",
											"            <td>${claim.use || \"N/A\"}</td>",
											"            <td>${claim.status || \"N/A\"}</td>",
											"            <td>${claim.patient?.reference || \"N/A\"}</td>",
											"            <td>${claim.created || \"N/A\"}</td>",
											"            <td>${claim.insurer?.reference || \"N/A\"}</td>",
											"            <td>${claim.provider?.reference || \"N/A\"}</td>",
											"            <td>${getEncounters(claim)}</td>",
											"            <td>${getProcedures(claim)}</td>",
											"            <td>${getCodingValue(claim, [\"diagnosisRelatedGroup\"])}</td>",
											"            <td>${getExtensionValue(claim, \"https://elga.moped.at/StructureDefinition/moped-ext-diagnoseKnoten\")}</td>",
											"            <td>${getDiagnoses(claim)}</td>",
											"            <td>${claim.insurance?.[0]?.coverage?.reference || \"N/A\"}</td>",
											"            <td>${getLKFPoints(claim, \"PunkteTotal\")}</td>",
											"            <td>${getLKFPoints(claim, \"Leistungskomponente\")}</td>",
											"            <td>${getLKFPoints(claim, \"TageskomponenteKontaktpunkte\")}</td>",
											"            <td>${getLKFPoints(claim, \"ZusatzpunkteIntensiv\")}</td>",
											"            <td>${getLKFPoints(claim, \"ZusatzpunkteMehrfachleistungen\")}</td>",
											"            <td>${getLKFPoints(claim, \"PunkteBelagsdauerausreisserUntenLeistungskomponente\")}</td>",
											"            <td>${getLKFPoints(claim, \"PunkteBelagsdauerausreisserUntenTageskomponente\")}</td>",
											"            <td>${getLKFPoints(claim, \"ZusatzpunkteBelagsdauerausreisserNachOben\")}</td>",
											"            <td>${getLKFPoints(claim, \"PunkteSpeziellerBereicheTageweise\")}</td>",
											"            <td>${getExtensionValue(claim, \"https://elga.moped.at/StructureDefinition/moped-ext-fondsrelevanz\")}</td>",
											"            <td>${getExtensionValue(claim, \"https://elga.moped.at/StructureDefinition/Plausibilitaetskennzeichen\")}</td>",
											"        </tr>`;",
											"});",
											"",
											"htmlContent += `</tbody></table>`;",
											"pm.visualizer.set(htmlContent);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{server-base}}/Claim?status=active&use=claim&_has:ClaimResponse:request:status:not=active",
									"host": [
										"{{server-base}}"
									],
									"path": [
										"Claim"
									],
									"query": [
										{
											"key": "status",
											"value": "active"
										},
										{
											"key": "use",
											"value": "claim"
										},
										{
											"key": "provider.identifier",
											"value": "urn:ietf:rfc:3986|{{gda-oid-value}}",
											"disabled": true
										},
										{
											"key": "insurer.identifier",
											"value": "http://svc.co.at/CodeSystem/ecard-svt-cs|{{sv-identifier-value}}",
											"disabled": true
										},
										{
											"key": "_has:ClaimResponse:request:status:not",
											"value": "active",
											"description": "nur unbeantwortete Requests"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET LKFRequest (nur dieser Fall)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();",
											"",
											"// **Filterung der LKFRequest (Claim) Ressourcen**",
											"const claims = response.entry",
											"    ?.map(entry => entry.resource)",
											"    ?.filter(resource => ",
											"        resource.resourceType === \"Claim\" &&",
											"        Array.isArray(resource.meta?.profile) &&",
											"        resource.meta.profile.includes(\"https://elga.moped.at/StructureDefinition/MopedLKFRequest\")",
											"    ) || [];",
											"",
											"// **Helper-Funktion: Extraktion von Coding-Werten**",
											"const getCodingValue = (resource, path) => {",
											"    const field = path.reduce((obj, key) => obj?.[key], resource);",
											"    return field?.coding?.[0]?.code || \"N/A\";",
											"};",
											"",
											"// **Helper-Funktion: Extraktion von Extensions-Werten**",
											"const getExtensionValue = (resource, url) => {",
											"    const ext = resource.extension?.find(ext => ext.url === url);",
											"    return ext ? (ext.valueCoding?.code || ext.valueString || \"N/A\") : \"N/A\";",
											"};",
											"",
											"// **Helper-Funktion: Extraktion von LKF-Punkten (komplexe Extension)**",
											"const getLKFPoints = (resource, subfield) => {",
											"    const ext = resource.extension?.find(ext => ext.url === \"https://elga.moped.at/StructureDefinition/moped-ext-LKFPunkte\");",
											"    const subExt = ext?.extension?.find(e => e.url === subfield);",
											"    return subExt ? subExt.valueUnsignedInt || 0 : \"N/A\";",
											"};",
											"",
											"// **Helper-Funktion: Extraktion von Diagnosen mit Haupt-/Zusatzdiagnose**",
											"const getDiagnoses = (claim) => {",
											"    return claim.diagnosis?.map(diagnosis => {",
											"        const diagnosisType = claim.item?.find(item => ",
											"            item.diagnosisSequence?.includes(diagnosis.sequence)",
											"        )?.category?.coding?.[0]?.code || \"N/A\";",
											"",
											"        return `${diagnosis.diagnosisReference?.reference || \"N/A\"} (${diagnosisType})`;",
											"    }).join(\"<br>\") || \"N/A\"; // Join diagnoses in one row",
											"};",
											"",
											"// **Helper-Funktion: Extraktion aller Encounters**",
											"const getEncounters = (claim) => {",
											"    return claim.encounter?.map(enc => enc.reference).join(\"<br>\") || \"N/A\";",
											"};",
											"",
											"// **Helper-Funktion: Extraktion aller Leistungen**",
											"const getProcedures = (claim) => {",
											"    return claim.procedure?.map(proc => proc.procedureReference?.reference).join(\"<br>\") || \"N/A\";",
											"};",
											"",
											"// **HTML-Generierung**",
											"let htmlContent = `",
											"    <style>",
											"        table { width: 100%; border-collapse: collapse; }",
											"        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }",
											"        th { background-color: #f4f4f4; }",
											"    </style>",
											"    <h2>LKFRequest (Claim) Details</h2>",
											"    <table>",
											"        <thead>",
											"            <tr>",
											"                <th>ID</th>",
											"                <th>Use</th>",
											"                <th>Status</th>",
											"                <th>Patient</th>",
											"                <th>Erstellt</th>",
											"                <th>Versicherer</th>",
											"                <th>Leistungserbringer</th>",
											"                <th>Encounters</th>",
											"                <th>Leistungen</th>",
											"                <th>Abrechnung Gruppe</th>",
											"                <th>Abrechnung Knoten</th>",
											"                <th>Diagnosen inkl. Haupt-/od. Zusatzdiagnose</th>",
											"                <th>Coverage</th>",
											"                <th>LKF Punkte - Total</th>",
											"                <th>LKF Punkte - Leistungskomponente</th>",
											"                <th>LKF Punkte - Tageskomponente Kontaktpunkte</th>",
											"                <th>LKF Punkte - Zusatzpunkte Intensiv</th>",
											"                <th>LKF Punkte - Zusatzpunkte Mehrfachleistungen</th>",
											"                <th>LKF Punkte - Punkte Belagsdauerausreisser Unten Leistungskomponente</th>",
											"                <th>LKF Punkte - Punkte Belagsdauerausreisser Unten Tageskomponente</th>",
											"                <th>LKF Punkte - Zusatzpunkte Belagsdauerausreisser Nach Oben</th>",
											"                <th>LKF Punkte - Punkte Spezieller Bereiche Tageweise</th>",
											"                <th>Fondsrelevanz</th>",
											"                <th>Plausibilit√§tskennzeichen</th>",
											"            </tr>",
											"        </thead>",
											"        <tbody>`;",
											"",
											"// **LKFRequest Tabelle**",
											"claims.forEach(claim => {",
											"    htmlContent += `",
											"        <tr>",
											"            <td>${claim.id || \"N/A\"}</td>",
											"            <td>${claim.use || \"N/A\"}</td>",
											"            <td>${claim.status || \"N/A\"}</td>",
											"            <td>${claim.patient?.reference || \"N/A\"}</td>",
											"            <td>${claim.created || \"N/A\"}</td>",
											"            <td>${claim.insurer?.reference || \"N/A\"}</td>",
											"            <td>${claim.provider?.reference || \"N/A\"}</td>",
											"            <td>${getEncounters(claim)}</td>",
											"            <td>${getProcedures(claim)}</td>",
											"            <td>${getCodingValue(claim, [\"diagnosisRelatedGroup\"])}</td>",
											"            <td>${getExtensionValue(claim, \"https://elga.moped.at/StructureDefinition/moped-ext-diagnoseKnoten\")}</td>",
											"            <td>${getDiagnoses(claim)}</td>",
											"            <td>${claim.insurance?.[0]?.coverage?.reference || \"N/A\"}</td>",
											"            <td>${getLKFPoints(claim, \"PunkteTotal\")}</td>",
											"            <td>${getLKFPoints(claim, \"Leistungskomponente\")}</td>",
											"            <td>${getLKFPoints(claim, \"TageskomponenteKontaktpunkte\")}</td>",
											"            <td>${getLKFPoints(claim, \"ZusatzpunkteIntensiv\")}</td>",
											"            <td>${getLKFPoints(claim, \"ZusatzpunkteMehrfachleistungen\")}</td>",
											"            <td>${getLKFPoints(claim, \"PunkteBelagsdauerausreisserUntenLeistungskomponente\")}</td>",
											"            <td>${getLKFPoints(claim, \"PunkteBelagsdauerausreisserUntenTageskomponente\")}</td>",
											"            <td>${getLKFPoints(claim, \"ZusatzpunkteBelagsdauerausreisserNachOben\")}</td>",
											"            <td>${getLKFPoints(claim, \"PunkteSpeziellerBereicheTageweise\")}</td>",
											"            <td>${getExtensionValue(claim, \"https://elga.moped.at/StructureDefinition/moped-ext-fondsrelevanz\")}</td>",
											"            <td>${getExtensionValue(claim, \"https://elga.moped.at/StructureDefinition/Plausibilitaetskennzeichen\")}</td>",
											"        </tr>`;",
											"});",
											"",
											"htmlContent += `</tbody></table>`;",
											"pm.visualizer.set(htmlContent);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{server-base}}/Claim?status=active&use=claim&_has:ClaimResponse:request:status:not=active&claim-encounter.identifier={{gda-oid-value}}|{{aufnahmezahl}}",
									"host": [
										"{{server-base}}"
									],
									"path": [
										"Claim"
									],
									"query": [
										{
											"key": "status",
											"value": "active"
										},
										{
											"key": "use",
											"value": "claim"
										},
										{
											"key": "provider.identifier",
											"value": "urn:ietf:rfc:3986|{{gda-oid-value}}",
											"disabled": true
										},
										{
											"key": "insurer.identifier",
											"value": "http://svc.co.at/CodeSystem/ecard-svt-cs|{{sv-identifier-value}}",
											"disabled": true
										},
										{
											"key": "_has:ClaimResponse:request:status:not",
											"value": "active",
											"description": "nur unbeantwortete Requests"
										},
										{
											"key": "claim-encounter.identifier",
											"value": "{{gda-oid-value}}|{{aufnahmezahl}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "$freigeben",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"resourceType\": \"Parameters\",\n    \"parameter\": [\n        {\n            \"name\": \"MopedLKFResponse\",\n            \"resource\": {\n                \"resourceType\": \"ClaimResponse\",\n                \"meta\": {\n                    \"profile\": [\n                        \"https://elga.moped.at/StructureDefinition/MopedLKFResponse\"\n                    ]\n                },\n                \"extension\": [\n                    {\n                        \"url\": \"https://elga.moped.at/StructureDefinition/moped-ext-diagnoseKnoten\",\n                        \"valueCoding\": {\n                            \"system\": \"https://elga.moped.at/CodeSystem/LKFAbrechnungsKnotenCS\",\n                            \"code\": \"TBD_D\"\n                        }\n                    },\n                    {\n                        \"extension\": [\n                            {\n                                \"url\": \"PunkteBelagsdauerausreisserUntenLeistungskomponente\",\n                                \"valueUnsignedInt\": TBD_0\n                            },\n                            {\n                                \"url\": \"PunkteBelagsdauerausreisserUntenTageskomponente\",\n                                \"valueUnsignedInt\": TBD_0\n                            },\n                            {\n                                \"url\": \"ZusatzpunkteBelagsdauerausreisserNachOben\",\n                                \"valueUnsignedInt\": TBD_0\n                            },\n                            {\n                                \"url\": \"ZusatzpunkteIntensiv\",\n                                \"valueUnsignedInt\": TBD_0\n                            },\n                            {\n                                \"url\": \"ZusatzpunkteMehrfachleistungen\",\n                                \"valueUnsignedInt\": TBD_0\n                            },\n                            {\n                                \"url\": \"PunkteSpeziellerBereicheTageweise\",\n                                \"valueUnsignedInt\": TBD_0\n                            },\n                            {\n                                \"url\": \"PunkteTotal\",\n                                \"valueUnsignedInt\": TBD_1110\n                            },\n                            {\n                                \"url\": \"Leistungskomponente\",\n                                \"valueUnsignedInt\": TBD_743\n                            },\n                            {\n                                \"url\": \"TageskomponenteKontaktpunkte\",\n                                \"valueUnsignedInt\": TBD_367\n                            }\n                        ],\n                        \"url\": \"https://elga.moped.at/StructureDefinition/moped-ext-LKFPunkte\"\n                    },\n                    {\n                        \"url\": \"https://elga.moped.at/StructureDefinition/moped-ext-LDFPunktewertNetto\",\n                        \"valueDecimal\": TBD_14892\n                    },\n                    {\n                        \"url\": \"https://elga.moped.at/StructureDefinition/moped-ext-LDFBetragNetto\",\n                        \"valueDecimal\": TBD_165301\n                    },\n                    {\n                        \"url\": \"https://elga.moped.at/StructureDefinition/moped-ext-PatientenanteilAngehoerige\",\n                        \"valueMoney\": {\n                            \"value\": TBD_0\n                        }\n                    },\n                    {\n                        \"url\": \"https://elga.moped.at/StructureDefinition/moped-ext-Patientenanteil\",\n                        \"valueMoney\": {\n                            \"value\": TBD_0\n                        }\n                    },\n                    {\n                        \"url\": \"https://elga.moped.at/StructureDefinition/moped-ext-Beihilfenaequivalent\",\n                        \"valueUnsignedInt\": TBD_1111\n                    },\n                    {\n                        \"url\": \"https://elga.moped.at/StructureDefinition/moped-ext-ForderungsbetragAuslaenderverrechnungRegress\",\n                        \"valueMoney\": {\n                            \"value\": TBD_0\n                        }\n                    },\n                    {\n                        \"url\": \"https://elga.moped.at/StructureDefinition/moped-ext-PunkteLDFPauschale\",\n                        \"valueDecimal\": TBD_1110\n                    },\n                    {\n                        \"url\": \"https://elga.moped.at/StructureDefinition/moped-ext-KonstenmeldungARK\",\n                        \"valueCoding\": {\n                            \"system\": \"https://elga.moped.at/CodeSystem/KostenmeldungARKCS\",\n                            \"code\": \"TBD_K\"\n                        }\n                    }\n                ],\n                \"status\": \"active\",\n                \"type\": {\n                    \"coding\": [\n                        {\n                            \"system\": \"http://terminology.hl7.org/CodeSystem/claim-type\",\n                            \"code\": \"institutional\"\n                        }\n                    ]\n                },\n                \"use\": \"claim\",\n                \"patient\": {\n                    \"reference\": \"Patient?identifier=urn:oid:1.2.40.0.10.1.4.3.1|{{svnr}}\"\n                },\n                \"created\": \"TBD_2024-10-31\",\n                \"insurer\": {\n                    \"reference\": \"Organization?identifier=http://svc.co.at/CodeSystem/ecard-svt-cs|{{sv-identifier-value}}\"\n                },\n                \"requestor\": {\n                    \"reference\": \"Organization?identifier=urn:ietf:rfc:3986|{{gda-oid-value}}\"\n                },\n                \"request\": {\n                    \"reference\": \"Claim/TBD_e5e00c68-a4df-4f52-9aed-27751e314ac0\"\n                },\n                \"outcome\": \"complete\",\n                \"diagnosisRelatedGroup\": {\n                    \"coding\": [\n                        {\n                            \"system\": \"https://elga.moped.at/CodeSystem/LKFHauptdiagnosegruppenCS\",\n                            \"code\": \"TBD_HDG01.31\"\n                        }\n                    ]\n                },\n                \"insurance\": [\n                    {\n                        \"sequence\": 1,\n                        \"focal\": true,\n                        \"coverage\": {\n                            \"reference\": \"Coverage?identifier={{vdasID}}\"\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server-base}}/ClaimResponse/$freigeben",
									"host": [
										"{{server-base}}"
									],
									"path": [
										"ClaimResponse",
										"$freigeben"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET LKFRequest (nur dieser Fall)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();",
											"",
											"// **Filterung der LKFRequest (Claim) Ressourcen**",
											"const claims = response.entry",
											"    ?.map(entry => entry.resource)",
											"    ?.filter(resource => ",
											"        resource.resourceType === \"Claim\" &&",
											"        Array.isArray(resource.meta?.profile) &&",
											"        resource.meta.profile.includes(\"https://elga.moped.at/StructureDefinition/MopedLKFRequest\")",
											"    ) || [];",
											"",
											"// **Helper-Funktion: Extraktion von Coding-Werten**",
											"const getCodingValue = (resource, path) => {",
											"    const field = path.reduce((obj, key) => obj?.[key], resource);",
											"    return field?.coding?.[0]?.code || \"N/A\";",
											"};",
											"",
											"// **Helper-Funktion: Extraktion von Extensions-Werten**",
											"const getExtensionValue = (resource, url) => {",
											"    const ext = resource.extension?.find(ext => ext.url === url);",
											"    return ext ? (ext.valueCoding?.code || ext.valueString || \"N/A\") : \"N/A\";",
											"};",
											"",
											"// **Helper-Funktion: Extraktion von LKF-Punkten (komplexe Extension)**",
											"const getLKFPoints = (resource, subfield) => {",
											"    const ext = resource.extension?.find(ext => ext.url === \"https://elga.moped.at/StructureDefinition/moped-ext-LKFPunkte\");",
											"    const subExt = ext?.extension?.find(e => e.url === subfield);",
											"    return subExt ? subExt.valueUnsignedInt || 0 : \"N/A\";",
											"};",
											"",
											"// **Helper-Funktion: Extraktion von Diagnosen mit Haupt-/Zusatzdiagnose**",
											"const getDiagnoses = (claim) => {",
											"    return claim.diagnosis?.map(diagnosis => {",
											"        const diagnosisType = claim.item?.find(item => ",
											"            item.diagnosisSequence?.includes(diagnosis.sequence)",
											"        )?.category?.coding?.[0]?.code || \"N/A\";",
											"",
											"        return `${diagnosis.diagnosisReference?.reference || \"N/A\"} (${diagnosisType})`;",
											"    }).join(\"<br>\") || \"N/A\"; // Join diagnoses in one row",
											"};",
											"",
											"// **Helper-Funktion: Extraktion aller Encounters**",
											"const getEncounters = (claim) => {",
											"    return claim.encounter?.map(enc => enc.reference).join(\"<br>\") || \"N/A\";",
											"};",
											"",
											"// **Helper-Funktion: Extraktion aller Leistungen**",
											"const getProcedures = (claim) => {",
											"    return claim.procedure?.map(proc => proc.procedureReference?.reference).join(\"<br>\") || \"N/A\";",
											"};",
											"",
											"// **HTML-Generierung**",
											"let htmlContent = `",
											"    <style>",
											"        table { width: 100%; border-collapse: collapse; }",
											"        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }",
											"        th { background-color: #f4f4f4; }",
											"    </style>",
											"    <h2>LKFRequest (Claim) Details</h2>",
											"    <table>",
											"        <thead>",
											"            <tr>",
											"                <th>ID</th>",
											"                <th>Use</th>",
											"                <th>Status</th>",
											"                <th>Patient</th>",
											"                <th>Erstellt</th>",
											"                <th>Versicherer</th>",
											"                <th>Leistungserbringer</th>",
											"                <th>Encounters</th>",
											"                <th>Leistungen</th>",
											"                <th>Abrechnung Gruppe</th>",
											"                <th>Abrechnung Knoten</th>",
											"                <th>Diagnosen inkl. Haupt-/od. Zusatzdiagnose</th>",
											"                <th>Coverage</th>",
											"                <th>LKF Punkte - Total</th>",
											"                <th>LKF Punkte - Leistungskomponente</th>",
											"                <th>LKF Punkte - Tageskomponente Kontaktpunkte</th>",
											"                <th>LKF Punkte - Zusatzpunkte Intensiv</th>",
											"                <th>LKF Punkte - Zusatzpunkte Mehrfachleistungen</th>",
											"                <th>LKF Punkte - Punkte Belagsdauerausreisser Unten Leistungskomponente</th>",
											"                <th>LKF Punkte - Punkte Belagsdauerausreisser Unten Tageskomponente</th>",
											"                <th>LKF Punkte - Zusatzpunkte Belagsdauerausreisser Nach Oben</th>",
											"                <th>LKF Punkte - Punkte Spezieller Bereiche Tageweise</th>",
											"                <th>Fondsrelevanz</th>",
											"                <th>Plausibilit√§tskennzeichen</th>",
											"            </tr>",
											"        </thead>",
											"        <tbody>`;",
											"",
											"// **LKFRequest Tabelle**",
											"claims.forEach(claim => {",
											"    htmlContent += `",
											"        <tr>",
											"            <td>${claim.id || \"N/A\"}</td>",
											"            <td>${claim.use || \"N/A\"}</td>",
											"            <td>${claim.status || \"N/A\"}</td>",
											"            <td>${claim.patient?.reference || \"N/A\"}</td>",
											"            <td>${claim.created || \"N/A\"}</td>",
											"            <td>${claim.insurer?.reference || \"N/A\"}</td>",
											"            <td>${claim.provider?.reference || \"N/A\"}</td>",
											"            <td>${getEncounters(claim)}</td>",
											"            <td>${getProcedures(claim)}</td>",
											"            <td>${getCodingValue(claim, [\"diagnosisRelatedGroup\"])}</td>",
											"            <td>${getExtensionValue(claim, \"https://elga.moped.at/StructureDefinition/moped-ext-diagnoseKnoten\")}</td>",
											"            <td>${getDiagnoses(claim)}</td>",
											"            <td>${claim.insurance?.[0]?.coverage?.reference || \"N/A\"}</td>",
											"            <td>${getLKFPoints(claim, \"PunkteTotal\")}</td>",
											"            <td>${getLKFPoints(claim, \"Leistungskomponente\")}</td>",
											"            <td>${getLKFPoints(claim, \"TageskomponenteKontaktpunkte\")}</td>",
											"            <td>${getLKFPoints(claim, \"ZusatzpunkteIntensiv\")}</td>",
											"            <td>${getLKFPoints(claim, \"ZusatzpunkteMehrfachleistungen\")}</td>",
											"            <td>${getLKFPoints(claim, \"PunkteBelagsdauerausreisserUntenLeistungskomponente\")}</td>",
											"            <td>${getLKFPoints(claim, \"PunkteBelagsdauerausreisserUntenTageskomponente\")}</td>",
											"            <td>${getLKFPoints(claim, \"ZusatzpunkteBelagsdauerausreisserNachOben\")}</td>",
											"            <td>${getLKFPoints(claim, \"PunkteSpeziellerBereicheTageweise\")}</td>",
											"            <td>${getExtensionValue(claim, \"https://elga.moped.at/StructureDefinition/moped-ext-fondsrelevanz\")}</td>",
											"            <td>${getExtensionValue(claim, \"https://elga.moped.at/StructureDefinition/Plausibilitaetskennzeichen\")}</td>",
											"        </tr>`;",
											"});",
											"",
											"htmlContent += `</tbody></table>`;",
											"pm.visualizer.set(htmlContent);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{server-base}}/Claim?status=active&use=claim&_has:ClaimResponse:request:status:not=active&claim-encounter.identifier={{gda-oid-value}}|{{aufnahmezahl}}",
									"host": [
										"{{server-base}}"
									],
									"path": [
										"Claim"
									],
									"query": [
										{
											"key": "status",
											"value": "active"
										},
										{
											"key": "use",
											"value": "claim"
										},
										{
											"key": "provider.identifier",
											"value": "urn:ietf:rfc:3986|{{gda-oid-value}}",
											"disabled": true
										},
										{
											"key": "insurer.identifier",
											"value": "http://svc.co.at/CodeSystem/ecard-svt-cs|{{sv-identifier-value}}",
											"disabled": true
										},
										{
											"key": "_has:ClaimResponse:request:status:not",
											"value": "active",
											"description": "nur unbeantwortete Requests"
										},
										{
											"key": "claim-encounter.identifier",
											"value": "{{gda-oid-value}}|{{aufnahmezahl}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET LKFRequest offen (alle F√§lle des LGF)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();",
											"",
											"// **Filterung der LKFRequest (Claim) Ressourcen**",
											"const claims = response.entry",
											"    ?.map(entry => entry.resource)",
											"    ?.filter(resource => ",
											"        resource.resourceType === \"Claim\" &&",
											"        Array.isArray(resource.meta?.profile) &&",
											"        resource.meta.profile.includes(\"https://elga.moped.at/StructureDefinition/MopedLKFRequest\")",
											"    ) || [];",
											"",
											"// **Helper-Funktion: Extraktion von Coding-Werten**",
											"const getCodingValue = (resource, path) => {",
											"    const field = path.reduce((obj, key) => obj?.[key], resource);",
											"    return field?.coding?.[0]?.code || \"N/A\";",
											"};",
											"",
											"// **Helper-Funktion: Extraktion von Extensions-Werten**",
											"const getExtensionValue = (resource, url) => {",
											"    const ext = resource.extension?.find(ext => ext.url === url);",
											"    return ext ? (ext.valueCoding?.code || ext.valueString || \"N/A\") : \"N/A\";",
											"};",
											"",
											"// **Helper-Funktion: Extraktion von LKF-Punkten (komplexe Extension)**",
											"const getLKFPoints = (resource, subfield) => {",
											"    const ext = resource.extension?.find(ext => ext.url === \"https://elga.moped.at/StructureDefinition/moped-ext-LKFPunkte\");",
											"    const subExt = ext?.extension?.find(e => e.url === subfield);",
											"    return subExt ? subExt.valueUnsignedInt || 0 : \"N/A\";",
											"};",
											"",
											"// **Helper-Funktion: Extraktion von Diagnosen mit Haupt-/Zusatzdiagnose**",
											"const getDiagnoses = (claim) => {",
											"    return claim.diagnosis?.map(diagnosis => {",
											"        const diagnosisType = claim.item?.find(item => ",
											"            item.diagnosisSequence?.includes(diagnosis.sequence)",
											"        )?.category?.coding?.[0]?.code || \"N/A\";",
											"",
											"        return `${diagnosis.diagnosisReference?.reference || \"N/A\"} (${diagnosisType})`;",
											"    }).join(\"<br>\") || \"N/A\"; // Join diagnoses in one row",
											"};",
											"",
											"// **Helper-Funktion: Extraktion aller Encounters**",
											"const getEncounters = (claim) => {",
											"    return claim.encounter?.map(enc => enc.reference).join(\"<br>\") || \"N/A\";",
											"};",
											"",
											"// **Helper-Funktion: Extraktion aller Leistungen**",
											"const getProcedures = (claim) => {",
											"    return claim.procedure?.map(proc => proc.procedureReference?.reference).join(\"<br>\") || \"N/A\";",
											"};",
											"",
											"// **HTML-Generierung**",
											"let htmlContent = `",
											"    <style>",
											"        table { width: 100%; border-collapse: collapse; }",
											"        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }",
											"        th { background-color: #f4f4f4; }",
											"    </style>",
											"    <h2>LKFRequest (Claim) Details</h2>",
											"    <table>",
											"        <thead>",
											"            <tr>",
											"                <th>ID</th>",
											"                <th>Use</th>",
											"                <th>Status</th>",
											"                <th>Patient</th>",
											"                <th>Erstellt</th>",
											"                <th>Versicherer</th>",
											"                <th>Leistungserbringer</th>",
											"                <th>Encounters</th>",
											"                <th>Leistungen</th>",
											"                <th>Abrechnung Gruppe</th>",
											"                <th>Abrechnung Knoten</th>",
											"                <th>Diagnosen inkl. Haupt-/od. Zusatzdiagnose</th>",
											"                <th>Coverage</th>",
											"                <th>LKF Punkte - Total</th>",
											"                <th>LKF Punkte - Leistungskomponente</th>",
											"                <th>LKF Punkte - Tageskomponente Kontaktpunkte</th>",
											"                <th>LKF Punkte - Zusatzpunkte Intensiv</th>",
											"                <th>LKF Punkte - Zusatzpunkte Mehrfachleistungen</th>",
											"                <th>LKF Punkte - Punkte Belagsdauerausreisser Unten Leistungskomponente</th>",
											"                <th>LKF Punkte - Punkte Belagsdauerausreisser Unten Tageskomponente</th>",
											"                <th>LKF Punkte - Zusatzpunkte Belagsdauerausreisser Nach Oben</th>",
											"                <th>LKF Punkte - Punkte Spezieller Bereiche Tageweise</th>",
											"                <th>Fondsrelevanz</th>",
											"                <th>Plausibilit√§tskennzeichen</th>",
											"            </tr>",
											"        </thead>",
											"        <tbody>`;",
											"",
											"// **LKFRequest Tabelle**",
											"claims.forEach(claim => {",
											"    htmlContent += `",
											"        <tr>",
											"            <td>${claim.id || \"N/A\"}</td>",
											"            <td>${claim.use || \"N/A\"}</td>",
											"            <td>${claim.status || \"N/A\"}</td>",
											"            <td>${claim.patient?.reference || \"N/A\"}</td>",
											"            <td>${claim.created || \"N/A\"}</td>",
											"            <td>${claim.insurer?.reference || \"N/A\"}</td>",
											"            <td>${claim.provider?.reference || \"N/A\"}</td>",
											"            <td>${getEncounters(claim)}</td>",
											"            <td>${getProcedures(claim)}</td>",
											"            <td>${getCodingValue(claim, [\"diagnosisRelatedGroup\"])}</td>",
											"            <td>${getExtensionValue(claim, \"https://elga.moped.at/StructureDefinition/moped-ext-diagnoseKnoten\")}</td>",
											"            <td>${getDiagnoses(claim)}</td>",
											"            <td>${claim.insurance?.[0]?.coverage?.reference || \"N/A\"}</td>",
											"            <td>${getLKFPoints(claim, \"PunkteTotal\")}</td>",
											"            <td>${getLKFPoints(claim, \"Leistungskomponente\")}</td>",
											"            <td>${getLKFPoints(claim, \"TageskomponenteKontaktpunkte\")}</td>",
											"            <td>${getLKFPoints(claim, \"ZusatzpunkteIntensiv\")}</td>",
											"            <td>${getLKFPoints(claim, \"ZusatzpunkteMehrfachleistungen\")}</td>",
											"            <td>${getLKFPoints(claim, \"PunkteBelagsdauerausreisserUntenLeistungskomponente\")}</td>",
											"            <td>${getLKFPoints(claim, \"PunkteBelagsdauerausreisserUntenTageskomponente\")}</td>",
											"            <td>${getLKFPoints(claim, \"ZusatzpunkteBelagsdauerausreisserNachOben\")}</td>",
											"            <td>${getLKFPoints(claim, \"PunkteSpeziellerBereicheTageweise\")}</td>",
											"            <td>${getExtensionValue(claim, \"https://elga.moped.at/StructureDefinition/moped-ext-fondsrelevanz\")}</td>",
											"            <td>${getExtensionValue(claim, \"https://elga.moped.at/StructureDefinition/Plausibilitaetskennzeichen\")}</td>",
											"        </tr>`;",
											"});",
											"",
											"htmlContent += `</tbody></table>`;",
											"pm.visualizer.set(htmlContent);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{server-base}}/Claim?status=active&use=claim&_has:ClaimResponse:request:status:not=active",
									"host": [
										"{{server-base}}"
									],
									"path": [
										"Claim"
									],
									"query": [
										{
											"key": "status",
											"value": "active"
										},
										{
											"key": "use",
											"value": "claim"
										},
										{
											"key": "provider.identifier",
											"value": "urn:ietf:rfc:3986|{{gda-oid-value}}",
											"disabled": true
										},
										{
											"key": "insurer.identifier",
											"value": "http://svc.co.at/CodeSystem/ecard-svt-cs|{{sv-identifier-value}}",
											"disabled": true
										},
										{
											"key": "_has:ClaimResponse:request:status:not",
											"value": "active",
											"description": "nur unbeantwortete Requests"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "GET Organization LGF Stammdaten",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const org = pm.response.json();",
									"",
									"let htmlContent = `",
									"    <style>",
									"        table { width: 100%; border-collapse: collapse; }",
									"        th, td { border: 1px solid #ddd; padding: 10px; text-align: left; }",
									"        th { background-color: #f4f4f4; }",
									"    </style>",
									"    <h2>Organization Details</h2>",
									"    <table>",
									"        <thead>",
									"            <tr>",
									"                <th>ID</th>",
									"                <th>Name</th>",
									"                <th>Profile</th>",
									"               ",
									"                <th>Last Updated</th>",
									"                <th>Contact Email</th>",
									"            </tr>",
									"        </thead>",
									"        <tbody>",
									"            <tr>",
									"                <td>${org.id || \"N/A\"}</td>",
									"                <td>${org.name || \"N/A\"}</td>",
									"                <td>${org.meta?.profile?.[0] || \"N/A\"}</td>",
									"                ",
									"                <td>${org.meta?.lastUpdated || \"N/A\"}</td>",
									"                <td>${org.contact?.[0]?.telecom?.[0]?.value || \"N/A\"}</td>",
									"            </tr>",
									"        </tbody>",
									"    </table>`;",
									"",
									"pm.visualizer.set(htmlContent);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{server-base}}/Organization/OrganizationLGF",
							"host": [
								"{{server-base}}"
							],
							"path": [
								"Organization",
								"OrganizationLGF"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Encounter (nur dieser Fall)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"",
									"// **Filterung der Encounters (nur MopedEncounter)**",
									"const encounters = response.entry",
									"    ?.map(entry => entry.resource)",
									"    ?.filter(resource => ",
									"        resource.resourceType === \"Encounter\" &&",
									"        resource.meta?.profile?.includes(\"https://elga.moped.at/StructureDefinition/MopedEncounterLGF\")",
									"    ) || []; ",
									"",
									"// Helper-Funktion zur Extraktion von Identifier-Werten",
									"const getIdentifierValue = (resource, code) => {",
									"    return resource.identifier?.find(id => ",
									"        id.type?.coding?.some(coding => coding.code === code)",
									"    )?.value || \"N/A\";",
									"};",
									"",
									"// Helper-Funktion zur Extraktion von Coding-Werten",
									"const getCodingValue = (resource, path) => {",
									"    const field = path.reduce((obj, key) => obj?.[key], resource);",
									"    return field?.coding?.[0]?.code || \"N/A\";",
									"};",
									"",
									"// Helper-Funktion zur Extraktion von Reason-Werten",
									"const getReason = (resource) => {",
									"    return resource.reason?.[0]?.value?.[0]?.concept?.coding?.[0]?.code || \"N/A\";",
									"};",
									"",
									"// Helper-Funktion zur Extraktion von Diagnose-Werten",
									"const getDiagnosis = (resource) => {",
									"    return resource.diagnosis?.[0]?.condition?.[0]?.concept?.coding?.[0]?.display || \"N/A\";",
									"};",
									"",
									"// Helper-Funktion zur Extraktion von Extensions-Werten",
									"const getExtensionValue = (resource, url) => {",
									"    const ext = resource.admission?.extension?.find(ext => ext.url === url) ||",
									"                resource.extension?.find(ext => ext.url === url);",
									"    return ext ? (ext.valueCoding?.code || ext.valueDate || ext.valueCode || \"N/A\") : \"N/A\";",
									"};",
									"",
									"let htmlContent = `",
									"    <style>",
									"        table { width: 100%; border-collapse: collapse; }",
									"        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }",
									"        th { background-color: #f4f4f4; }",
									"    </style>",
									"    <h2>Encounter-Details</h2>",
									"    <table>",
									"        <thead>",
									"            <tr>",
									"                <th>ID</th>",
									"                <th>Aufnahmezahl</th>",
									"                <th>Datensatz-ID</th>",
									"                <th>Status</th>",
									"                <th>Behandlungsart</th>",
									"                <th>Aufnahmeart</th>",
									"                <th>Patient</th>",
									"                <th>Leistungserbringer</th>",
									"                <th>Aufnahmezeitpunkt</th>",
									"                <th>Entlassungszeitpunkt</th>",
									"                ",
									"                <th>Ursache</th>",
									"                <th>Diagnose</th>",
									"                <th>Aufnahmeart2</th>",
									"                <th>Entlassungsart</th>",
									"                <th>Account</th>",
									"                <th>Transportart</th>",
									"                <th>Unfalldatum</th>",
									"            </tr>",
									"        </thead>",
									"        <tbody>`;",
									"",
									"// **Encounter Tabelle**",
									"encounters.forEach(encounter => {",
									"    htmlContent += `",
									"        <tr>",
									"            <td>${encounter.id || \"N/A\"}</td>",
									"            <td>${getIdentifierValue(encounter, \"VN\")}</td>",
									"            <td>${getIdentifierValue(encounter, \"ANON\")}</td>",
									"            <td>${encounter.status || \"N/A\"}</td>",
									"            <td>${getCodingValue(encounter, [\"class\", 0])}</td>",
									"            <td>${getCodingValue(encounter, [\"class\", 1])}</td>",
									"            <td>${encounter.subject?.reference || \"N/A\"}</td>",
									"            <td>${encounter.serviceProvider?.reference || \"N/A\"}</td>",
									"            <td>${encounter.actualPeriod?.start || \"N/A\"}</td>",
									"            <td>${encounter.actualPeriod?.end || \"N/A\"}</td>",
									"           ",
									"            <td>${getReason(encounter)}</td>",
									"            <td>${getDiagnosis(encounter)}</td>",
									"            <td>${getExtensionValue(encounter, \"https://elga.moped.at/StructureDefinition/moped-ext-aufnahmeart\")}</td>",
									"            <td>${encounter.admission?.dischargeDisposition || \"N/A\"}</td>",
									"            <td>${encounter.account?.[0]?.reference || \"N/A\"}</td>",
									"            <td>${getExtensionValue(encounter, \"https://elga.moped.at/StructureDefinition/moped-ext-transportart\")}</td>",
									"            <td>${getExtensionValue(encounter, \"https://elga.moped.at/StructureDefinition/moped-ext-unfalldatum\")}</td>",
									"        </tr>`;",
									"});",
									"",
									"htmlContent += `</tbody></table>`;",
									"pm.visualizer.set(htmlContent);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{server-base}}/Encounter?identifier={{gda-oid-value}}|{{aufnahmezahl}}",
							"host": [
								"{{server-base}}"
							],
							"path": [
								"Encounter"
							],
							"query": [
								{
									"key": "identifier",
									"value": "{{gda-oid-value}}|{{aufnahmezahl}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Patient",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"const patients = response.entry",
									"    ?.map(entry => entry.resource)",
									"    ?.filter(resource => resource.resourceType === \"Patient\") || []; // Ensures only Patient resources are displayed",
									"",
									"// Helper function to extract identifier values",
									"const getIdentifierValue = (resource, system) => {",
									"    return resource.identifier?.find(id => id.system === system)?.value || \"N/A\";",
									"};",
									"",
									"// Helper function to extract extension values",
									"const getExtensionValue = (resource, url) => {",
									"    const ext = resource.extension?.find(ext => ext.url === url);",
									"    return ext ? (ext.valueCodeableConcept?.coding?.[0]?.display || ext.valueString || \"N/A\") : \"N/A\";",
									"};",
									"",
									"// Helper function to get the address",
									"const getAddress = (resource) => {",
									"    const address = resource.address?.[0]; // Assuming primary address",
									"    if (!address) return \"N/A\";",
									"",
									"    const street = address.line?.[0] || \"N/A\";",
									"    const postalCode = address.postalCode || \"N/A\";",
									"    const city = address.city || \"N/A\";",
									"    const state = address.state || \"N/A\";",
									"    const country = address.country || \"N/A\";",
									"    const municipalityCode = getExtensionValue(address, \"https://elga.moped.at/StructureDefinition/AddressMunicipalityCode\");",
									"",
									"    return `${street}, ${postalCode} ${city}, ${state}, ${country} (Gemeindecode: ${municipalityCode})`;",
									"};",
									"",
									"let htmlContent = `",
									"    <style>",
									"        table { width: 100%; border-collapse: collapse; }",
									"        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }",
									"        th { background-color: #f4f4f4; }",
									"    </style>",
									"    <h2>Patientendetails</h2>",
									"    <table>",
									"        <thead>",
									"            <tr>",
									"                <th>ID</th>",
									"                <th>Sozialversicherungsnummer</th>",
									"                <th>Name</th>",
									"                <th>Geschlecht</th>",
									"                <th>Geburtsdatum</th>",
									"                ",
									"                <th>Adresse</th>",
									"            </tr>",
									"        </thead>",
									"        <tbody>`;",
									"",
									"patients.forEach(patient => {",
									"    const name = patient.name?.[0];",
									"    const fullName = name ? `${name.given?.join(\" \")} ${name.family}` : \"N/A\";",
									"",
									"    htmlContent += `",
									"        <tr>",
									"            <td>${patient.id || \"N/A\"}</td>",
									"            <td>${getIdentifierValue(patient, \"urn:oid:1.2.40.0.10.1.4.3.1\")}</td>",
									"            <td>${fullName}</td>",
									"            <td>${patient.gender || \"N/A\"}</td>",
									"            <td>${patient.birthDate || \"N/A\"}</td>",
									"            ",
									"            <td>${getAddress(patient)}</td>",
									"        </tr>`;",
									"});",
									"",
									"htmlContent += `</tbody></table>`;",
									"pm.visualizer.set(htmlContent);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{server-base}}/Encounter?identifier={{gda-oid-value}}|{{aufnahmezahl}}&_include=*",
							"host": [
								"{{server-base}}"
							],
							"path": [
								"Encounter"
							],
							"query": [
								{
									"key": "identifier",
									"value": "{{gda-oid-value}}|{{aufnahmezahl}}"
								},
								{
									"key": "_include",
									"value": "*"
								}
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "basic",
				"basic": [
					{
						"key": "password",
						"value": "hackathon",
						"type": "string"
					},
					{
						"key": "username",
						"value": "lgf_hackathon",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Bund",
			"item": [
				{
					"name": "10 Abholung der Daten",
					"item": [
						{
							"name": "GET ClaimResponse",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();",
											"",
											"// **Filter LKFResponses**",
											"const lkfResponses = response.entry",
											"    ?.map(entry => entry.resource)",
											"    ?.filter(resource => ",
											"        resource.resourceType === \"ClaimResponse\" &&",
											"        Array.isArray(resource.meta?.profile) &&",
											"        resource.meta.profile.includes(\"https://elga.moped.at/StructureDefinition/MopedLKFResponse\")",
											"    ) || [];",
											"",
											"// **Helper function to extract Coding values**",
											"const getCodingValue = (resource, url) => {",
											"    const extension = resource.extension?.find(ext => ext.url === url);",
											"    return extension?.valueCoding?.code || \"N/A\";",
											"};",
											"",
											"// **Helper function to extract Decimal values from Extensions**",
											"const getExtensionDecimalValue = (resource, url) => {",
											"    const ext = resource.extension?.find(ext => ext.url === url);",
											"    return ext?.valueDecimal !== undefined ? ext.valueDecimal : \"N/A\";",
											"};",
											"",
											"// **Helper function to extract UnsignedInt values from LKFPunkte**",
											"const getLKFPunkteValue = (resource, subUrl) => {",
											"    const lkfPunkte = resource.extension?.find(ext => ext.url === \"https://elga.moped.at/StructureDefinition/moped-ext-LKFPunkte\");",
											"    const subExt = lkfPunkte?.extension?.find(subExt => subExt.url === subUrl);",
											"    return subExt?.valueUnsignedInt !== undefined ? subExt.valueUnsignedInt : \"N/A\";",
											"};",
											"",
											"// **Helper function to extract Money values**",
											"const getExtensionMoneyValue = (resource, url) => {",
											"    const ext = resource.extension?.find(ext => ext.url === url);",
											"    return ext?.valueMoney?.value !== undefined ? ext.valueMoney.value : \"N/A\";",
											"};",
											"",
											"// **Helper function to extract String values from Extensions**",
											"const getExtensionStringValue = (resource, url) => {",
											"    const ext = resource.extension?.find(ext => ext.url === url);",
											"    return ext?.valueString || \"N/A\";",
											"};",
											"",
											"// **Helper function to get first coding system entry**",
											"const getFirstCodingValue = (resource, path) => {",
											"    const field = path.reduce((obj, key) => obj?.[key], resource);",
											"    return field?.[0]?.code || \"N/A\";",
											"};",
											"// **Helper function to extract UnsignedInt values from Extensions**",
											"const getExtensionUnsignedIntValue = (resource, url) => {",
											"    const ext = resource.extension?.find(ext => ext.url === url);",
											"    return ext?.valueUnsignedInt !== undefined ? ext.valueUnsignedInt : \"N/A\";",
											"};",
											"",
											"",
											"// **Generate HTML Table**",
											"let htmlContent = `",
											"    <style>",
											"        table { width: 100%; border-collapse: collapse; }",
											"        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }",
											"        th { background-color: #f4f4f4; }",
											"    </style>",
											"    <h2>Moped LKFResponse Details</h2>",
											"    <table>",
											"        <thead>",
											"            <tr>",
											"                <th>ID</th>",
											"                <th>Use</th>",
											"                <th>Status</th>",
											"                <th>Patient</th>",
											"                <th>Erstellt</th>",
											"                <th>Versicherer</th>",
											"                <th>Leistungserbringer</th>",
											"                <th>Abrechnung Gruppe</th>",
											"                <th>Abrechnung Knoten</th>",
											"                <th>Coverage</th>",
											"                <th>LKF Punkte - Total</th>",
											"                <th>LKF Punkte - Leistungskomponente</th>",
											"                <th>LKF Punkte - Tageskomponente Kontaktpunkte</th>",
											"                <th>LKF Punkte - Zusatzpunkte Intensiv</th>",
											"                <th>LKF Punkte - Zusatzpunkte Mehrfachleistungen</th>",
											"                <th>LKF Punkte - Punkte Belagsdauerausreisser Unten Leistungskomponente</th>",
											"                <th>LKF Punkte - Punkte Belagsdauerausreisser Unten Tageskomponente</th>",
											"                <th>LKF Punkte - Zusatzpunkte Belagsdauerausreisser Nach Oben</th>",
											"                <th>LKF Punkte - Punkte Spezieller Bereiche Tageweise</th>",
											"                <th>LDF Punktewert Netto</th>",
											"                <th>Punkte LDF Pauschale</th>",
											"                <th>LDF Betrag Netto</th>",
											"                <th>Patientenanteil Angeh√∂rige</th>",
											"                <th>Patientenanteil</th>",
											"                <th>Beihilfenaquivalent</th>",
											"                <th>Forderungsbetrag Ausl√§nderverrechnung Regress</th>",
											"                <th>Rechnungsnummer KHLGF</th>",
											"                <th>Sonderleistungsnummer</th>",
											"                <th>Anzahl Sonderleistungen</th>",
											"                <th>Konstenmeldung ARK</th>",
											"            </tr>",
											"        </thead>",
											"        <tbody>`;",
											"",
											"// **Populate Table**",
											"lkfResponses.forEach(lkfResponse => {",
											"    htmlContent += `",
											"        <tr>",
											"            <td>${lkfResponse.id || \"N/A\"}</td>",
											"            <td>${lkfResponse.use || \"N/A\"}</td>",
											"            <td>${lkfResponse.status || \"N/A\"}</td>",
											"            <td>${lkfResponse.patient?.reference || \"N/A\"}</td>",
											"            <td>${lkfResponse.created || \"N/A\"}</td>",
											"            <td>${lkfResponse.insurer?.reference || \"N/A\"}</td>",
											"            <td>${lkfResponse.requestor?.reference || \"N/A\"}</td>",
											"            <td>${getFirstCodingValue(lkfResponse, [\"diagnosisRelatedGroup\", \"coding\"])}</td>",
											"            <td>${getCodingValue(lkfResponse, \"https://elga.moped.at/StructureDefinition/moped-ext-diagnoseKnoten\")}</td>",
											"            <td>${lkfResponse.insurance?.[0]?.coverage?.reference || \"N/A\"}</td>",
											"            <td>${getLKFPunkteValue(lkfResponse, \"PunkteTotal\")}</td>",
											"            <td>${getLKFPunkteValue(lkfResponse, \"Leistungskomponente\")}</td>",
											"            <td>${getLKFPunkteValue(lkfResponse, \"TageskomponenteKontaktpunkte\")}</td>",
											"            <td>${getLKFPunkteValue(lkfResponse, \"ZusatzpunkteIntensiv\")}</td>",
											"            <td>${getLKFPunkteValue(lkfResponse, \"ZusatzpunkteMehrfachleistungen\")}</td>",
											"            <td>${getLKFPunkteValue(lkfResponse, \"PunkteBelagsdauerausreisserUntenLeistungskomponente\")}</td>",
											"            <td>${getLKFPunkteValue(lkfResponse, \"PunkteBelagsdauerausreisserUntenTageskomponente\")}</td>",
											"            <td>${getLKFPunkteValue(lkfResponse, \"ZusatzpunkteBelagsdauerausreisserNachOben\")}</td>",
											"            <td>${getLKFPunkteValue(lkfResponse, \"PunkteSpeziellerBereicheTageweise\")}</td>",
											"            <td>${getExtensionDecimalValue(lkfResponse, \"https://elga.moped.at/StructureDefinition/moped-ext-LDFPunktewertNetto\")}</td>",
											"            <td>${getExtensionDecimalValue(lkfResponse, \"https://elga.moped.at/StructureDefinition/moped-ext-PunkteLDFPauschale\")}</td>",
											"            <td>${getExtensionDecimalValue(lkfResponse, \"https://elga.moped.at/StructureDefinition/moped-ext-LDFBetragNetto\")}</td>",
											"            <td>${getExtensionMoneyValue(lkfResponse, \"https://elga.moped.at/StructureDefinition/moped-ext-PatientenanteilAngehoerige\")}</td>",
											"            <td>${getExtensionMoneyValue(lkfResponse, \"https://elga.moped.at/StructureDefinition/moped-ext-Patientenanteil\")}</td>",
											"            <td>${getExtensionUnsignedIntValue(lkfResponse, \"https://elga.moped.at/StructureDefinition/moped-ext-Beihilfenaequivalent\")}</td>",
											"",
											"            <td>${getExtensionMoneyValue(lkfResponse, \"https://elga.moped.at/StructureDefinition/moped-ext-ForderungsbetragAuslaenderverrechnungRegress\")}</td>",
											"            <td>${getExtensionStringValue(lkfResponse, \"https://elga.moped.at/StructureDefinition/moped-ext-RechnungsnummerKHLGF\")}</td>",
											"            <td>${getExtensionStringValue(lkfResponse, \"https://elga.moped.at/StructureDefinition/moped-ext-Sonderleistungsnummer\")}</td>",
											"            <td>${getExtensionDecimalValue(lkfResponse, \"https://elga.moped.at/StructureDefinition/moped-ext-AnzahlSonderleistungen\")}</td>",
											"            <td>${getCodingValue(lkfResponse, \"https://elga.moped.at/StructureDefinition/moped-ext-KonstenmeldungARK\")}</td>",
											"        </tr>`;",
											"});",
											"",
											"htmlContent += `</tbody></table>`;",
											"pm.visualizer.set(htmlContent);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{server-base}}/ClaimResponse?_include=*&outcome=complete&use=claim",
									"host": [
										"{{server-base}}"
									],
									"path": [
										"ClaimResponse"
									],
									"query": [
										{
											"key": "_include",
											"value": "*"
										},
										{
											"key": "outcome",
											"value": "complete"
										},
										{
											"key": "use",
											"value": "claim"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"auth": {
				"type": "basic",
				"basic": [
					{
						"key": "password",
						"value": "hackathon",
						"type": "string"
					},
					{
						"key": "username",
						"value": "bund_hackathon",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "server-base",
			"value": "https://moped-dev.pineit.at/pineit/pitaccess-waf/fhir/fhir/",
			"type": "string"
		},
		{
			"key": "gda-oid-system",
			"value": "urn:ietf:rfc:3986",
			"type": "string",
			"disabled": true
		},
		{
			"key": "gda-oid-value",
			"value": "urn:oid:1.3.6.1.4.1.36124.5.TBD",
			"type": "string"
		},
		{
			"key": "aufnahmezahl",
			"value": "TBD",
			"type": "string"
		},
		{
			"key": "vdasID",
			"value": "TBD",
			"type": "string"
		},
		{
			"key": "svnr-system",
			"value": "urn:oid:1.2.40.0.10.1.4.3.1",
			"type": "string",
			"disabled": true
		},
		{
			"key": "svnr",
			"value": "TBD",
			"type": "string"
		},
		{
			"key": "sv-identifier-value",
			"value": "TBD",
			"type": "string"
		},
		{
			"key": "coverage_id",
			"value": ""
		},
		{
			"key": "vae_req_id",
			"value": ""
		}
	]
}